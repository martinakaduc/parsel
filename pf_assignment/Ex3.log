Implementing SCC 0 {'findHappinestNumber'}
Total: 64 completions!
[['', 'def is_prime(n: int) -> bool:', '    if n < 2:', '        return False', '    for i in range(2, int(n ** 0.5) + 1):', '        if n % i == 0:', '            return False', '    return True', '', '', 'def is_happy(n: int) -> bool:', '    def sum_of_squares(n: int) -> int:', '        return sum(int(digit) ** 2 for digit in str(n))', '', '    seen = set()', '    while n != 1 and n not in seen:', '        seen.add(n)', '        n = sum_of_squares(n)', '    return n == 1', '', '', 'def findHappinestNumber(input: str) -> int:', '    def is_power_of_two(n: int) -> bool:', '        return n != 0 and (n & (n - 1)) == 0', '', '    nums = [int(num) for num in input.split(",")]', '    happy_nums = [num for num in nums if is_prime(num) and is_happy(num) and is_power_of_two(sum(int(digit) for digit in str(num)))]', '    if not happy_nums:', '        return 0', '    max_sum = max(sum(int(digit) for digit in str(num)) for num in happy_nums)', '    happiest_nums = [num for num in happy_nums if sum(int(digit) for digit in str(num)) == max_sum]', '    return max(happiest_nums)', ''], ['', 'def findHappinestNumber(input: str) -> int:', '    def is_prime(n: int) -> bool:', '        if n < 2:', '            return False', '        for i in range(2, int(n**0.5)+1):', '            if n % i == 0:', '                return False', '        return True', '', '    def is_happy(n: int) -> bool:', '        def digit_sum(n: int) -> int:', '            return sum(int(d) for d in str(n))', '        ', '        def is_power_of_2(n: int) -> bool:', '            return n != 0 and (n & (n - 1)) == 0', '', '        while n != 1 and n != 4:', '            n = digit_sum(n)', '        return n == 1 or n == 4', '', '    def get_happiness_score(n: int) -> int:', '        return sum(int(d) for d in str(n))', '', '    happiest_number = 0', '    max_score = -1', '    for s in input.split(","):', '        n = int(s)', '        if is_prime(n) and is_happy(n):', '            score = get_happiness_score(n)', '            if score > max_score or (score == max_score and n > happiest_number):', '                happiest_number = n', '                max_score = score', '', '    return happiest_number', ''], ['', 'def is_prime(n: int) -> bool:', '    if n < 2:', '        return False', '    for i in range(2, int(n**0.5)+1):', '        if n % i == 0:', '            return False', '    return True', '', 'def sum_of_digits(n: int) -> int:', '    return sum(int(digit) for digit in str(n))', '', 'def findHappinestNumber(input: str) -> int:', '    happiest_number = 0', '    max_sum_of_digits = 0', "    for number_str in input.split(','):", '        number = int(number_str)', '        if is_prime(number):', '            sum_of_digits_number = sum_of_digits(number)', '            if sum_of_digits_number > max_sum_of_digits and sum_of_digits_number & (sum_of_digits_number - 1) == 0:', '                happiest_number = number', '                max_sum_of_digits = sum_of_digits_number', '            elif sum_of_digits_number == max_sum_of_digits and number > happiest_number:', '                happiest_number = number', '    return happiest_number', ''], ['', 'def is_prime(n: int) -> bool:', '    if n < 2:', '        return False', '    for i in range(2, int(n ** 0.5) + 1):', '        if n % i == 0:', '            return False', '    return True', '', 'def sum_of_digits(n: int) -> int:', '    return sum(int(digit) for digit in str(n))', '', 'def findHappinestNumber(input: str) -> int:', '    def is_happy(n: int) -> bool:', '        def sum_of_squares(n: int) -> int:', '            return sum(int(digit) ** 2 for digit in str(n))', '        seen = set()', '        while n != 1 and n not in seen:', '            seen.add(n)', '            n = sum_of_squares(n)', '        return n == 1', '    max_sum = 0', '    happiest_number = 0', '    for number in input.split(","):', '        number = int(number)', '        if is_prime(number) and is_happy(sum_of_digits(number)):', '            current_sum = sum_of_digits(number)', '            if current_sum > max_sum or (current_sum == max_sum and number > happiest_number):', '                max_sum = current_sum', '                happiest_number = number', '    return happiest_number', ''], ['', 'def is_prime(n: int) -> bool:', '    if n <= 1:', '        return False', '    for i in range(2, int(n ** 0.5) + 1):', '        if n % i == 0:', '            return False', '    return True', '', 'def is_happy(n: int) -> bool:', '    sum_of_digits = 0', '    while n > 0:', '        sum_of_digits += (n % 10) ** 2', '        n //= 10', '    return sum_of_digits == 1 or is_happy(sum_of_digits)', '', 'def findHappinestNumber(input: str) -> int:', "    nums = [int(num) for num in input.split(',') if num.isdigit()]", '    happiest_num = 0', '    max_sum_of_digits = 0', '    for num in nums:', '        if is_prime(num) and is_happy(sum(int(digit) for digit in str(num))):', '            sum_of_digits = sum(int(digit) for digit in str(num))', '            if sum_of_digits > max_sum_of_digits:', '                happiest_num = num', '                max_sum_of_digits = sum_of_digits', '            elif sum_of_digits == max_sum_of_digits and num > happiest_num:', '                happiest_num = num', '    return happiest_num', ''], ['', 'def is_prime(n: int) -> bool:', '    if n < 2:', '        return False', '    for i in range(2, int(n ** 0.5) + 1):', '        if n % i == 0:', '            return False', '    return True', '', 'def sum_of_digits(n: int) -> int:', '    return sum(int(d) for d in str(n))', '', 'def is_power_of_2(n: int) -> bool:', '    return n != 0 and (n & (n - 1)) == 0', '', 'def findHappinestNumber(input: str) -> int:', '    happiest_number = 0', '    happiest_sum = 0', "    for number_str in input.split(','):", '        number = int(number_str)', '        if is_prime(number) and is_power_of_2(sum_of_digits(number)):', '            current_sum = sum_of_digits(number)', '            if current_sum > happiest_sum:', '                happiest_number = number', '                happiest_sum = current_sum', '            elif current_sum == happiest_sum and number > happiest_number:', '                happiest_number = number', '    return happiest_number', ''], ['', 'def is_prime(n: int) -> bool:', '    if n < 2:', '        return False', '    for i in range(2, int(n ** 0.5) + 1):', '        if n % i == 0:', '            return False', '    return True', '', 'def is_happy(n: int) -> bool:', '    def get_next(num: int) -> int:', '        return sum(int(digit) ** 2 for digit in str(num))', '', '    seen = set()', '    while n != 1 and n not in seen:', '        seen.add(n)', '        n = get_next(n)', '    return n == 1', '', 'def findHappinestNumber(input: str) -> int:', '    def get_sum_of_digits(n: int) -> int:', '        return sum(int(digit) for digit in str(n))', '', "    numbers = [int(num) for num in input.split(',') if num.isdigit()]", '    happy_numbers = [num for num in numbers if is_prime(num) and is_happy(num)]', '    if not happy_numbers:', '        return 0', '    max_sum = max(get_sum_of_digits(num) for num in happy_numbers)', '    happiest_numbers = [num for num in happy_numbers if get_sum_of_digits(num) == max_sum]', '    return max(happiest_numbers)', ''], ['', 'def findHappinestNumber(input: str) -> int:', '    def is_prime(n: int) -> bool:', '        if n < 2:', '            return False', '        for i in range(2, int(n ** 0.5) + 1):', '            if n % i == 0:', '                return False', '        return True', '', '    def is_happy(n: int) -> bool:', '        s = 0', '        while n > 0:', '            s += (n % 10) ** 2', '            n //= 10', '        return s == 1 or is_happy(s)', '', '    def sum_of_digits(n: int) -> int:', '        s = 0', '        while n > 0:', '            s += n % 10', '            n //= 10', '        return s', '', "    numbers = [int(x) for x in input.split(',') if x.isdigit()]", '    happiest_number = 0', '    happiest_sum = 0', '    for num in numbers:', '        if is_prime(num) and is_happy(sum_of_digits(num)):', '            num_sum = sum_of_digits(num)', '            if num_sum > happiest_sum:', '                happiest_number = num', '                happiest_sum = num_sum', '            elif num_sum == happiest_sum and num > happiest_number:', '                happiest_number = num', '    return happiest_number', ''], ['def is_prime(n: int) -> bool:', '    if n < 2:', '        return False', '    for i in range(2, int(n ** 0.5) + 1):', '        if n % i == 0:', '            return False', '    return True', '', 'def is_happy(n: int) -> bool:', '    s = 0', '    while n > 0:', '        s += (n % 10) ** 2', '        n //= 10', '    return s == 1 or is_happy(s)', '', 'def findHappinestNumber(input: str) -> int:', '    happiest_num = 0', '    happiest_sum = 0', "    for num_str in input.split(','):", '        num = int(num_str)', '        if is_prime(num) and is_happy(num):', '            digit_sum = sum(map(int, num_str))', '            if digit_sum > happiest_sum or (digit_sum == happiest_sum and num > happiest_num):', '                happiest_num = num', '                happiest_sum = digit_sum', '    return happiest_num'], ['def is_prime(num: int) -> bool:', '    if num < 2:', '        return False', '    for i in range(2, int(num**0.5)+1):', '        if num % i == 0:', '            return False', '    return True', '', 'def is_happy(num: int) -> bool:', '    def sum_of_squares(n: int) -> int:', '        return sum(int(digit)**2 for digit in str(n))', '', '    seen = set()', '    while num != 1 and num not in seen:', '        seen.add(num)', '        num = sum_of_squares(num)', '    return num == 1', '', 'def findHappinestNumber(input: str) -> int:', '    nums = [int(num) for num in input.split(",")]', '    happiest_num = 0', '    happiest_sum = 0', '    for num in nums:', '        if is_prime(num) and (num > happiest_num or (num == happiest_num and sum(int(digit) for digit in str(num)) > happiest_sum)) and (sum(int(digit) for digit in str(num)) & (sum(int(digit) for digit in str(num))-1)) == 0:', '            happiest_num = num', '            happiest_sum = sum(int(digit) for digit in str(num))', '    return happiest_num'], ['', 'def findHappinestNumber(input: str) -> int:', '    def isPrime(n):', '        if n <= 1:', '            return False', '        for i in range(2, int(n**0.5) + 1):', '            if n % i == 0:', '                return False', '        return True', '    ', '    def isPowerOfTwo(n):', '        return n > 0 and (n & (n - 1)) == 0', '    ', '    def digitSum(n):', '        return sum(int(i) for i in str(n))', '    ', '    happiest_num = 0', '    happiest_sum = 0', '    ', "    for num_str in input.split(','):", '        num = int(num_str)', '        if isPrime(num):', '            sum_of_digits = digitSum(num)', '            if isPowerOfTwo(sum_of_digits):', '                if sum_of_digits > happiest_sum or (sum_of_digits == happiest_sum and num > happiest_num):', '                    happiest_num = num', '                    happiest_sum = sum_of_digits', '    ', '    return happiest_num', ''], ['', 'def is_prime(num: int) -> bool:', '    if num < 2:', '        return False', '    for i in range(2, int(num ** 0.5) + 1):', '        if num % i == 0:', '            return False', '    return True', '', 'def sum_of_digits(num: int) -> int:', '    return sum(int(digit) for digit in str(num))', '', 'def findHappinestNumber(input: str) -> int:', '    numbers = input.split(",")', '    happiest_number = 0', '    max_sum_of_digits = 0', '    for number in numbers:', '        if is_prime(int(number)):', '            sum_digits = sum_of_digits(int(number))', '            if sum_digits == 2 or sum_digits & (sum_digits - 1) == 0:', '                if sum_digits > max_sum_of_digits or (sum_digits == max_sum_of_digits and int(number) > happiest_number):', '                    max_sum_of_digits = sum_digits', '                    happiest_number = int(number)', '    return happiest_number', ''], ['', 'def findHappinestNumber(input: str) -> int:', '    def is_prime(n: int) -> bool:', '        if n < 2:', '            return False', '        for i in range(2, int(n ** 0.5) + 1):', '            if n % i == 0:', '                return False', '        return True', '', '    def is_happy(n: int) -> bool:', '        def digit_sum(n: int) -> int:', '            return sum(int(digit) ** 2 for digit in str(n))', '', '        seen = set()', '        while n != 1 and n not in seen:', '            seen.add(n)', '            n = digit_sum(n)', '        return n == 1', '', '    def is_power_of_2(n: int) -> bool:', '        return n != 0 and (n & (n - 1)) == 0', '', '    happiest_number = 0', '    happiest_number_digit_sum = 0', '    for number in input.split(","):', '        number = int(number.strip())', '        if is_prime(number) and is_power_of_2(sum(int(digit) for digit in str(number))):', '            if sum(int(digit) for digit in str(number)) > happiest_number_digit_sum:', '                happiest_number = number', '                happiest_number_digit_sum = sum(int(digit) for digit in str(number))', '            elif sum(int(digit) for digit in str(number)) == happiest_number_digit_sum and number > happiest_number:', '                happiest_number = number', '                happiest_number_digit_sum = sum(int(digit) for digit in str(number))', '', '    return happiest_number', ''], ['', 'def is_prime(n: int) -> bool:', '    if n < 2:', '        return False', '    for i in range(2, int(n ** 0.5) + 1):', '        if n % i == 0:', '            return False', '    return True', '', 'def is_happy(n: int) -> bool:', '    def sum_of_squares(n: int) -> int:', '        return sum(int(digit) ** 2 for digit in str(n))', '', '    seen = set()', '    while n != 1 and n not in seen:', '        seen.add(n)', '        n = sum_of_squares(n)', '    return n == 1', '', 'def findHappinestNumber(input: str) -> int:', '    def is_power_of_two(n: int) -> bool:', '        return n != 0 and (n & (n - 1)) == 0', '', '    numbers = [int(x) for x in input.split(",")]', '    happiest_number = 0', '    for number in numbers:', '        if is_prime(number) and is_power_of_two(sum(int(digit) for digit in str(number))):', '            if sum(int(digit) for digit in str(number)) > sum(int(digit) for digit in str(happiest_number)):', '                happiest_number = number', '            elif sum(int(digit) for digit in str(number)) == sum(int(digit) for digit in str(happiest_number)) and number > happiest_number:', '                happiest_number = number', '    return happiest_number', ''], ['', 'def isHappy(num: int) -> bool:', '    def get_next(num):', '        total_sum = 0', '        while num > 0:', '            num, digit = divmod(num, 10)', '            total_sum += digit ** 2', '        return total_sum', '', '    seen = set()', '    while num != 1 and num not in seen:', '        seen.add(num)', '        num = get_next(num)', '', '    return num == 1', '', 'def isPrime(num: int) -> bool:', '    if num < 2:', '        return False', '    for i in range(2, int(num**0.5)+1):', '        if num % i == 0:', '            return False', '    return True', '', 'def findHappiestNumber(input: str) -> int:', "    nums = [int(num) for num in input.split(',')]", '    happy_nums = []', '    for num in nums:', '        if isPrime(num) and (num == 2 or sum(int(digit) for digit in str(num)) in [2,4,8,16,32,64,128,256]):', '            happy_nums.append(num)', '    if not happy_nums:', '        return 0', '    else:', '        max_sum = max(sum(int(digit) for digit in str(num)) for num in happy_nums)', '        happiest_nums = [num for num in happy_nums if sum(int(digit) for digit in str(num)) == max_sum]', '        return max(happiest_nums)', ''], ['', 'def isPrime(n: int) -> bool:', '    if n <= 1:', '        return False', '    for i in range(2, int(n**0.5)+1):', '        if n % i == 0:', '            return False', '    return True', '', 'def sumOfDigits(n: int) -> int:', '    return sum(int(digit) for digit in str(n))', '', 'def isPowerOfTwo(n: int) -> bool:', '    return n != 0 and (n & (n - 1)) == 0', '', 'def findHappinestNumber(input: str) -> int:', '    happiest = 0', "    for number in input.split(','):", '        number = int(number)', '        if isPrime(number) and isPowerOfTwo(sumOfDigits(number)):', '            if sumOfDigits(number) > sumOfDigits(happiest):', '                happiest = number', '            elif sumOfDigits(number) == sumOfDigits(happiest) and number > happiest:', '                happiest = number', '    return happiest', ''], ['', 'def is_prime(n: int) -> bool:', '    if n < 2:', '        return False', '    for i in range(2, int(n**0.5)+1):', '        if n % i == 0:', '            return False', '    return True', '', 'def is_happy(n: int) -> bool:', '    def sum_of_squares(n: int) -> int:', '        return sum(int(i)**2 for i in str(n))', '    seen = set()', '    while n != 1 and n not in seen:', '        seen.add(n)', '        n = sum_of_squares(n)', '    return n == 1', '', 'def findHappinestNumber(input: str) -> int:', '    happy_nums = []', "    for num in input.split(','):", '        num = int(num)', "        if is_prime(num) and (bin(sum(int(i) for i in str(num)))[2:] in ['1', '10', '100', '1000', '10000', '100000', '1000000']):", '            happy_nums.append(num)', '    if not happy_nums:', '        return 0', '    max_sum = max(sum(int(i) for i in str(n)) for n in happy_nums)', '    happiest_num = max(n for n in happy_nums if sum(int(i) for i in str(n)) == max_sum)', '    return happiest_num', ''], ['', 'def is_prime(n: int) -> bool:', '    if n < 2:', '        return False', '    for i in range(2, int(n**0.5)+1):', '        if n % i == 0:', '            return False', '    return True', '', 'def sum_of_digits(n: int) -> int:', '    return sum(int(x) for x in str(n))', '', 'def findHappinestNumber(input: str) -> int:', '    max_sum = -1', '    happiest_number = 0', "    for num in input.split(','):", '        num = int(num)', '        if is_prime(num):', '            digit_sum = sum_of_digits(num)', '            if (digit_sum & (digit_sum - 1) == 0) and digit_sum != 0:', '                if digit_sum > max_sum:', '                    max_sum = digit_sum', '                    happiest_number = num', '                elif digit_sum == max_sum and num > happiest_number:', '                    happiest_number = num', '    return happiest_number', ''], ['', 'def findHappinestNumber(input:str) -> int:', '    def is_prime(n):', '        if n < 2:', '            return False', '        for i in range(2, int(n**0.5)+1):', '            if n % i == 0:', '                return False', '        return True', '    ', '    def is_happy(n):', '        def digit_square_sum(n):', '            res = 0', '            while n > 0:', '                res += (n % 10) ** 2', '                n //= 10', '            return res', '        visited = set()', '        while n != 1 and n not in visited:', '            visited.add(n)', '            n = digit_square_sum(n)', '        return n == 1', '    ', '    def get_happiness_score(n):', '        def get_sum_of_digits(n):', '            res = 0', '            while n > 0:', '                res += n % 10', '                n //= 10', '            return res', '        if is_happy(n):', '            return get_sum_of_digits(n)', '        return 0', '    ', '    happiest_number = 0', '    max_happiness_score = 0', '    for num_str in input.split(","):', '        num = int(num_str)', '        if is_prime(num):', '            happiness_score = get_happiness_score(num)', '            if happiness_score > max_happiness_score:', '                happiest_number = num', '                max_happiness_score = happiness_score', '            elif happiness_score == max_happiness_score and num > happiest_number:', '                happiest_number = num', '    return happiest_number', ''], ['', 'def is_prime(num: int) -> bool:', '    if num < 2:', '        return False', '    for i in range(2, int(num ** 0.5) + 1):', '        if num % i == 0:', '            return False', '    return True', '', 'def is_power_of_two(num: int) -> bool:', '    return num > 0 and (num & (num - 1)) == 0', '', 'def sum_of_digits(num: int) -> int:', '    return sum(int(digit) for digit in str(num))', '', 'def findHappinestNumber(input: str) -> int:', '    happy_numbers = []', '    max_happy_sum = 0', '    for number in input.split(","):', '        number = int(number)', '        if is_prime(number) and is_power_of_two(sum_of_digits(number)):', '            happy_sum = sum_of_digits(number)', '            if happy_sum > max_happy_sum:', '                happy_numbers = [number]', '                max_happy_sum = happy_sum', '            elif happy_sum == max_happy_sum:', '                happy_numbers.append(number)', '    return max(happy_numbers) if happy_numbers else 0', ''], ['', 'def is_prime(n: int) -> bool:', '    if n < 2:', '        return False', '    for i in range(2, int(n**0.5)+1):', '        if n % i == 0:', '            return False', '    return True', '', 'def sum_of_digits(n: int) -> int:', '    return sum(int(d) for d in str(n))', '', 'def findHappinestNumber(input: str) -> int:', '    max_sum = -1', '    happiest_num = 0', "    for num in input.split(','):", '        if not num.isdigit():', '            continue', '        num = int(num)', '        if is_prime(num):', '            digits_sum = sum_of_digits(num)', '            if (digits_sum & (digits_sum - 1) == 0) and digits_sum != 0:', '                if digits_sum > max_sum or (digits_sum == max_sum and num > happiest_num):', '                    max_sum = digits_sum', '                    happiest_num = num', '    return happiest_num', ''], ['', 'def is_prime(n: int) -> bool:', '    if n < 2:', '        return False', '    for i in range(2, int(n**0.5)+1):', '        if n % i == 0:', '            return False', '    return True', '', 'def is_happy(n: int) -> bool:', '    sum_of_digits = 0', '    while n > 0:', '        sum_of_digits += (n % 10)**2', '        n //= 10', '    return sum_of_digits == 1 or is_happy(sum_of_digits)', '', 'def findHappinestNumber(input: str) -> int:', '    nums = [int(num) for num in input.split(",")]', '    happiest_num = 0', '    happiest_sum = 0', '    for num in nums:', '        if is_prime(num) and is_happy(num):', '            digit_sum = sum(int(digit) for digit in str(num))', '            if digit_sum > happiest_sum:', '                happiest_num = num', '                happiest_sum = digit_sum', '            elif digit_sum == happiest_sum and num > happiest_num:', '                happiest_num = num', '    return happiest_num', ''], ['', 'def is_prime(n: int) -> bool:', '    if n < 2:', '        return False', '    for i in range(2, int(n**0.5) + 1):', '        if n % i == 0:', '            return False', '    return True', '', 'def findHappinestNumber(input: str) -> int:', '    numbers = input.split(",")', '    happiest_number = 0', '    max_sum_of_digits = 0', '    for number in numbers:', '        if not number.isdigit():', '            continue', '        number = int(number)', '        if not is_prime(number):', '            continue', '        sum_of_digits = sum(int(digit) for digit in str(number))', '        if sum_of_digits & (sum_of_digits - 1) == 0:', '            if sum_of_digits > max_sum_of_digits:', '                max_sum_of_digits = sum_of_digits', '                happiest_number = number', '            elif sum_of_digits == max_sum_of_digits and number > happiest_number:', '                happiest_number = number', '    return happiest_number', ''], ['', 'def is_prime(n: int) -> bool:', '    if n < 2:', '        return False', '    for i in range(2, int(n**0.5) + 1):', '        if n % i == 0:', '            return False', '    return True', '', 'def sum_of_digits(n: int) -> int:', '    return sum(int(digit) for digit in str(n))', '', 'def is_power_of_two(n: int) -> bool:', '    return n != 0 and (n & (n - 1)) == 0', '', 'def findHappinestNumber(input: str) -> int:', '    happiest_number = 0', '    max_sum_of_digits = 0', "    for number in input.split(','):", '        number = int(number)', '        if is_prime(number) and is_power_of_two(sum_of_digits(number)):', '            current_sum_of_digits = sum_of_digits(number)', '            if current_sum_of_digits > max_sum_of_digits:', '                happiest_number = number', '                max_sum_of_digits = current_sum_of_digits', '            elif current_sum_of_digits == max_sum_of_digits:', '                happiest_number = max(happiest_number, number)', '    return happiest_number', ''], ['', 'import math', '', 'def is_prime(n: int) -> bool:', '    if n < 2:', '        return False', '    for i in range(2, int(math.sqrt(n)) + 1):', '        if n % i == 0:', '            return False', '    return True', '', 'def sum_of_digits(n: int) -> int:', '    return sum(int(digit) for digit in str(n))', '', 'def findHappinestNumber(input: str) -> int:', '    happiest_number = 0', '    max_sum_of_digits = 0', '    for num_str in input.split(","):', '        num = int(num_str)', '        if is_prime(num):', '            sum_of_num = sum_of_digits(num)', '            log2_sum_of_num = math.log2(sum_of_num)', '            if log2_sum_of_num.is_integer():', '                if sum_of_num > max_sum_of_digits or (sum_of_num == max_sum_of_digits and num > happiest_number):', '                    happiest_number = num', '                    max_sum_of_digits = sum_of_num', '    return happiest_number', ''], ['', 'def is_prime(n: int) -> bool:', '    if n <= 1:', '        return False', '    for i in range(2, int(n**0.5)+1):', '        if n % i == 0:', '            return False', '    return True', '', 'def sum_of_digits(n: int) -> int:', '    return sum(int(digit) for digit in str(n))', '', 'def findHappinestNumber(input: str) -> int:', '    happiest_num = 0', "    for num in input.split(','):", '        num = int(num)', '        if is_prime(num):', '            sum_of_num = sum_of_digits(num)', '            if sum_of_num > sum_of_digits(happiest_num) and (sum_of_num & (sum_of_num - 1)) == 0:', '                happiest_num = num', '    return happiest_num', ''], ['', 'def is_prime(n: int) -> bool:', '    if n < 2:', '        return False', '    for i in range(2, int(n ** 0.5) + 1):', '        if n % i == 0:', '            return False', '    return True', '', 'def sum_of_digits(n: int) -> int:', '    return sum([int(i) for i in str(n)])', '', 'def findHappinestNumber(input: str) -> int:', "    nums = input.split(',')", '    happy_nums = []', '    for num in nums:', '        if is_prime(int(num)):', '            digit_sum = sum_of_digits(int(num))', '            if digit_sum > 0 and ((digit_sum & (digit_sum - 1)) == 0):', '                happy_nums.append(int(num))', '    if len(happy_nums) == 0:', '        return 0', '    happiest_num = max(happy_nums, key=lambda x: (sum_of_digits(x), x))', '    return happiest_num', ''], ['', 'def findHappinestNumber(input: str) -> int:', '    def is_prime(n: int) -> bool:', '        if n < 2:', '            return False', '        for i in range(2, int(n ** 0.5) + 1):', '            if n % i == 0:', '                return False', '        return True', '', '    def is_happy(n: int) -> bool:', '        sum_of_digits = 0', '        while n > 0:', '            sum_of_digits += (n % 10) ** 2', '            n //= 10', '        return sum_of_digits == 1 or is_happy(sum_of_digits)', '', '    def sum_of_digits(n: int) -> int:', '        return sum(int(d) for d in str(n))', '', '    happiest_number, max_sum_of_digits = 0, 0', "    for num in input.split(','):", '        num = int(num)', '        if is_prime(num) and is_happy(sum_of_digits(num)):', '            num_sum_of_digits = sum_of_digits(num)', '            if num_sum_of_digits > max_sum_of_digits:', '                happiest_number, max_sum_of_digits = num, num_sum_of_digits', '            elif num_sum_of_digits == max_sum_of_digits and num > happiest_number:', '                happiest_number = num', '    return happiest_number', ''], ['def is_prime(num: int) -> bool:', '    if num < 2:', '        return False', '    for i in range(2, int(num**0.5)+1):', '        if num % i == 0:', '            return False', '    return True', '', 'def is_happy(num: int) -> bool:', '    def sum_of_squares(n: int) -> int:', '        return sum(int(digit)**2 for digit in str(n))', '    seen = set()', '    while num not in seen:', '        seen.add(num)', '        num = sum_of_squares(num)', '    return num == 1', '', 'def findHappinestNumber(input: str) -> int:', "    nums = [int(num) for num in input.split(',') if num.isdigit()]", '    happy_nums = [num for num in nums if is_prime(num) and (num < 2 or (num > 1 and (sum(int(digit) for digit in str(num)) in [2**i for i in range(1, 31)])))]', '    if not happy_nums:', '        return 0', '    max_sum = max(sum(int(digit) for digit in str(num)) for num in happy_nums)', '    happiest_num = max(num for num in happy_nums if sum(int(digit) for digit in str(num)) == max_sum)', '    return happiest_num'], ['def is_prime(n: int) -> bool:', '    if n < 2:', '        return False', '    for i in range(2, int(n**0.5)+1):', '        if n % i == 0:', '            return False', '    return True', '', 'def is_happy(n: int) -> bool:', '    if n == 1:', '        return True', '    elif n == 4:', '        return False', '    else:', '        return is_happy(sum(int(i)**2 for i in str(n)))', '', 'def findHappinestNumber(input: str) -> int:', "    nums = [int(n) for n in input.split(',') if n.isnumeric()]", '    happiest_num = 0', '    happiest_sum = 0', '    for num in nums:', '        if is_prime(num):', '            digit_sum = sum(int(i) for i in str(num))', "            if digit_sum > happiest_sum and (bin(digit_sum)[2:].count('1') == 1):", '                happiest_num = num', '                happiest_sum = digit_sum', '            elif digit_sum == happiest_sum and num > happiest_num:', '                happiest_num = num', '                happiest_sum = digit_sum', '    return happiest_num'], ['', 'def findHappinestNumber(input: str) -> int:', '    def is_prime(n: int) -> bool:', '        if n < 2:', '            return False', '        for i in range(2, int(n ** 0.5) + 1):', '            if n % i == 0:', '                return False', '        return True', '', '    def is_happy(n: int) -> bool:', '        def sum_of_digits(n: int) -> int:', '            return sum(int(digit) ** 2 for digit in str(n))', '', '        seen = set()', '        while n != 1 and n not in seen:', '            seen.add(n)', '            n = sum_of_digits(n)', '        return n == 1', '', '    def is_power_of_2(n: int) -> bool:', '        return n != 0 and (n & (n - 1)) == 0', '', '    def sum_of_digits(n: int) -> int:', '        return sum(int(digit) for digit in str(n))', '', '    happiest_number, happiest_number_sum = 0, 0', "    for number in input.split(','):", '        number = int(number)', '        if is_prime(number) and is_happy(number) and is_power_of_2(sum_of_digits(number)):', '            number_sum = sum_of_digits(number)', '            if number_sum > happiest_number_sum or (number_sum == happiest_number_sum and number > happiest_number):', '                happiest_number, happiest_number_sum = number, number_sum', '    return happiest_number', ''], ['def findHappinestNumber(input: str) -> int:', '    def is_prime(n):', '        if n < 2:', '            return False', '        for i in range(2, int(n**0.5)+1):', '            if n % i == 0:', '                return False', '        return True', '', '    def is_happy(n):', '        nums = set()', '        while n != 1:', '            n = sum(int(i)**2 for i in str(n))', '            if n in nums:', '                return False', '            nums.add(n)', '        return True', '', '    def sum_of_digits_power_of_2(n):', '        return sum(int(i) for i in str(n)) in {2, 4, 8, 16, 32, 64, 128, 256}', '', '    happiest = 0', "    for num in input.split(','):", '        num = int(num)', '        if is_prime(num) and is_happy(num) and sum_of_digits_power_of_2(num):', '            if sum_of_digits_power_of_2(num) > sum_of_digits_power_of_2(happiest):', '                happiest = num', '            elif sum_of_digits_power_of_2(num) == sum_of_digits_power_of_2(happiest):', '                if num > happiest:', '                    happiest = num', '    return happiest'], ['', 'def findHappinestNumber(input: str) -> int:', '    def is_prime(n: int) -> bool:', '        if n < 2:', '            return False', '        for i in range(2, int(n ** 0.5) + 1):', '            if n % i == 0:', '                return False', '        return True', '    ', '    def is_happy(n: int) -> bool:', '        s = 0', '        while n > 0:', '            s += (n % 10) ** 2', '            n //= 10', '        if s == 1:', '            return True', '        elif s == 4:', '            return False', '        else:', '            return is_happy(s)', '    ', '    def sum_of_digits(n: int) -> int:', '        s = 0', '        while n > 0:', '            s += n % 10', '            n //= 10', '        return s', '    ', '    numbers = input.split(",")', '    happiest_number = 0', '    highest_sum_of_digits = 0', '    for num in numbers:', '        num = int(num)', '        if is_prime(num) and is_happy(sum_of_digits(num)):', '            sum_digits = sum_of_digits(num)', '            if sum_digits > highest_sum_of_digits:', '                happiest_number = num', '                highest_sum_of_digits = sum_digits', '            elif sum_digits == highest_sum_of_digits and num > happiest_number:', '                happiest_number = num', '    return happiest_number', ''], ['', 'def is_happy_number(num):', '    def sum_of_squares(n):', '        return sum(int(digit)**2 for digit in str(n))', '', '    seen = set()', '    while num not in seen:', '        seen.add(num)', '        num = sum_of_squares(num)', '    return num == 1', '', 'def is_prime(num):', '    if num < 2:', '        return False', '    for i in range(2, int(num ** 0.5) + 1):', '        if num % i == 0:', '            return False', '    return True', '', 'def findHappinestNumber(input):', '    happiest_num = 0', '    max_sum_of_digits = 0', "    for num_str in input.split(','):", '        num = int(num_str)', '        if is_happy_number(num) and is_prime(num):', '            sum_of_digits = sum(int(digit) for digit in num_str)', '            if sum_of_digits > max_sum_of_digits:', '                happiest_num = num', '                max_sum_of_digits = sum_of_digits', '            elif sum_of_digits == max_sum_of_digits and num > happiest_num:', '                happiest_num = num', '    return happiest_num', ''], ['', 'def is_prime(number: int) -> bool:', '    if number < 2:', '        return False', '    for i in range(2, int(number**0.5)+1):', '        if number % i == 0:', '            return False', '    return True', '', 'def sum_of_digits(number: int) -> int:', '    return sum([int(digit) for digit in str(number)])', '', 'def is_power_of_two(number: int) -> bool:', '    return number > 0 and (number & (number - 1)) == 0', '', 'def findHappinestNumber(input: str) -> int:', '    happiest_number = 0', '    max_sum_of_digits = 0', '    for number_str in input.split(","):', '        number = int(number_str)', '        if is_prime(number) and is_power_of_two(sum_of_digits(number)):', '            current_sum_of_digits = sum_of_digits(number)', '            if current_sum_of_digits > max_sum_of_digits:', '                happiest_number = number', '                max_sum_of_digits = current_sum_of_digits', '            elif current_sum_of_digits == max_sum_of_digits and number > happiest_number:', '                happiest_number = number', '    return happiest_number', ''], ['def is_prime(n: int) -> bool:', '    if n < 2:', '        return False', '    for i in range(2, int(n**0.5)+1):', '        if n % i == 0:', '            return False', '    return True', '', 'def is_happy(n: int) -> bool:', '    def sum_of_squares(n: int) -> int:', '        return sum(int(digit)**2 for digit in str(n))', '    ', '    seen = set()', '    while n != 1 and n not in seen:', '        seen.add(n)', '        n = sum_of_squares(n)', '    return n == 1', '', 'def findHappinestNumber(input: str) -> int:', "    numbers = [int(n) for n in input.split(',') if n.isdigit()]", '    happiest_number = 0', '    max_sum_of_digits = 0', '    ', '    for number in numbers:', '        if is_prime(number) and (sum(int(digit) for digit in str(number)) in (2, 4, 8, 16, 32, 64)):', '            if sum(int(digit) for digit in str(number)) > max_sum_of_digits:', '                happiest_number = number', '                max_sum_of_digits = sum(int(digit) for digit in str(number))', '            elif sum(int(digit) for digit in str(number)) == max_sum_of_digits and number > happiest_number:', '                happiest_number = number', '    ', '    return happiest_number'], ['', 'def is_prime(n: int) -> bool:', '    if n < 2:', '        return False', '    for i in range(2, int(n**0.5)+1):', '        if n % i == 0:', '            return False', '    return True', '', 'def sum_of_digits(n: int) -> int:', '    return sum(int(d) for d in str(n))', '', 'def is_power_of_two(n: int) -> bool:', '    return n > 0 and (n & (n-1)) == 0', '', 'def findHappinestNumber(input: str) -> int:', '    max_sum = 0', '    happiest_number = 0', '    for num in input.split(","):', '        num = int(num)', '        if is_prime(num) and is_power_of_two(sum_of_digits(num)):', '            curr_sum = sum_of_digits(num)', '            if curr_sum > max_sum:', '                max_sum = curr_sum', '                happiest_number = num', '            elif curr_sum == max_sum and num > happiest_number:', '                happiest_number = num', '    return happiest_number', ''], ['', 'def findHappinestNumber(input: str) -> int:', '    def is_prime(n):', '        if n <= 1:', '            return False', '        for i in range(2, int(n**0.5)+1):', '            if n % i == 0:', '                return False', '        return True', '', '    def is_happy(n):', '        def sum_of_squares(n):', '            return sum(int(i)**2 for i in str(n))', '        seen = set()', '        while n != 1 and n not in seen:', '            seen.add(n)', '            n = sum_of_squares(n)', '        return n == 1', '', '    def is_power_of_two(n):', '        return n > 0 and (n & (n - 1)) == 0', '', '    def sum_of_digits(n):', '        return sum(int(i) for i in str(n))', '', '    numbers = list(map(int, input.split(",")))', '    happy_numbers = []', '    for n in numbers:', '        if is_prime(n) and is_power_of_two(sum_of_digits(n)):', '            happy_numbers.append(n)', '', '    if not happy_numbers:', '        return 0', '', '    max_sum = max(sum_of_digits(n) for n in happy_numbers)', '    happiest_numbers = [n for n in happy_numbers if sum_of_digits(n) == max_sum]', '', '    return max(happiest_numbers)', ''], ['', 'def is_prime(n: int) -> bool:', '    if n < 2:', '        return False', '    for i in range(2, int(n**0.5)+1):', '        if n % i == 0:', '            return False', '    return True', '', 'def is_happy(n: int) -> bool:', '    s = sum(int(i)**2 for i in str(n))', '    while s != 1:', '        s = sum(int(i)**2 for i in str(s))', '        if s == n:', '            return False', '    return True', '', 'def findHappinestNumber(input: str) -> int:', '    max_sum = 0', '    happiest_number = 0', "    for num in input.split(','):", '        num = int(num)', '        if is_prime(num) and (sum(int(i) for i in str(num)) in [2**i for i in range(1, 32)]):', '            if sum(int(i) for i in str(num)) > max_sum:', '                max_sum = sum(int(i) for i in str(num))', '                happiest_number = num', '    return happiest_number', ''], ['def is_prime(num: int) -> bool:', '    if num < 2:', '        return False', '    for i in range(2, int(num**0.5)+1):', '        if num % i == 0:', '            return False', '    return True', '', 'def is_happy(num: int) -> bool:', '    def sum_of_squares(n: int) -> int:', '        return sum(int(i)**2 for i in str(n))', '    ', '    seen = set()', '    while True:', '        num = sum_of_squares(num)', '        if num == 1:', '            return True', '        if num in seen:', '            return False', '        seen.add(num)', '', 'def findHappinestNumber(input: str) -> int:', '    nums = [int(num) for num in input.split(",")]', '    happiest_num = 0', '    happiest_num_sum = 0', '    for num in nums:', '        if is_prime(num) and (sum(int(i) for i in str(num)) in [2**n for n in range(1,11)]):', '            if sum(int(i) for i in str(num)) > happiest_num_sum:', '                happiest_num = num', '                happiest_num_sum = sum(int(i) for i in str(num))', '    return happiest_num'], ['def is_prime(n: int) -> bool:', '    if n < 2:', '        return False', '    for i in range(2, int(n ** 0.5) + 1):', '        if n % i == 0:', '            return False', '    return True', '', 'def sum_of_digits(n: int) -> int:', '    return sum(int(digit) for digit in str(n))', '', 'def is_happy_number(n: int) -> bool:', '    if n == 1:', '        return True', '    elif n == 4:', '        return False', '    else:', '        return is_happy_number(sum(int(digit) ** 2 for digit in str(n)))', '', 'def findHappinestNumber(input: str) -> int:', '    happiest_number = 0', '    max_sum_of_digits = 0', "    for number in input.split(','):", '        number = int(number)', '        if is_prime(number) and (sum_of_digits(number) & (sum_of_digits(number) - 1)) == 0:', '            if sum_of_digits(number) > max_sum_of_digits:', '                happiest_number = number', '                max_sum_of_digits = sum_of_digits(number)', '            elif sum_of_digits(number) == max_sum_of_digits and number > happiest_number:', '                happiest_number = number', '    return happiest_number'], ['', 'def findHappinestNumber(input: str) -> int:', '    def is_prime(n: int) -> bool:', '        if n < 2:', '            return False', '        for i in range(2, int(n ** 0.5) + 1):', '            if n % i == 0:', '                return False', '        return True', '', '    def is_happy(n: int) -> bool:', '        def get_sum_of_squares(n: int) -> int:', '            sum_of_squares = 0', '            while n:', '                digit = n % 10', '                sum_of_squares += digit ** 2', '                n //= 10', '            return sum_of_squares', '', '        history = set()', '        while True:', '            n = get_sum_of_squares(n)', '            if n == 1:', '                return True', '            if n in history:', '                return False', '            history.add(n)', '', '    def get_sum_of_digits(n: int) -> int:', '        sum_of_digits = 0', '        while n:', '            digit = n % 10', '            sum_of_digits += digit', '            n //= 10', '        return sum_of_digits', '', '    happiest_number = 0', '    max_sum_of_digits = 0', "    for number in input.split(','):", '        number = int(number)', '        if is_prime(number) and is_happy(number):', '            sum_of_digits = get_sum_of_digits(number)', '            if sum_of_digits > max_sum_of_digits:', '                happiest_number = number', '                max_sum_of_digits = sum_of_digits', '            elif sum_of_digits == max_sum_of_digits and number > happiest_number:', '                happiest_number = number', '', '    return happiest_number', ''], ['def is_prime(num: int) -> bool:', '    if num < 2:', '        return False', '    for i in range(2, int(num**0.5) + 1):', '        if num % i == 0:', '            return False', '    return True', '', 'def sum_of_digits(num: int) -> int:', '    return sum(int(digit) for digit in str(num))', '', 'def findHappinestNumber(input: str) -> int:', "    nums = [int(num) for num in input.split(',')]", '    happiest_num = 0', '    max_digit_sum = 0', '    for num in nums:', '        if is_prime(num):', '            digit_sum = sum_of_digits(num)', '            if digit_sum > max_digit_sum or (digit_sum == max_digit_sum and num > happiest_num):', '                happiest_num = num', '                max_digit_sum = digit_sum', '    return happiest_num'], ['', 'def is_prime(num: int) -> bool:', '    if num < 2:', '        return False', '    for i in range(2, int(num**0.5)+1):', '        if num % i == 0:', '            return False', '    return True', '', 'def is_happy(num: int) -> bool:', '    def sum_of_squares(num: int) -> int:', '        return sum(int(i)**2 for i in str(num))', '    seen = set()', '    while num != 1 and num not in seen:', '        seen.add(num)', '        num = sum_of_squares(num)', '    return num == 1', '', 'def findHappinestNumber(input: str) -> int:', '    def is_power_of_2(num: int) -> bool:', '        return num != 0 and ((num & (num - 1)) == 0)', '    numbers = [int(i) for i in input.split(",")]', '    happy_numbers = [num for num in numbers if is_prime(num) and is_happy(num) and is_power_of_2(sum(int(i) for i in str(num)))]', '    if not happy_numbers:', '        return 0', '    max_sum = max(sum(int(i) for i in str(num)) for num in happy_numbers)', '    happiest_numbers = [num for num in happy_numbers if sum(int(i) for i in str(num)) == max_sum]', '    return max(happiest_numbers)', ''], ['', 'def is_prime(n: int) -> bool:', '    if n < 2:', '        return False', '    for i in range(2, int(n**0.5)+1):', '        if n % i == 0:', '            return False', '    return True', '', 'def sum_of_digits(n: int) -> int:', '    return sum(int(d) for d in str(n))', '', 'def is_happy(n: int) -> bool:', '    s = sum_of_digits(n)', '    while s > 1:', '        s = sum_of_digits(s)', '        if s == 2:', '            return True', '    return False', '', 'def findHappinestNumber(input: str) -> int:', "    numbers = [int(x) for x in input.split(',')]", '    happiest_number = 0', '    for number in numbers:', '        if is_prime(number) and is_happy(number):', '            if sum_of_digits(number) > sum_of_digits(happiest_number):', '                happiest_number = number', '            elif sum_of_digits(number) == sum_of_digits(happiest_number) and number > happiest_number:', '                happiest_number = number', '    return happiest_number', ''], ['', 'def is_prime(number: int) -> bool:', '    if number < 2:', '        return False', '    for i in range(2, int(number**0.5)+1):', '        if number % i == 0:', '            return False', '    return True', '', 'def sum_of_digits(number: int) -> int:', '    return sum(int(digit) for digit in str(number))', '', 'def is_power_of_two(number: int) -> bool:', '    return number != 0 and (number & (number - 1)) == 0', '', 'def findHappiestNumber(input: str) -> int:', "    numbers = list(map(int, input.split(',')))", '    happiest_number = 0', '    happiest_sum = 0', '    for number in numbers:', '        if is_prime(number) and is_power_of_two(sum_of_digits(number)):', '            current_sum = sum_of_digits(number)', '            if current_sum > happiest_sum or (current_sum == happiest_sum and number > happiest_number):', '                happiest_number = number', '                happiest_sum = current_sum', '    return happiest_number', ''], ['', 'def is_prime(n: int) -> bool:', '    if n < 2:', '        return False', '    for i in range(2, int(n ** 0.5) + 1):', '        if n % i == 0:', '            return False', '    return True', '', 'def sum_of_digits(n: int) -> int:', '    return sum(int(digit) for digit in str(n))', '', 'def findHappinestNumber(input: str) -> int:', '    happiest_number = 0', '    max_sum_of_digits = 0', "    for num in input.split(','):", '        num = int(num)', '        if is_prime(num):', '            sum_of_num = sum_of_digits(num)', '            if sum_of_num in [2 ** i for i in range(31)]:', '                if sum_of_num > max_sum_of_digits:', '                    happiest_number = num', '                    max_sum_of_digits = sum_of_num', '                elif sum_of_num == max_sum_of_digits:', '                    happiest_number = max(happiest_number, num)', '    return happiest_number', ''], ['', 'def is_prime(num: int) -> bool:', '    if num < 2:', '        return False', '    for i in range(2, int(num ** 0.5) + 1):', '        if num % i == 0:', '            return False', '    return True', '', 'def sum_of_digits(num: int) -> int:', '    return sum(int(digit) for digit in str(num))', '', 'def findHappinestNumber(input: str) -> int:', '    happiest_number = 0', '    max_sum_of_digits = 0', '    for number in input.split(","):', '        number = int(number)', '        if is_prime(number):', '            sum_of_digits_number = sum_of_digits(number)', '            if sum_of_digits_number != 0 and (sum_of_digits_number & (sum_of_digits_number - 1) == 0):', '                if sum_of_digits_number > max_sum_of_digits:', '                    max_sum_of_digits = sum_of_digits_number', '                    happiest_number = number', '                elif sum_of_digits_number == max_sum_of_digits and number > happiest_number:', '                    happiest_number = number', '    return happiest_number', ''], ['', 'def findHappinestNumber(input:str)->int:', '    def isHappy(num):', '        def get_next(num):', '            total_sum = 0', '            while num > 0:', '                num, digit = divmod(num, 10)', '                total_sum += digit ** 2', '            return total_sum', '', '        seen = set()', '        while num != 1 and num not in seen:', '            seen.add(num)', '            num = get_next(num)', '', '        return num == 1', '', '    def isPrime(n):', '        if n <= 1:', '            return False', '        elif n <= 3:', '            return True', '        elif n % 2 == 0 or n % 3 == 0:', '            return False', '        i = 5', '        while i ** 2 <= n:', '            if n % i == 0 or n % (i + 2) == 0:', '                return False', '            i += 6', '        return True', '', '    def isPowerOfTwo(n):', '        if n == 0:', '            return False', '        while n != 1:', '            if n % 2 != 0:', '                return False', '            n = n // 2', '        return True', '', '    def getSumOfDigits(n):', '        sum = 0', '        while (n > 0):', '            sum += (n % 10)', '            n //= 10', '        return sum', '', '    max_sum = -1', '    happiest_number = 0', "    numbers = input.split(',')", '    for num in numbers:', '        num = int(num)', '        if isHappy(num) and isPrime(num):', '            sum_of_digits = getSumOfDigits(num)', '            if isPowerOfTwo(sum_of_digits) and sum_of_digits > max_sum:', '                max_sum = sum_of_digits', '                happiest_number = num', '', '    return happiest_number', ''], ['', 'def is_prime(n: int) -> bool:', '    if n < 2:', '        return False', '    for i in range(2, int(n ** 0.5) + 1):', '        if n % i == 0:', '            return False', '    return True', '', 'def sum_of_digits(n: int) -> int:', '    return sum([int(i) for i in str(n)])', '', 'def findHappinestNumber(input: str) -> int:', '    nums = [int(num) for num in input.split(",")]', '    happy_nums = []', '    for num in nums:', '        if is_prime(num):', '            sum_of_num = sum_of_digits(num)', '            if sum_of_num > 0 and (sum_of_num & (sum_of_num - 1)) == 0:', '                happy_nums.append(num)', '    if not happy_nums:', '        return 0', '    happiest_num = max(happy_nums, key=lambda x: (sum_of_digits(x), x))', '    return happiest_num', ''], ['def is_prime(n: int) -> bool:', '    if n <= 1:', '        return False', '    for i in range(2, int(n**0.5)+1):', '        if n % i == 0:', '            return False', '    return True', '', 'def is_happy(n: int) -> bool:', '    s = 0', '    while n > 0:', '        s += (n % 10)**2', '        n //= 10', '    return s == 1 or is_happy(s)', '', 'def findHappinestNumber(input: str) -> int:', '    happy_numbers = []', "    for num in input.split(','):", '        num = int(num)', '        if is_prime(num) and is_happy(num):', '            happy_numbers.append(num)', '    if not happy_numbers:', '        return 0', '    max_sum = sum(int(d) for d in str(max(happy_numbers)))', '    happiest_number = max(happy_numbers)', '    for num in happy_numbers:', '        if sum(int(d) for d in str(num)) == max_sum:', '            happiest_number = max(happiest_number, num)', '    return happiest_number'], ['', 'def is_prime(n: int) -> bool:', '    if n < 2:', '        return False', '    for i in range(2, int(n**0.5)+1):', '        if n % i == 0:', '            return False', '    return True', '', 'def sum_of_digits(n: int) -> int:', '    return sum(map(int, str(n)))', '', 'def is_happy_number(n: int) -> bool:', '    s = sum_of_digits(n)', '    while s > 1:', '        s = sum_of_digits(s)', '        if s == 2:', '            return True', '    return False', '', 'def findHappinestNumber(input: str) -> int:', '    happiest_number = 0', '    max_sum_of_digits = 0', "    for num in input.split(','):", '        num = int(num)', '        if is_prime(num) and is_happy_number(num):', '            sum_of_num = sum_of_digits(num)', '            if sum_of_num > max_sum_of_digits:', '                max_sum_of_digits = sum_of_num', '                happiest_number = num', '            elif sum_of_num == max_sum_of_digits and num > happiest_number:', '                happiest_number = num', '    return happiest_number', ''], ['', 'def is_prime(n: int) -> bool:', '    if n < 2:', '        return False', '    for i in range(2, int(n**0.5)+1):', '        if n % i == 0:', '            return False', '    return True', '', '', 'def sum_of_digits(n: int) -> int:', '    return sum(int(digit) for digit in str(n))', '', '', 'def findHappinestNumber(input: str) -> int:', '    happiest_number = 0', '    max_sum_of_digits = 0', "    for number in input.split(','):", '        if is_prime(int(number)):', '            sum_of_base_2 = sum(int(digit) for digit in bin(sum_of_digits(int(number)))[2:])', '            if sum_of_base_2 > max_sum_of_digits:', '                happiest_number = int(number)', '                max_sum_of_digits = sum_of_base_2', '            elif sum_of_base_2 == max_sum_of_digits and int(number) > happiest_number:', '                happiest_number = int(number)', '    return happiest_number', ''], ['', 'def is_prime(num: int) -> bool:', '    if num < 2:', '        return False', '    for i in range(2, int(num**0.5)+1):', '        if num % i == 0:', '            return False', '    return True', '', 'def sum_of_digits(num: int) -> int:', '    return sum(int(digit) for digit in str(num))', '', 'def findHappinestNumber(input: str) -> int:', '    happiest_num = 0', '    max_sum = 0', '    for num in input.split(","):', '        if is_prime(int(num)):', '            digit_sum = sum_of_digits(int(num))', '            if digit_sum in [2**i for i in range(1,10)]:', '                if digit_sum > max_sum:', '                    happiest_num = int(num)', '                    max_sum = digit_sum', '                elif digit_sum == max_sum and int(num) > happiest_num:', '                    happiest_num = int(num)', '    return happiest_num', ''], ['', 'def findHappinestNumber(input: str) -> int:', '    def is_prime(num: int) -> bool:', '        if num < 2:', '            return False', '        for i in range(2, int(num ** 0.5) + 1):', '            if num % i == 0:', '                return False', '        return True', '    ', '    def is_happy(num: int) -> bool:', '        def get_next(n: int) -> int:', '            total_sum = 0', '            while n > 0:', '                n, digit = divmod(n, 10)', '                total_sum += digit ** 2', '            return total_sum', '        ', '        seen = set()', '        while num != 1 and num not in seen:', '            seen.add(num)', '            num = get_next(num)', '        return num == 1', '    ', '    def get_happy_sum(num: int) -> int:', '        total_sum = 0', '        while num > 0:', '            num, digit = divmod(num, 10)', '            total_sum += digit', '        return total_sum', '    ', '    numbers = [int(num) for num in input.split(",")]', '    happy_numbers = [num for num in numbers if is_prime(num) and is_happy(num)]', '    if not happy_numbers:', '        return 0', '    max_sum = max(get_happy_sum(num) for num in happy_numbers)', '    happiest_numbers = [num for num in happy_numbers if get_happy_sum(num) == max_sum]', '    return max(happiest_numbers)', ''], ['def findHappinestNumber(input: str) -> int:', '    def is_prime(num):', '        if num < 2:', '            return False', '        for i in range(2, int(num ** 0.5) + 1):', '            if num % i == 0:', '                return False', '        return True', '', '    def is_power_of_two(num):', '        if num == 0:', '            return False', '        while num % 2 == 0:', '            num //= 2', '        return num == 1', '', '    def sum_of_digits(num):', '        return sum(int(digit) for digit in str(num))', '', "    numbers = list(map(int, input.split(',')))", '    happiest_number = 0', '    happiest_sum = 0', '    for number in numbers:', '        if is_prime(number) and is_power_of_two(sum_of_digits(number)):', '            current_sum = sum_of_digits(number)', '            if current_sum > happiest_sum or (current_sum == happiest_sum and number > happiest_number):', '                happiest_number = number', '                happiest_sum = current_sum', '    return happiest_number'], ['', 'def is_prime(n: int) -> bool:', '    if n <= 1:', '        return False', '    for i in range(2, int(n**0.5) + 1):', '        if n % i == 0:', '            return False', '    return True', '', 'def findHappinestNumber(input: str) -> int:', '    def is_happy(n):', '        s = 0', '        while n:', '            s += (n % 10) ** 2', '            n //= 10', '        return s', '        ', "    nums = [int(num) for num in input.split(',') if num.isdigit()]", '    happy_nums = []', '    for num in nums:', "        if is_prime(num) and bin(is_happy(num)).count('1') == 1:", '            happy_nums.append(num)', '    if not happy_nums:', '        return 0', '    max_sum = max(sum(int(digit) for digit in str(num)) for num in happy_nums)', '    happiest_num = max(num for num in happy_nums if sum(int(digit) for digit in str(num)) == max_sum)', '    return happiest_num', ''], ['', 'def findHappinestNumber(input: str) -> int:', '    def is_prime(num: int) -> bool:', '        if num < 2:', '            return False', '        for i in range(2, int(num ** 0.5) + 1):', '            if num % i == 0:', '                return False', '        return True', '', '    def is_happy(num: int) -> bool:', '        def sum_of_squares(n: int) -> int:', '            return sum(int(digit) ** 2 for digit in str(n))', '', '        seen = set()', '        while True:', '            num = sum_of_squares(num)', '            if num == 1:', '                return True', '            if num in seen:', '                return False', '            seen.add(num)', '', '    def calculate_happiness(num: int) -> int:', '        if not is_prime(num):', '            return -1', '        digit_sum = sum(int(digit) for digit in str(num))', '        if not ((digit_sum & (digit_sum - 1)) == 0):', '            return -1', '        if not is_happy(num):', '            return -1', '        return digit_sum', '', "    input_list = [int(num) for num in input.split(',')]", '    happiest_num = 0', '    max_digit_sum = 0', '    for num in input_list:', '        happiness = calculate_happiness(num)', '        if happiness > max_digit_sum:', '            max_digit_sum = happiness', '            happiest_num = num', '        elif happiness == max_digit_sum and num > happiest_num:', '            happiest_num = num', '    return happiest_num', ''], ['', 'def is_prime(n: int) -> bool:', '    if n < 2:', '        return False', '    for i in range(2, int(n**0.5)+1):', '        if n % i == 0:', '            return False', '    return True', '', 'def sum_of_digits(n: int) -> int:', '    return sum(int(i) for i in str(n))', '', 'def findHappinestNumber(input: str) -> int:', "    nums = input.split(',')", '    happiest_num = 0', '    happiest_sum = 0', '    for num in nums:', '        num = int(num)', '        if is_prime(num):', '            sum_of_num = sum_of_digits(num)', "            if sum_of_num > happiest_sum and bin(sum_of_num).count('1') == 1:", '                happiest_num = num', '                happiest_sum = sum_of_num', '            elif sum_of_num == happiest_sum and num > happiest_num:', '                happiest_num = num', '                happiest_sum = sum_of_num', '    return happiest_num', ''], ['', 'def is_prime(n: int) -> bool:', '    if n < 2:', '        return False', '    for i in range(2, int(n**0.5)+1):', '        if n % i == 0:', '            return False', '    return True', '', 'def is_happy(n: int) -> bool:', '    def digit_sum(n: int) -> int:', '        return sum(int(d) for d in str(n))', '    while n != 1 and n != 4:', '        n = digit_sum(n)', '    return n == 1', '', 'def findHappinestNumber(input: str) -> int:', '    happiest = 0', '    max_sum = 0', "    for num in input.split(','):", '        num = int(num)', '        if is_prime(num) and is_happy(num):', '            digit_sum = sum(int(d) for d in str(num))', '            if digit_sum > max_sum:', '                happiest = num', '                max_sum = digit_sum', '            elif digit_sum == max_sum and num > happiest:', '                happiest = num', '    return happiest', ''], ['', 'def is_prime(n: int) -> bool:', '    if n < 2:', '        return False', '    for i in range(2, int(n**0.5)+1):', '        if n % i == 0:', '            return False', '    return True', '', 'def sum_of_digits(n: int) -> int:', '    return sum([int(d) for d in str(n)])', '', 'def is_power_of_2(n: int) -> bool:', '    if n == 0:', '        return False', '    while n != 1:', '        if n % 2 != 0:', '            return False', '        n = n // 2', '    return True', '', 'def findHappinestNumber(input: str) -> int:', '    max_sum = 0', '    happiest_number = 0', '    numbers = [int(n) for n in input.split(",")]', '', '    for num in numbers:', '        if is_prime(num) and is_power_of_2(sum_of_digits(num)):', '            if sum_of_digits(num) > max_sum:', '                max_sum = sum_of_digits(num)', '                happiest_number = num', '            elif sum_of_digits(num) == max_sum and num > happiest_number:', '                happiest_number = num', '    ', '    return happiest_number', ''], ['', 'def is_prime(n: int) -> bool:', '    if n < 2:', '        return False', '    for i in range(2, int(n**0.5)+1):', '        if n % i == 0:', '            return False', '    return True', '', 'def sum_of_digits(n: int) -> int:', '    return sum(int(digit) for digit in str(n))', '', 'def is_happy_number(n: int) -> bool:', '    if n < 1:', '        return False', '    while n != 1 and n != 4:', '        n = sum(int(digit)**2 for digit in str(n))', '    return n == 1', '', 'def findHappinestNumber(input: str) -> int:', '    happiest_number = 0', '    max_digit_sum = 0', "    for number in input.split(','):", '        number = int(number)', '        if is_prime(number) and is_happy_number(number):', '            digit_sum = sum_of_digits(number)', '            if digit_sum > max_digit_sum:', '                happiest_number = number', '                max_digit_sum = digit_sum', '            elif digit_sum == max_digit_sum and number > happiest_number:', '                happiest_number = number', '    return happiest_number', ''], ['', 'def findHappinestNumber(input:str)->int:', '    def isPrime(n):', '        if n <= 1:', '            return False', '        for i in range(2, int(n**(0.5))+1):', '            if n % i == 0:', '                return False', '        return True', '    ', '    def isHappy(n):', '        def sumOfDigits(n):', '            s = 0', '            while n > 0:', '                s += n % 10', '                n //= 10', '            return s', '        ', '        def isPowerOfTwo(n):', '            if n == 0:', '                return False', '            return (n & (n-1)) == 0', '        ', '        while n != 1 and n != 4:', '            n = sumOfDigits(n)', '        return n == 1', '    ', "    nums = input.split(',')", '    happiest_num = 0', '    happiest_sum = 0', '    ', '    for num in nums:', '        num = int(num)', '        if isPrime(num) and isHappy(num):', '            digit_sum = sum([int(d) for d in str(num)])', '            if digit_sum > happiest_sum:', '                happiest_num = num', '                happiest_sum = digit_sum', '            elif digit_sum == happiest_sum and num > happiest_num:', '                happiest_num = num', '                ', '    return happiest_num', ''], ['', 'def is_prime(n: int) -> bool:', '    if n < 2:', '        return False', '    for i in range(2, int(n**0.5)+1):', '        if n % i == 0:', '            return False', '    return True', '', 'def sum_of_digits(n: int) -> int:', '    return sum(int(d) for d in str(n))', '', 'def findHappinestNumber(input: str) -> int:', '    happiest_num = 0', '    max_sum_of_digits = 0', "    for num in input.split(','):", '        num = int(num)', '        if is_prime(num):', '            sum_digits = sum_of_digits(num)', "            if sum_digits > max_sum_of_digits and bin(sum_digits).count('1') == 1:", '                happiest_num = num', '                max_sum_of_digits = sum_digits', '            elif sum_digits == max_sum_of_digits and num > happiest_num:', '                happiest_num = num', '    return happiest_num', '']]
Attempting to implement {'findHappinestNumber'}
Killing subprocesses
Successfully implemented {'findHappinestNumber'}
Writing to Ex3.py
Done writing to Ex3.py

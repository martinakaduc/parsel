Implementing SCC 0 {'maximizeHappiestScore'}
Implementing SCC 1 {'permute'}
Total: 64 completions!
[['', 'from itertools import permutations', '', 'def permute(input: str) -> list:', '    return list("".join(p) for p in permutations(input))', ''], ['def permute(input: str) -> list:', '    if len(input) == 0:', '        return []', '    if len(input) == 1:', '        return [input]', '    permutations = []', '    for i in range(len(input)):', '        first_char = input[i]', '        remaining_chars = input[:i] + input[i+1:]', '        for permutation in permute(remaining_chars):', '            permutations.append([first_char] + permutation)', '    return permutations'], ['', 'from itertools import permutations', '', 'def permute(input: str) -> list:', "    return [''.join(p) for p in permutations(input)]", ''], ['', 'from itertools import permutations', '', 'def permute(input: str) -> list:', "    return [''.join(p) for p in permutations(input)]", ''], ['def permute(input):', '    if len(input) == 0:', '        return []', '    if len(input) == 1:', '        return [input]', '    permutations = []', '    for i in range(len(input)):', '        char = input[i]', '        remaining_chars = input[:i] + input[i+1:]', '        for permutation in permute(remaining_chars):', '            permutations.append([char] + permutation)', '    return permutations'], ['', 'from itertools import permutations', '', 'def permute(input: str) -> list:', "    return [''.join(p) for p in permutations(input)]", ''], ['def permute(input: str) -> list:', '    if len(input) == 0:', '        return []', '    if len(input) == 1:', '        return [input]', '    result = []', '    for i in range(len(input)):', '        current_char = input[i]', '        remaining_chars = input[:i] + input[i+1:]', '        for permutation in permute(remaining_chars):', '            result.append(current_char + permutation)', '    return result'], ['def permute(input):', '    if len(input) == 0:', '        return []', '    if len(input) == 1:', '        return [input]', '    permutations = []', '    for i in range(len(input)):', '        char = input[i]', '        remaining_chars = input[:i] + input[i+1:]', '        for permutation in permute(remaining_chars):', '            permutations.append([char] + permutation)', '    return permutations'], ['def permute(input: str) -> list:', '    if len(input) == 0:', '        return []', '    if len(input) == 1:', '        return [input]', '    result = []', '    for i in range(len(input)):', '        char = input[i]', '        rest = input[:i] + input[i+1:]', '        for permutation in permute(rest):', '            result.append([char] + permutation)', '    return result'], ['', 'from itertools import permutations', '', 'def permute(input: str) -> list:', "    return [''.join(p) for p in permutations(input)]", ''], ['def permute(input):', '    if len(input) == 0:', '        return []', '    if len(input) == 1:', '        return [input]', '    result = []', '    for i in range(len(input)):', '        char = input[i]', '        remaining_chars = input[:i] + input[i+1:]', '        for permutation in permute(remaining_chars):', '            result.append([char] + permutation)', '    return result'], ['def permute(input: str) -> list:', '    if len(input) == 0:', '        return []', '    if len(input) == 1:', '        return [input]', '    result = []', '    for i in range(len(input)):', '        m = input[i]', '        rem_list = input[:i] + input[i+1:]', '        for p in permute(rem_list):', '            result.append([m] + p)', '    return result'], ['def permute(input: str) -> List[str]:', '    if len(input) == 0:', '        return []', '    if len(input) == 1:', '        return [input]', '    result = []', '    for i in range(len(input)):', '        char = input[i]', '        remaining_chars = input[:i] + input[i+1:]', '        for permutation in permute(remaining_chars):', '            result.append(char + permutation)', '    return result'], ['from typing import List', '', 'def permute(input: str) -> List[str]:', '    if len(input) == 0:', '        return []', '    if len(input) == 1:', '        return [input]', '    result = []', '    for i in range(len(input)):', '        first_char = input[i]', '        remaining_chars = input[:i] + input[i+1:]', '        for sub_permutation in permute(remaining_chars):', '            result.append(first_char + sub_permutation)', '    return result'], ['', 'from itertools import permutations', '', 'def permute(input: str) -> list:', "    return [''.join(p) for p in permutations(input)]", ''], ['def permute(input):', '    if len(input) == 0:', '        return []', '    if len(input) == 1:', '        return [input]', '    permutations = []', '    for i in range(len(input)):', '        first = input[i]', '        remaining = input[:i] + input[i+1:]', '        for perm in permute(remaining):', '            permutations.append([first] + perm)', '    return permutations'], ['', 'from itertools import permutations', '', 'def permute(input: str) -> list:', '    return list("".join(perm) for perm in permutations(input))', ''], ['def permute(input):', '    if len(input) == 0:', '        return []', '    if len(input) == 1:', '        return [input]', '    permutations = []', '    for i in range(len(input)):', '        char = input[i]', '        remaining_chars = input[:i] + input[i+1:]', '        for perm in permute(remaining_chars):', '            permutations.append([char] + perm)', '    return permutations'], ['def permute(input: str) -> list:', '    if len(input) == 0:', '        return []', '    if len(input) == 1:', '        return [input]', '    result = []', '    for i in range(len(input)):', '        char = input[i]', '        remaining_chars = input[:i] + input[i+1:]', '        for perm in permute(remaining_chars):', '            result.append([char] + perm)', '    return result'], ['def permute(input: str) -> list:', '    if len(input) == 0:', '        return []', '    if len(input) == 1:', '        return [input]', '    result = []', '    for i in range(len(input)):', '        char = input[i]', '        remaining_chars = input[:i] + input[i+1:]', '        for permutation in permute(remaining_chars):', '            result.append([char] + permutation)', '    return result'], ['def permute(input: str) -> list:', '    if len(input) == 0:', '        return []', '    elif len(input) == 1:', '        return [input]', '    else:', '        result = []', '        for i in range(len(input)):', '            first = input[i]', '            remaining = input[:i] + input[i+1:]', '            for permutation in permute(remaining):', '                result.append([first] + permutation)', '        return result'], ['def permute(input):', '    if len(input) == 0:', '        return []', '    if len(input) == 1:', '        return [input]', '    result = []', '    for i in range(len(input)):', '        char = input[i]', '        rest = input[:i] + input[i+1:]', '        for permutation in permute(rest):', '            result.append([char] + permutation)', '    return result'], ['def permute(input):', '    if len(input) == 0:', '        return []', '    if len(input) == 1:', '        return [input]', '    permutations = []', '    for i in range(len(input)):', '        char = input[i]', '        remaining_chars = input[:i] + input[i+1:]', '        for permutation in permute(remaining_chars):', '            permutations.append([char] + permutation)', '    return permutations'], ['def permute(input):', '    if len(input) == 0:', '        return []', '    if len(input) == 1:', '        return [input]', '    permutations = []', '    for i in range(len(input)):', '        char = input[i]', '        remaining = input[:i] + input[i+1:]', '        for perm in permute(remaining):', '            permutations.append([char] + perm)', '    return permutations'], ['def permute(input: str) -> list:', '    if len(input) == 0:', '        return []', '    if len(input) == 1:', '        return [input]', '    permutations = []', '    for i in range(len(input)):', '        char = input[i]', '        remaining_chars = input[:i] + input[i+1:]', '        for permutation in permute(remaining_chars):', '            permutations.append([char] + permutation)', '    return permutations'], ['def permute(input):', '    if len(input) == 1:', '        return [input]', '', '    result = []', '    for i, letter in enumerate(input):', '        for perm in permute(input[:i] + input[i+1:]):', '            result.append([letter] + perm)', '', '    return result'], ['', 'from itertools import permutations', '', 'def permute(input: str) -> list:', "    return [''.join(p) for p in permutations(input)]", ''], ['def permute(input: str) -> List[str]:', '    if len(input) == 0:', '        return []', '    if len(input) == 1:', '        return [input]', '    result = []', '    for i in range(len(input)):', '        char = input[i]', '        remainder = input[:i] + input[i+1:]', '        for permutation in permute(remainder):', '            result.append(char + permutation)', '    return result'], ['def permute(input):', '    if len(input) == 0:', '        return []', '    if len(input) == 1:', '        return [input]', '    result = []', '    for i in range(len(input)):', '        char = input[i]', '        rest = input[:i] + input[i+1:]', '        for permutation in permute(rest):', '            result.append([char] + permutation)', '    return result'], ['def permute(input):', '    if len(input) == 0:', '        return []', '    if len(input) == 1:', '        return [input]', '    result = []', '    for i in range(len(input)):', '        char = input[i]', '        remaining = input[:i] + input[i+1:]', '        for permutation in permute(remaining):', '            result.append([char] + permutation)', '    return result'], ['def permute(input: str) -> list:', '    if len(input) == 1:', '        return [input]', '    else:', '        result = []', '        for i in range(len(input)):', '            first = input[i]', '            rest = input[:i] + input[i+1:]', '            for permutation in permute(rest):', '                result.append(first + permutation)', '        return result'], ['def permute(input: str) -> list:', '    if len(input) == 0:', '        return []', '    if len(input) == 1:', '        return [input]', '    result = []', '    for i in range(len(input)):', '        char = input[i]', '        remaining_chars = input[:i] + input[i+1:]', '        for permutation in permute(remaining_chars):', '            result.append([char] + permutation)', '    return result'], ['', 'from itertools import permutations', '', 'def permute(input: str) -> list:', "    return [''.join(p) for p in permutations(input)]", ''], ['', 'from itertools import permutations', '', 'def permute(input:str) -> list:', "    return [''.join(p) for p in permutations(input)]", ''], ['def permute(input: str) -> list:', '    if len(input) == 0:', '        return []', '    if len(input) == 1:', '        return [input]', '    permutations = []', '    for i in range(len(input)):', '        char = input[i]', '        remaining_chars = input[:i] + input[i+1:]', '        for permutation in permute(remaining_chars):', '            permutations.append([char] + permutation)', '    return permutations'], ['', 'from itertools import permutations', '', 'def permute(input: str) -> list:', "    return [''.join(p) for p in permutations(input)]", ''], ['', 'from itertools import permutations', '', 'def permute(input: str) -> list:', '    return list(permutations(input))', ''], ['def permute(input: str) -> list:', '    if len(input) == 0:', '        return []', '    if len(input) == 1:', '        return [input]', '    result = []', '    for i in range(len(input)):', '        char = input[i]', '        remaining_chars = input[:i] + input[i+1:]', '        for permutation in permute(remaining_chars):', '            result.append([char] + permutation)', '    return result'], ['def permute(input):', '    if len(input) == 1:', '        return [input]', '    else:', '        output = []', '        for i, char in enumerate(input):', '            for perm in permute(input[:i] + input[i+1:]):', '                output.append(char + perm)', '        return output'], ['', 'from itertools import permutations', '', 'def permute(input: str) -> list:', "    return [''.join(p) for p in permutations(input)]", ''], ['def permute(input):', '    if len(input) == 0:', '        return []', '    if len(input) == 1:', '        return [input]', '    result = []', '    for i in range(len(input)):', '        current_letter = input[i]', '        remaining_letters = input[:i] + input[i+1:]', '        for permutation in permute(remaining_letters):', '            result.append([current_letter] + permutation)', '    return result'], ['', 'from itertools import permutations', '', 'def permute(input: str) -> list:', "    return [''.join(p) for p in permutations(input)]", ''], ['def permute(input:str) -> list:', '    if len(input) == 0:', '        return []', '    if len(input) == 1:', '        return [input]', '    result = []', '    for i in range(len(input)):', '        char = input[i]', '        rest = input[:i] + input[i+1:]', '        for permutation in permute(rest):', '            result.append([char] + permutation)', '    return result'], ['', 'from itertools import permutations', '', 'def permute(input: str) -> list:', "    return [''.join(perm) for perm in permutations(input)]", ''], ['def permute(input):', '    if len(input) == 0:', '        return []', '    if len(input) == 1:', '        return [input]', '    result = []', '    for i in range(len(input)):', '        first_char = input[i]', '        remaining_chars = input[:i] + input[i+1:]', '        for permutation in permute(remaining_chars):', '            result.append([first_char] + permutation)', '    return result'], ['', 'from itertools import permutations', '', 'def permute(input: str) -> list:', "    return [''.join(p) for p in permutations(input)]", ''], ['def permute(input):', '    if len(input) == 0:', '        return []', '    if len(input) == 1:', '        return [input]', '    result = []', '    for i in range(len(input)):', '        char = input[i]', '        rest = input[:i] + input[i+1:]', '        for permutation in permute(rest):', '            result.append([char] + permutation)', '    return result'], ['', 'from itertools import permutations', '', 'def permute(input: str) -> list:', "    return [''.join(perm) for perm in permutations(input)]", ''], ['', 'from itertools import permutations', '', 'def permute(input: str) -> list:', "    return [''.join(p) for p in permutations(input)]", ''], ['def permute(input: str) -> list:', '    if len(input) == 0:', '        return []', '    if len(input) == 1:', '        return [input]', '', '    result = []', '    for i in range(len(input)):', '        char = input[i]', '        remaining_chars = input[:i] + input[i+1:]', '        for perm in permute(remaining_chars):', '            result.append([char] + perm)', '', '    return result'], ['', 'from itertools import permutations', '', 'def permute(input: str) -> list:', "    return [''.join(p) for p in permutations(input)]", ''], ['', 'from itertools import permutations', '', 'def permute(input: str) -> list:', "    return [''.join(p) for p in permutations(input)]", ''], ['def permute(input: str) -> list:', '    if len(input) == 0:', '        return []', '    if len(input) == 1:', '        return [input]', '    permutations = []', '    for i in range(len(input)):', '        char = input[i]', '        remaining_chars = input[:i] + input[i+1:]', '        for permutation in permute(remaining_chars):', '            permutations.append([char] + permutation)', '    return permutations'], ['', 'from itertools import permutations', '', 'def permute(input: str) -> list:', "    return [''.join(p) for p in permutations(input)]", ''], ['def permute(input):', '    if len(input) == 0:', '        return []', '    if len(input) == 1:', '        return [input]', '    result = []', '    for i in range(len(input)):', '        char = input[i]', '        remaining_chars = input[:i] + input[i+1:]', '        for permutation in permute(remaining_chars):', '            result.append([char] + permutation)', '    return result'], ['def permute(input):', '    if len(input) == 0:', '        return []', '    if len(input) == 1:', '        return [input]', '    permutations = []', '    for i in range(len(input)):', '        char = input[i]', '        remaining_chars = input[:i] + input[i+1:]', '        for permutation in permute(remaining_chars):', '            permutations.append([char] + permutation)', '    return permutations'], ['', 'from itertools import permutations', '', 'def permute(input: str) -> list:', "    return list(''.join(p) for p in permutations(input))", ''], ['', 'from itertools import permutations', '', 'def permute(input: str) -> list:', "    return [''.join(p) for p in permutations(input)]", ''], ['', 'from itertools import permutations', '', 'def permute(input: str) -> list:', "    return [''.join(p) for p in permutations(input)]", ''], ['', 'from itertools import permutations', 'def permute(input: str) -> list:', "    return [''.join(p) for p in permutations(input)]", ''], ['', 'from itertools import permutations', '', 'def permute(input: str) -> list:', "    return list(''.join(p) for p in permutations(input))", ''], ['', 'from itertools import permutations', '', 'def permute(input: str) -> list:', "    return [''.join(p) for p in permutations(input)]", ''], ['def permute(input):', '    if len(input) == 0:', '        return []', '    if len(input) == 1:', '        return [input]', '    result = []', '    for i in range(len(input)):', '        current = input[i]', '        remaining = input[:i] + input[i+1:]', '        for p in permute(remaining):', '            result.append([current] + p)', '    return result'], ['def permute(input: str) -> List[str]:', '    if len(input) == 0:', '        return []', '    if len(input) == 1:', '        return [input]', '    permutations = []', '    for i in range(len(input)):', '        char = input[i]', '        remaining_chars = input[:i] + input[i+1:]', '        for permutation in permute(remaining_chars):', '            permutations.append(char + permutation)', '    return permutations']]
Attempting to implement {'permute'}
Killing subprocesses
Successfully implemented {'permute'}
Implementing SCC 2 {'calculateLargestHappiestScore'}
Implementing SCC 3 {'getListOfVowelClusters'}
Total: 64 completions!
[['def getListOfVowelClusters(input: str) -> list:', "    vowels = ['a', 'e', 'i', 'o', 'u']", '    clusters = []', "    cluster = ''", '    for i in range(len(input)):', '        if input[i] in vowels:', '            cluster += input[i]', '            if i == len(input) - 1:', '                clusters.append(cluster)', '        else:', '            if len(cluster) > 1:', '                clusters.append(cluster)', "            cluster = ''", '    return clusters'], ['def getListOfVowelClusters(input: str) -> list:', '    vowel_clusters = []', '    vowels = "aeiouAEIOU"', '    current_cluster = ""', '    ', '    for i in range(len(input)):', '        if input[i] in vowels:', '            current_cluster += input[i]', '        else:', '            if len(current_cluster) > 1:', '                vowel_clusters.append(current_cluster)', '            current_cluster = ""', '    ', '    if len(current_cluster) > 1:', '        vowel_clusters.append(current_cluster)', '    ', '    return vowel_clusters'], ['def getListOfVowelClusters(input: str) -> List[str]:', "    vowels = set(['a', 'e', 'i', 'o', 'u'])", '    clusters = []', '    i = 0', '    while i < len(input):', '        if input[i] not in vowels:', '            i += 1', '            continue', '        j = i + 1', '        while j < len(input) and input[j] in vowels:', '            j += 1', '        if j > i + 1:', '            clusters.append(input[i:j])', '        i = j', '    return clusters'], ['', 'def getListOfVowelClusters(input: str) -> list:', "    vowels = 'aeiouAEIOU'", '    clusters = []', "    cluster = ''", '    for i in range(len(input)):', '        if input[i] in vowels:', '            cluster += input[i]', '        else:', '            if len(cluster) > 1:', '                clusters.append(cluster)', "            cluster = ''", '    if len(cluster) > 1:', '        clusters.append(cluster)', '    return clusters', ''], ['def getListOfVowelClusters(input: str) -> list:', "    vowels = set('aeiouAEIOU')", '    clusters = []', "    cluster = ''", '    ', '    for i in range(len(input)):', '        if input[i] in vowels:', '            cluster += input[i]', '        else:', '            if len(cluster) > 1:', '                clusters.append(cluster)', "            cluster = ''", '    ', '    if len(cluster) > 1:', '        clusters.append(cluster)', '    ', '    return clusters'], ['def getListOfVowelClusters(input: str) -> list:', "    vowels = ['a', 'e', 'i', 'o', 'u']", '    clusters = []', "    current_cluster = ''", '    for i in range(len(input)):', '        if input[i] in vowels:', '            current_cluster += input[i]', '        else:', '            if len(current_cluster) > 1:', '                clusters.append(current_cluster)', "            current_cluster = ''", '    if len(current_cluster) > 1:', '        clusters.append(current_cluster)', '    return clusters'], ['def getListOfVowelClusters(input: str) -> list:', "    vowels = set(['a', 'e', 'i', 'o', 'u'])", '    clusters = []', '    current_cluster = ""', '    for i in range(len(input)):', '        if input[i] in vowels:', '            current_cluster += input[i]', '        else:', '            if current_cluster != "":', '                clusters.append(current_cluster)', '                current_cluster = ""', '    if current_cluster != "":', '        clusters.append(current_cluster)', '    return clusters'], ['def getListOfVowelClusters(input:str) -> list:', '    vowels = "aeiouAEIOU"', '    clusters = []', '    current_cluster = ""', '    for letter in input:', '        if letter in vowels:', '            current_cluster += letter', '        else:', '            if len(current_cluster) > 1:', '                clusters.append(current_cluster)', '            current_cluster = ""', '    if len(current_cluster) > 1:', '        clusters.append(current_cluster)', '    return clusters'], ['def getListOfVowelClusters(input: str) -> list:', '    vowels = set("aeiouAEIOU")', '    clusters = []', '    current_cluster = ""', '    for i in range(len(input)):', '        if input[i] in vowels:', '            current_cluster += input[i]', '        else:', '            if current_cluster != "":', '                clusters.append(current_cluster)', '                current_cluster = ""', '    if current_cluster != "":', '        clusters.append(current_cluster)', '    return clusters'], ['def getListOfVowelClusters(input: str) -> list:', "    vowels = set(['a', 'e', 'i', 'o', 'u'])", '    clusters = []', "    cluster = ''", '    for i, char in enumerate(input):', '        if char.lower() in vowels:', '            cluster += char.lower()', '            if i == len(input) - 1:', '                clusters.append(cluster)', '        else:', '            if len(cluster) > 1:', '                clusters.append(cluster)', "            cluster = ''", '    return clusters'], ['def getListOfVowelClusters(input: str) -> list:', '    vowels = "aeiou"', '    clusters = []', '    current_cluster = ""', '    for i in range(len(input)):', '        if input[i] in vowels:', '            current_cluster += input[i]', '        else:', '            if len(current_cluster) > 1:', '                clusters.append(current_cluster)', '            current_cluster = ""', '    if len(current_cluster) > 1:', '        clusters.append(current_cluster)', '    return clusters'], ['def getListOfVowelClusters(input: str) -> list:', "    vowels = ['a', 'e', 'i', 'o', 'u']", '    clusters = []', "    curr_cluster = ''", '    for char in input:', '        if char.lower() in vowels:', '            curr_cluster += char', '        else:', '            if len(curr_cluster) > 1:', '                clusters.append(curr_cluster)', "            curr_cluster = ''", '    if len(curr_cluster) > 1:', '        clusters.append(curr_cluster)', '    return clusters'], ['def getListOfVowelClusters(input: str) -> list:', "    vowels = 'aeiouAEIOU'", '    clusters = []', "    current_cluster = ''", '    for i in range(len(input)):', '        if input[i] in vowels:', '            current_cluster += input[i]', '        elif current_cluster:', '            clusters.append(current_cluster)', "            current_cluster = ''", '    if current_cluster:', '        clusters.append(current_cluster)', '    return clusters'], ['def getListOfVowelClusters(input: str) -> List[str]:', '    vowel_clusters = []', '    vowels = "aeiouAEIOU"', '    current_cluster = ""', '    for char in input:', '        if char in vowels:', '            current_cluster += char', '        else:', '            if current_cluster != "":', '                vowel_clusters.append(current_cluster)', '                current_cluster = ""', '    if current_cluster != "":', '        vowel_clusters.append(current_cluster)', '    return vowel_clusters'], ['def getListOfVowelClusters(input: str) -> list:', "    vowels = ['a', 'e', 'i', 'o', 'u']", '    clusters = []', "    temp = ''", '    for letter in input:', '        if letter.lower() in vowels:', '            temp += letter.lower()', '        else:', '            if len(temp) > 1:', '                clusters.append(temp)', "            temp = ''", '    if len(temp) > 1:', '        clusters.append(temp)', '    return clusters'], ['def getListOfVowelClusters(input: str) -> list:', '    vowels = "aeiouAEIOU"', '    clusters = []', '    current_cluster = ""', '    for i in range(len(input)):', '        if input[i] in vowels:', '            current_cluster += input[i]', '        else:', '            if len(current_cluster) > 1:', '                clusters.append(current_cluster)', '            current_cluster = ""', '    if len(current_cluster) > 1:', '        clusters.append(current_cluster)', '    return clusters'], ['def getListOfVowelClusters(input: str) -> list:', '    vowel_clusters = []', "    vowel_set = set(['a', 'e', 'i', 'o', 'u'])", "    current_cluster = ''", '    for char in input:', '        if char.lower() in vowel_set:', '            current_cluster += char', '        else:', '            if len(current_cluster) > 1:', '                vowel_clusters.append(current_cluster)', "            current_cluster = ''", '    if len(current_cluster) > 1:', '        vowel_clusters.append(current_cluster)', '    return vowel_clusters'], ['def getListOfVowelClusters(input: str) -> list:', "    vowels = ['a', 'e', 'i', 'o', 'u']", '    clusters = []', "    cluster = ''", '    for i in range(len(input)):', '        if input[i] in vowels:', '            cluster += input[i]', '        else:', '            if len(cluster) > 1:', '                clusters.append(cluster)', "            cluster = ''", '    if len(cluster) > 1:', '        clusters.append(cluster)', '    return clusters'], ['def getListOfVowelClusters(input: str) -> list:', '    vowels = "aeiouAEIOU"', '    vowel_clusters = []', '    current_cluster = ""', '    for letter in input:', '        if letter in vowels:', '            current_cluster += letter', '        else:', '            if current_cluster != "":', '                vowel_clusters.append(current_cluster)', '                current_cluster = ""', '    if current_cluster != "":', '        vowel_clusters.append(current_cluster)', '    return vowel_clusters'], ['def getListOfVowelClusters(input: str) -> list:', '    vowels = ["a", "e", "i", "o", "u"]', '    clusters = []', '    current_cluster = ""', '    for letter in input:', '        if letter.lower() in vowels:', '            current_cluster += letter', '        elif current_cluster:', '            clusters.append(current_cluster)', '            current_cluster = ""', '    if current_cluster:', '        clusters.append(current_cluster)', '    return clusters'], ['def getListOfVowelClusters(input: str) -> list:', '    vowels = "aeiou"', '    clusters = []', '    current_cluster = ""', '    for i in range(len(input)):', '        if input[i] in vowels:', '            current_cluster += input[i]', '        else:', '            if len(current_cluster) > 1:', '                clusters.append(current_cluster)', '            current_cluster = ""', '    if len(current_cluster) > 1:', '        clusters.append(current_cluster)', '    return clusters'], ['def getListOfVowelClusters(input: str) -> list:', "    vowels = ['a', 'e', 'i', 'o', 'u']", '    vowel_clusters = []', "    current_cluster = ''", '', '    for i in range(len(input)):', '        if input[i] in vowels:', '            current_cluster += input[i]', '        else:', '            if len(current_cluster) > 1:', '                vowel_clusters.append(current_cluster)', "            current_cluster = ''", '', '    if len(current_cluster) > 1:', '        vowel_clusters.append(current_cluster)', '', '    return vowel_clusters'], ['', 'def getListOfVowelClusters(input: str) -> list:', "    vowels = set(['a', 'e', 'i', 'o', 'u'])", '    clusters = []', '    curr_cluster = ""', '    for i in range(len(input)):', '        if input[i] in vowels:', '            curr_cluster += input[i]', '        else:', '            if len(curr_cluster) > 1:', '                clusters.append(curr_cluster)', '            curr_cluster = ""', '    if len(curr_cluster) > 1:', '        clusters.append(curr_cluster)', '    return clusters', ''], ['def getListOfVowelClusters(input: str) -> list:', '    vowels = set("aeiouAEIOU")', '    clusters = []', '    current_cluster = ""', '    for i in range(len(input)):', '        if input[i] in vowels:', '            current_cluster += input[i]', '        else:', '            if len(current_cluster) > 1:', '                clusters.append(current_cluster)', '            current_cluster = ""', '    if len(current_cluster) > 1:', '        clusters.append(current_cluster)', '    return clusters'], ['', 'def getListOfVowelClusters(input: str) -> List[str]:', '    vowel_clusters = []', "    vowels = ['a', 'e', 'i', 'o', 'u']", "    cluster = ''", '    for i in range(len(input)):', '        if input[i] in vowels:', '            cluster += input[i]', '            if i == len(input) - 1:', '                vowel_clusters.append(cluster)', '        else:', '            if len(cluster) > 1:', '                vowel_clusters.append(cluster)', "            cluster = ''", '    return vowel_clusters', ''], ['def getListOfVowelClusters(input: str) -> list:', "    vowels = set('aeiouAEIOU')", '    clusters = []', "    cluster = ''", '    for i in range(len(input)):', '        if input[i] in vowels:', '            cluster += input[i]', '        else:', '            if len(cluster) > 1:', '                clusters.append(cluster)', "            cluster = ''", '    if len(cluster) > 1:', '        clusters.append(cluster)', '    return clusters'], ['def getListOfVowelClusters(input: str) -> list:', '    vowels = "aeiou"', '    clusters = []', '    current_cluster = ""', '    for char in input:', '        if char in vowels:', '            current_cluster += char', '        else:', '            if len(current_cluster) > 1:', '                clusters.append(current_cluster)', '            current_cluster = ""', '    if len(current_cluster) > 1:', '        clusters.append(current_cluster)', '    return clusters'], ['def getListOfVowelClusters(input: str) -> list:', '    vowels = "aeiouAEIOU"', '    clusters = []', '    i = 0', '    while i < len(input):', '        if input[i] in vowels:', '            cluster = input[i]', '            i += 1', '            while i < len(input) and input[i] in vowels:', '                cluster += input[i]', '                i += 1', '            clusters.append(cluster)', '        else:', '            i += 1', '    return clusters'], ['def getListOfVowelClusters(input: str) -> list:', "    vowels = {'a', 'e', 'i', 'o', 'u'}", '    clusters = []', "    current_cluster = ''", '    for i in range(len(input)):', '        if input[i] in vowels:', '            current_cluster += input[i]', '            if i == len(input) - 1:', '                clusters.append(current_cluster)', '        else:', "            if current_cluster != '':", '                clusters.append(current_cluster)', "                current_cluster = ''", '    return clusters'], ['def getListOfVowelClusters(input: str) -> list:', "    vowels = set(['a', 'e', 'i', 'o', 'u','A','E','I','O','U'])", '    vowel_clusters = []', '    i = 0', '    while i < len(input):', '        if input[i] in vowels:', '            cluster = input[i]', '            for j in range(i+1, len(input)):', '                if input[j] in vowels:', '                    cluster += input[j]', '                else:', '                    break', '            if len(cluster) > 1:', '                vowel_clusters.append(cluster)', '            i = j', '        else:', '            i += 1', '    return vowel_clusters'], ['def getListOfVowelClusters(input: str) -> List[str]:', "    vowels = set('aeiouAEIOU')", '    clusters = []', "    current_cluster = ''", '    for i in range(len(input)):', '        if input[i] in vowels:', '            current_cluster += input[i]', '        else:', '            if len(current_cluster) > 1:', '                clusters.append(current_cluster)', "            current_cluster = ''", '    if len(current_cluster) > 1:', '        clusters.append(current_cluster)', '    return clusters'], ['def getListOfVowelClusters(input: str) -> list:', '    vowels = "aeiouAEIOU"', '    clusters = []', '    current_cluster = ""', '    for i in range(len(input)):', '        if input[i] in vowels:', '            current_cluster += input[i]', '        else:', '            if len(current_cluster) > 1:', '                clusters.append(current_cluster)', '            current_cluster = ""', '    if len(current_cluster) > 1:', '        clusters.append(current_cluster)', '    return clusters'], ['def getListOfVowelClusters(input: str) -> list:', "    vowels = ['a', 'e', 'i', 'o', 'u']", '    clusters = []', "    current_cluster = ''", '    ', '    for i in range(len(input)):', '        if input[i] in vowels:', '            current_cluster += input[i]', '        else:', '            if len(current_cluster) > 1:', '                clusters.append(current_cluster)', "            current_cluster = ''", '    ', '    if len(current_cluster) > 1:', '        clusters.append(current_cluster)', '    ', '    return clusters'], ['def getListOfVowelClusters(input: str) -> list:', "    vowels = ['a', 'e', 'i', 'o', 'u']", '    clusters = []', "    current_cluster = ''", '    for char in input:', '        if char.lower() in vowels:', '            current_cluster += char', '        else:', '            if len(current_cluster) > 1:', '                clusters.append(current_cluster)', "            current_cluster = ''", '    if len(current_cluster) > 1:', '        clusters.append(current_cluster)', '    return clusters'], ['def getListOfVowelClusters(input: str) -> list:', '    vowels = "aeiou"', '    vowel_clusters = []', '    current_cluster = ""', '    for i in range(len(input)):', '        if input[i] in vowels:', '            current_cluster += input[i]', '        else:', '            if len(current_cluster) > 1:', '                vowel_clusters.append(current_cluster)', '            current_cluster = ""', '    if len(current_cluster) > 1:', '        vowel_clusters.append(current_cluster)', '    return vowel_clusters'], ['def getListOfVowelClusters(input: str) -> list:', '    vowels = set("aeiouAEIOU")', '    clusters = []', '    current_cluster = ""', '    for i in range(len(input)):', '        if input[i] in vowels:', '            current_cluster += input[i]', '        else:', '            if len(current_cluster) > 1:', '                clusters.append(current_cluster)', '            current_cluster = ""', '    if len(current_cluster) > 1:', '        clusters.append(current_cluster)', '    return clusters'], ['def getListOfVowelClusters(input: str) -> list:', '    vowels = set("aeiouAEIOU")', '    clusters = []', '    current_cluster = ""', '    for char in input:', '        if char in vowels:', '            current_cluster += char', '        elif current_cluster:', '            clusters.append(current_cluster)', '            current_cluster = ""', '    if current_cluster:', '        clusters.append(current_cluster)', '    return clusters'], ['def getListOfVowelClusters(input: str) -> list:', '    vowels = "aeiou"', '    clusters = []', '    current_cluster = ""', '    for i in range(len(input)):', '        if input[i] in vowels:', '            if current_cluster == "":', '                current_cluster += input[i]', '            elif current_cluster[-1] == input[i]:', '                current_cluster += input[i]', '            else:', '                clusters.append(current_cluster)', '                current_cluster = input[i]', '        else:', '            if current_cluster != "":', '                clusters.append(current_cluster)', '                current_cluster = ""', '    if current_cluster != "":', '        clusters.append(current_cluster)', '    return clusters'], ['def getListOfVowelClusters(input: str) -> list:', '    vowels = "aeiouAEIOU"', '    vowel_clusters = []', '    cluster = ""', '    for i in range(len(input)):', '        if input[i] in vowels:', '            cluster += input[i]', '        else:', '            if len(cluster) > 1:', '                vowel_clusters.append(cluster)', '            cluster = ""', '    if len(cluster) > 1:', '        vowel_clusters.append(cluster)', '    return vowel_clusters'], ['def getListOfVowelClusters(input: str) -> list:', "    vowels = ['a', 'e', 'i', 'o', 'u']", '    clusters = []', "    cluster = ''", '    for i in range(len(input)):', '        if input[i] in vowels:', '            cluster += input[i]', "        elif cluster != '':", '            clusters.append(cluster)', "            cluster = ''", "    if cluster != '':", '        clusters.append(cluster)', '    return clusters'], ['def getListOfVowelClusters(input: str) -> List[str]:', "    vowels = set(['a', 'e', 'i', 'o', 'u'])", '    clusters = []', "    cluster = ''", '    for i in range(len(input)):', '        if input[i] in vowels:', '            cluster += input[i]', "        elif cluster != '':", '            clusters.append(cluster)', "            cluster = ''", "    if cluster != '':", '        clusters.append(cluster)', '    return clusters'], ['def getListOfVowelClusters(input: str) -> list:', "    vowels = ['a', 'e', 'i', 'o', 'u']", '    clusters = []', "    current_cluster = ''", '    for i in range(len(input)):', '        if input[i] in vowels:', "            if current_cluster == '':", '                current_cluster = input[i]', '            else:', '                current_cluster += input[i]', '        else:', "            if current_cluster != '':", '                clusters.append(current_cluster)', "                current_cluster = ''", "    if current_cluster != '':", '        clusters.append(current_cluster)', '    return clusters'], ['def getListOfVowelClusters(input: str) -> list:', "    vowels = ['a', 'e', 'i', 'o', 'u']", '    clusters = []', "    current_cluster = ''", '    for char in input:', '        if char.lower() in vowels:', '            current_cluster += char', '        else:', "            if current_cluster != '':", '                clusters.append(current_cluster)', "                current_cluster = ''", "    if current_cluster != '':", '        clusters.append(current_cluster)', '    return clusters'], ['def getListOfVowelClusters(input: str) -> list:', '    vowel_clusters = []', "    vowels = ['a', 'e', 'i', 'o', 'u']", "    current_cluster = ''", '    for i in range(len(input)):', '        if input[i] in vowels:', '            current_cluster += input[i]', '        else:', '            if len(current_cluster) > 1:', '                vowel_clusters.append(current_cluster)', "            current_cluster = ''", '    if len(current_cluster) > 1:', '        vowel_clusters.append(current_cluster)', '    return vowel_clusters'], ['def getListOfVowelClusters(input: str) -> list:', '    vowels = "aeiouAEIOU"', '    clusters = []', '    i = 0', '    while i < len(input):', '        if input[i] in vowels:', '            j = i + 1', '            while j < len(input) and input[j] in vowels:', '                j += 1', '            if j - i > 1:', '                clusters.append(input[i:j])', '            i = j', '        else:', '            i += 1', '    return clusters'], ['def getListOfVowelClusters(input: str) -> list:', '    vowels = "aeiouAEIOU"', '    clusters = []', '    cluster = ""', '    for i in range(len(input)):', '        if input[i] in vowels:', '            cluster += input[i]', '        else:', '            if len(cluster) > 1:', '                clusters.append(cluster)', '            cluster = ""', '    if len(cluster) > 1:', '        clusters.append(cluster)', '    return clusters'], ['', 'def getListOfVowelClusters(input: str) -> list:', "    vowels = ['a', 'e', 'i', 'o', 'u']", '    clusters = []', "    current_cluster = ''", '    for char in input:', '        if char.lower() in vowels:', '            current_cluster += char', '        else:', '            if len(current_cluster) > 1:', '                clusters.append(current_cluster)', "            current_cluster = ''", '    if len(current_cluster) > 1:', '        clusters.append(current_cluster)', '    return clusters', ''], ['def getListOfVowelClusters(input: str) -> list:', "    vowels = set('aeiouAEIOU')", '    clusters = []', "    cluster = ''", '    for i in range(len(input)):', '        if input[i] in vowels:', '            cluster += input[i]', '        else:', '            if len(cluster) > 1:', '                clusters.append(cluster)', "            cluster = ''", '    if len(cluster) > 1:', '        clusters.append(cluster)', '    return clusters'], ['def getListOfVowelClusters(input: str) -> list:', "    vowels = ['a', 'e', 'i', 'o', 'u']", '    clusters = []', "    cluster = ''", '    for i in range(len(input)):', '        if input[i] in vowels:', '            cluster += input[i]', '        elif len(cluster) > 1:', '            clusters.append(cluster)', "            cluster = ''", '        else:', "            cluster = ''", '    if len(cluster) > 1:', '        clusters.append(cluster)', '    return clusters'], ['def getListOfVowelClusters(input: str) -> list:', "    vowels = set('aeiouAEIOU')", '    vowel_clusters = []', '    current_cluster = ""', '    for i in range(len(input)):', '        if input[i] in vowels:', '            current_cluster += input[i]', '        elif current_cluster:', '            vowel_clusters.append(current_cluster)', '            current_cluster = ""', '    if current_cluster:', '        vowel_clusters.append(current_cluster)', '    return vowel_clusters'], ['def getListOfVowelClusters(input: str) -> list:', "    vowels = ['a', 'e', 'i', 'o', 'u']", '    clusters = []', "    cluster = ''", '    for char in input:', '        if char.lower() in vowels:', '            cluster += char', '        else:', '            if len(cluster) > 1:', '                clusters.append(cluster)', "            cluster = ''", '    if len(cluster) > 1:', '        clusters.append(cluster)', '    return clusters'], ['', 'def getListOfVowelClusters(input: str) -> list:', "    vowels = set(['a', 'e', 'i', 'o', 'u'])", '    vowel_clusters = []', '    current_cluster = ""', '    for i in range(len(input)):', '        if input[i] in vowels:', '            if current_cluster == "":', '                current_cluster = input[i]', '            else:', '                if input[i] == current_cluster[-1]:', '                    current_cluster += input[i]', '                else:', '                    vowel_clusters.append(current_cluster)', '                    current_cluster = input[i]', '        else:', '            if current_cluster != "":', '                vowel_clusters.append(current_cluster)', '                current_cluster = ""', '    if current_cluster != "":', '        vowel_clusters.append(current_cluster)', '    return vowel_clusters', ''], ['def getListOfVowelClusters(input: str) -> list:', '    vowels = "aeiouAEIOU"', '    vowel_clusters = []', '    current_cluster = ""', '    for i in range(len(input)):', '        if input[i] in vowels:', '            current_cluster += input[i]', '        else:', '            if len(current_cluster) > 1:', '                vowel_clusters.append(current_cluster)', '            current_cluster = ""', '    if len(current_cluster) > 1:', '        vowel_clusters.append(current_cluster)', '    return vowel_clusters'], ['def getListOfVowelClusters(input: str) -> list:', '    vowel_clusters = []', '    vowels = "aeiouAEIOU"', '    cluster = ""', '    for i in range(len(input)):', '        if input[i] in vowels:', '            cluster += input[i]', '        else:', '            if len(cluster) > 1:', '                vowel_clusters.append(cluster)', '            cluster = ""', '    if len(cluster) > 1:', '        vowel_clusters.append(cluster)', '    return vowel_clusters'], ['def getListOfVowelClusters(input: str) -> list:', "    vowels = ['a', 'e', 'i', 'o', 'u']", '    vowel_clusters = []', "    vowel_cluster = ''", '    for i in range(len(input)):', '        if input[i] in vowels:', '            vowel_cluster += input[i]', '            if i == len(input) - 1:', '                vowel_clusters.append(vowel_cluster)', '        else:', "            if vowel_cluster != '':", '                vowel_clusters.append(vowel_cluster)', "                vowel_cluster = ''", '    return vowel_clusters'], ['def getListOfVowelClusters(input: str) -> list:', '    vowels = "aeiou"', '    clusters = []', '    current_cluster = ""', '    for letter in input:', '        if letter in vowels:', '            current_cluster += letter', '        else:', '            if len(current_cluster) > 1:', '                clusters.append(current_cluster)', '            current_cluster = ""', '    if len(current_cluster) > 1:', '        clusters.append(current_cluster)', '    return clusters'], ['def getListOfVowelClusters(input: str) -> List[str]:', "    vowels = set(['a', 'e', 'i', 'o', 'u'])", '    clusters = []', '    current_cluster = []', '    for i in range(len(input)):', '        if input[i] in vowels:', '            current_cluster.append(input[i])', '        else:', '            if len(current_cluster) > 1:', "                clusters.append(''.join(current_cluster))", '            current_cluster = []', '    if len(current_cluster) > 1:', "        clusters.append(''.join(current_cluster))", '    return clusters'], ['def getListOfVowelClusters(input: str) -> List[str]:', "    vowels = ['a', 'e', 'i', 'o', 'u']", "    cluster = ''", '    clusters = []', '    for i in range(len(input)):', '        if input[i] in vowels:', "            if cluster == '':", '                cluster = input[i]', '            else:', '                cluster += input[i]', '        else:', "            if cluster != '':", '                clusters.append(cluster)', "                cluster = ''", "    if cluster != '':", '        clusters.append(cluster)', '    return clusters'], ['def getListOfVowelClusters(input: str) -> list:', "    vowels = set('aeiouAEIOU')", '    clusters = []', "    current_cluster = ''", '    for i in range(len(input)):', '        if input[i] in vowels:', '            current_cluster += input[i]', '        else:', '            if len(current_cluster) > 1:', '                clusters.append(current_cluster)', "            current_cluster = ''", '    if len(current_cluster) > 1:', '        clusters.append(current_cluster)', '    return clusters'], ['def getListOfVowelClusters(input: str) -> list:', '    vowels = "aeiouAEIOU"', '    clusters = []', '    current_cluster = ""', '    for i in range(len(input)):', '        if input[i] in vowels:', '            current_cluster += input[i]', '        else:', '            if current_cluster:', '                clusters.append(current_cluster)', '                current_cluster = ""', '    if current_cluster:', '        clusters.append(current_cluster)', '    return clusters'], ['def getListOfVowelClusters(input: str) -> list:', "    vowels = set('aeiouAEIOU')", '    clusters = []', "    cluster = ''", '    for char in input:', '        if char in vowels:', '            cluster += char', '        else:', '            if len(cluster) > 1:', '                clusters.append(cluster)', "            cluster = ''", '    if len(cluster) > 1:', '        clusters.append(cluster)', '    return clusters'], ['def getListOfVowelClusters(input: str) -> list:', "    vowels = ['a', 'e', 'i', 'o', 'u']", '    clusters = []', "    current_cluster = ''", '    for i in range(len(input)):', '        if input[i] in vowels:', '            current_cluster += input[i]', "        elif current_cluster != '':", '            clusters.append(current_cluster)', "            current_cluster = ''", "    if current_cluster != '':", '        clusters.append(current_cluster)', '    return clusters'], ['def getListOfVowelClusters(input: str) -> List[str]:', '    vowels = "aeiouAEIOU"', '    vowel_clusters = []', '    cluster = ""', '    for i in range(len(input)):', '        if input[i] in vowels:', '            cluster += input[i]', '        else:', '            if len(cluster) > 1:', '                vowel_clusters.append(cluster)', '            cluster = ""', '    if len(cluster) > 1:', '        vowel_clusters.append(cluster)', '    return vowel_clusters'], ['def getListOfVowelClusters(input: str) -> list:', "    vowels = ['a', 'e', 'i', 'o', 'u']", '    clusters = []', '    current_cluster = ""', '    ', '    for letter in input:', '        if letter.lower() in vowels:', '            current_cluster += letter', '        else:', '            if len(current_cluster) > 1:', '                clusters.append(current_cluster)', '            current_cluster = ""', '            ', '    if len(current_cluster) > 1:', '        clusters.append(current_cluster)', '        ', '    return clusters']]
Attempting to implement {'getListOfVowelClusters'}
Killing subprocesses
Successfully implemented {'getListOfVowelClusters'}
Implementing SCC 4 {'findHappinestNumber'}
Total: 64 completions!
[['def is_prime(n: int) -> bool:', '    if n < 2:', '        return False', '    for i in range(2, int(n**0.5) + 1):', '        if n % i == 0:', '            return False', '    return True', '', 'def is_happy(n: int) -> bool:', '    seen = set()', '    while n not in seen:', '        seen.add(n)', '        n = sum(int(i)**2 for i in str(n))', '        if n == 1:', '            return True', '    return False', '', 'def is_happiest(n: int) -> bool:', '    if not is_happy(n):', '        return False', '    digit_sum = sum(int(i) for i in str(n))', '    return digit_sum == 2**(digit_sum.bit_length()-1)', '', 'def findHappinestNumber(input: List[str]) -> dict:', '    max_happiness = -1', '    happiest_num = 0', '    for vowel_cluster in input:', '        happiness = sum(ord(c) for c in vowel_cluster)', '        if is_prime(happiness) and is_happiest(happiness):', '            if happiness > max_happiness:', '                max_happiness = happiness', '                happiest_num = vowel_cluster', '            elif happiness == max_happiness and vowel_cluster > happiest_num:', '                happiest_num = vowel_cluster', '    return {happiest_num: max_happiness} if max_happiness != -1 else {0: 0}'], ['def is_happy_number(n):', '    def sum_of_squares_of_digits(n):', '        return sum(int(digit)**2 for digit in str(n))', '    seen = {n}', '    while True:', '        n = sum_of_squares_of_digits(n)', '        if n == 1:', '            return True', '        if n in seen:', '            return False', '        seen.add(n)', '', 'def is_prime(n):', '    if n <= 1:', '        return False', '    for i in range(2, int(n**0.5)+1):', '        if n % i == 0:', '            return False', '    return True', '', 'def findHappinestNumber(input):', '    def sum_of_digits(n):', '        return sum(int(digit) for digit in str(n))', '    happiest_score = 0', '    happiest_cluster = ""', '    for cluster in input:', '        score = sum(ord(char) for char in cluster)', '        if is_happy_number(score) and is_prime(score):', '            if sum_of_digits(score) == 2**int((score-1).bit_length()):', '                if score > happiest_score:', '                    happiest_score = score', '                    happiest_cluster = cluster', '                elif score == happiest_score and sum_of_digits(score) > sum_of_digits(happiest_score):', '                    happiest_cluster = cluster', '    return {happiest_cluster: happiest_score} if happiest_score != 0 else {happiest_cluster: 0}'], ['def is_prime(n: int) -> bool:', '    if n <= 1:', '        return False', '    for i in range(2, int(n**0.5)+1):', '        if n % i == 0:', '            return False', '    return True', '', 'def sum_of_digits(n: int) -> int:', '    return sum(int(d) for d in str(n))', '', 'def is_happy_number(n: int) -> bool:', '    if n == 1:', '        return True', '    elif n == 4:', '        return False', '    else:', '        return is_happy_number(sum(int(d)**2 for d in str(n)))', '', 'def is_happiest_number(n: int) -> bool:', '    if not is_happy_number(n):', '        return False', '    digits_sum = sum_of_digits(n)', '    return is_prime(n) and (digits_sum & (digits_sum - 1)) == 0', '', 'def findHappinestNumber(input: List[str]) -> Dict[str, int]:', '    happiest_score = 0', '    happiest_cluster = ""', '    for cluster in input:', '        score = sum(ord(c) for c in cluster)', '        if is_happiest_number(score):', '            if score > happiest_score:', '                happiest_score = score', '                happiest_cluster = cluster', '            elif score == happiest_score and score > 0:', '                happiest_cluster = max(happiest_cluster, cluster)', '    return {happiest_cluster: happiest_score}'], ['def is_happy_number(n):', '    def sum_of_squares(n):', '        return sum(int(c) ** 2 for c in str(n))', '', '    seen = set()', '    while n != 1 and n not in seen:', '        seen.add(n)', '        n = sum_of_squares(n)', '    return n == 1', '', 'def is_prime(n):', '    if n <= 1:', '        return False', '    for i in range(2, int(n**0.5) + 1):', '        if n % i == 0:', '            return False', '    return True', '', 'def findHappinestNumber(input):', '    def sum_of_digits(n):', '        return sum(int(c) for c in str(n))', '', '    max_happiness = 0', '    happiest_number = 0', '    for vowel_cluster in input:', '        happiness_score = sum(ord(c) for c in vowel_cluster)', '        if is_happy_number(happiness_score) and is_prime(happiness_score):', '            sum_of_digits_happiness_score = sum_of_digits(happiness_score)', '            if sum_of_digits_happiness_score > max_happiness:', '                max_happiness = sum_of_digits_happiness_score', '                happiest_number = happiness_score', '            elif sum_of_digits_happiness_score == max_happiness and happiness_score > happiest_number:', '                happiest_number = happiness_score', '    return {vowel_cluster: happiest_number for vowel_cluster in input}'], ['', 'def is_happy_number(n):', '    sum_of_digits = 0', '    while n > 0:', '        digit = n % 10', '        sum_of_digits += digit ** 2', '        n //= 10', '    return sum_of_digits == 1', '', 'def is_prime(n):', '    if n < 2:', '        return False', '    for i in range(2, int(n ** 0.5) + 1):', '        if n % i == 0:', '            return False', '    return True', '', 'def findHappinestNumber(input):', '    happiest_score = 0', '    happiest_cluster = ""', '    for cluster in input:', '        score = sum(ord(c) for c in cluster)', '        if is_happy_number(score) and is_prime(score):', '            if score > happiest_score:', '                happiest_score = score', '                happiest_cluster = cluster', '            elif score == happiest_score and score > 0:', '                if int(str(score), 2) > int(str(happiest_score), 2):', '                    happiest_cluster = cluster', '        elif happiest_score == 0:', '            if is_happy_number(score):', '                happiest_score = score', '                happiest_cluster = cluster', '    return {happiest_cluster: happiest_score}', ''], ['def is_happy(n):', '    if n == 1:', '        return True', '    elif n == 4:', '        return False', '    else:', '        return is_happy(sum(int(digit)**2 for digit in str(n)))', '', 'def is_prime(n):', '    if n <= 1:', '        return False', '    elif n == 2:', '        return True', '    else:', '        for i in range(2, int(n**0.5)+1):', '            if n % i == 0:', '                return False', '        return True', '', 'def sum_of_digits(n):', '    return sum(int(digit) for digit in str(n))', '', 'def find_happiest_number(input):', '    happiest_score = 0', '    happiest_number = 0', '    for vowel_cluster in input:', '        score = sum(ord(char) for char in vowel_cluster)', '        if is_prime(score) and (score == 2 or sum_of_digits(score) == 2**int((score-1).bit_length())):', '            if sum_of_digits(score) > sum_of_digits(happiest_score):', '                happiest_score = score', '                happiest_number = vowel_cluster', '            elif sum_of_digits(score) == sum_of_digits(happiest_score) and score > happiest_score:', '                happiest_score = score', '                happiest_number = vowel_cluster', '    return {happiest_number: happiest_score}'], ['def findHappinestNumber(input):', '    def is_prime(n):', '        if n < 2:', '            return False', '        for i in range(2, int(n ** 0.5) + 1):', '            if n % i == 0:', '                return False', '        return True', '', '    def is_happy(n):', '        def next_num(n):', '            return sum(int(digit) ** 2 for digit in str(n))', '        seen = set()', '        while n != 1 and n not in seen:', '            seen.add(n)', '            n = next_num(n)', '        return n == 1', '', '    def is_happiest(n):', '        def sum_digits(n):', '            return sum(int(digit) for digit in str(n))', '        if not is_happy(n):', '            return False', '        return sum_digits(n) == 2 ** (n.bit_length() - 1)', '', '    def happiest_score(vowel_cluster):', '        score = sum(ord(char) for char in vowel_cluster)', '        if is_happiest(score):', '            return score', '        return 0', '', '    happiest = {}', '    max_score = 0', '    for vowel_cluster in input:', '        score = happiest_score(vowel_cluster)', '        if score > max_score:', '            happiest = {vowel_cluster: score}', '            max_score = score', '        elif score == max_score:', '            happiest[vowel_cluster] = score', '    return happiest'], ['def is_happy_number(n):', '    def sum_of_digits(x):', '        return sum(int(d) for d in str(x))', '', '    def is_power_of_two(x):', '        return x != 0 and not (x & (x - 1))', '', '    while n != 1 and n != 4:', '        n = sum_of_digits(n)', '', '    return n == 1 or is_power_of_two(sum_of_digits(n))', '', 'def is_prime(n):', '    if n < 2:', '        return False', '    for i in range(2, int(n ** 0.5) + 1):', '        if n % i == 0:', '            return False', '    return True', '', 'def findHappinestNumber(input):', '    def get_happiness_score(vowel_cluster):', '        return sum(ord(c) for c in vowel_cluster)', '', '    def is_happiest_number(n):', '        if not is_happy_number(n):', '            return False', '', '        sum_of_digits = sum(int(d) for d in str(n))', '        return is_power_of_two(sum_of_digits) and (not happiest_number_sum or sum_of_digits > happiest_number_sum or (sum_of_digits == happiest_number_sum and n > happiest_number))', '', '    happiest_number = 0', '    happiest_number_sum = 0', '    for vowel_cluster in input:', '        happiness_score = get_happiness_score(vowel_cluster)', '        if is_prime(happiness_score) and is_happiest_number(happiness_score):', '            happiest_number = happiness_score', '            happiest_number_sum = sum(int(d) for d in str(happiness_score))', '', '    return {vowel_cluster: happiest_number for vowel_cluster in input}'], ['def findHappinestNumber(input):', '    def is_prime(n):', '        if n < 2:', '            return False', '        for i in range(2, int(n**0.5)+1):', '            if n % i == 0:', '                return False', '        return True', '', '    def sum_of_digits(n):', '        return sum(int(digit) for digit in str(n))', '', '    def is_happy_number(n):', '        s = set()', '        while n != 1:', '            n = sum(int(digit)**2 for digit in str(n))', '            if n in s:', '                return False', '            s.add(n)', '        return True', '', '    def is_happiest_number(n):', '        if not is_happy_number(n):', '            return False', '        sum_of_digits_n = sum_of_digits(n)', '        if sum_of_digits_n & (sum_of_digits_n - 1) == 0:', '            return True', '        return False', '', '    happiest_score = 0', '    happiest_vowel_cluster = ""', '    for vowel_cluster in input:', '        score = sum(ord(char) for char in vowel_cluster)', '        if is_happiest_number(score):', '            if score > happiest_score:', '                happiest_score = score', '                happiest_vowel_cluster = vowel_cluster', '    return {happiest_vowel_cluster: happiest_score}'], ['', 'def is_happy_number(n):', '    def digit_sum(n):', '        return sum(int(d) for d in str(n))', '', '    def is_prime(n):', '        if n < 2:', '            return False', '        for i in range(2, int(n**0.5) + 1):', '            if n % i == 0:', '                return False', '        return True', '', '    def is_power_of_2(n):', '        return (n & (n - 1) == 0) and n != 0', '', '    seen = set()', '    while n != 1 and n not in seen:', '        seen.add(n)', '        n = sum(ord(d) for d in str(n))', '    return n == 1 and is_prime(sum(int(d) for d in str(n))) and is_power_of_2(digit_sum(n))', '', 'def findHappinestNumber(input):', '    happy_numbers = {}', '    for vowel_cluster in input:', '        happiness_score = sum(ord(c) for c in vowel_cluster)', '        if is_happy_number(happiness_score):', '            digit_sum = sum(int(d) for d in str(happiness_score))', '            if digit_sum in happy_numbers:', '                if happiness_score > happy_numbers[digit_sum]:', '                    happy_numbers[digit_sum] = happiness_score', '            else:', '                happy_numbers[digit_sum] = happiness_score', '    if happy_numbers:', '        max_sum_digits = max(happy_numbers.keys())', '        return {k: v for k, v in happy_numbers.items() if k == max_sum_digits}', '    else:', '        return {"0": 0}', ''], ['', 'import math', '', 'def is_prime(n: int) -> bool:', '    if n <= 1:', '        return False', '    for i in range(2, int(math.sqrt(n))+1):', '        if n % i == 0:', '            return False', '    return True', '', 'def is_happy(n: int) -> bool:', '    def get_next(num):', '        total_sum = 0', '        while num > 0:', '            num, digit = divmod(num, 10)', '            total_sum += digit ** 2', '        return total_sum', '', '    seen = set()', '    while n != 1 and n not in seen:', '        seen.add(n)', '        n = get_next(n)', '', '    return n == 1', '', 'def find_happiest_number(input: List[str]) -> Dict[str, int]:', '    def get_happiness_score(vowel_cluster):', '        return sum(ord(c) for c in vowel_cluster)', '', '    def is_happy_prime(n):', '        return is_happy(n) and is_prime(n)', '', '    happiest_score = 0', '    happiest_vowel_cluster = ""', '    for vowel_cluster in input:', '        happiness_score = get_happiness_score(vowel_cluster)', '        if happiness_score > happiest_score and is_happy_prime(happiness_score):', '            happiest_score = happiness_score', '            happiest_vowel_cluster = vowel_cluster', '', '    return {happiest_vowel_cluster: happiest_score} if happiest_score != 0 else {0: 0}', ''], ['def is_happy_number(n):', '    def sum_of_squares_of_digits(n):', '        return sum(int(digit)**2 for digit in str(n))', '    seen = set()', '    while n != 1 and n not in seen:', '        seen.add(n)', '        n = sum_of_squares_of_digits(n)', '    return n == 1', '', 'def is_prime(n):', '    if n <= 1:', '        return False', '    for i in range(2, int(n**0.5)+1):', '        if n % i == 0:', '            return False', '    return True', '', 'def findHappinestNumber(input):', '    happiest_score = 0', '    happiest_cluster = ""', '    for cluster in input:', '        score = sum(ord(char) for char in cluster)', '        if is_happy_number(score) and is_prime(score):', '            if score > happiest_score:', '                happiest_score = score', '                happiest_cluster = cluster', '            elif score == happiest_score and score > 0:', '                happiest_cluster = max(happiest_cluster, cluster)', '    return {happiest_cluster: happiest_score}'], ['def findHappinestNumber(input):', '    def is_prime(n):', '        if n < 2:', '            return False', '        for i in range(2, int(n ** 0.5) + 1):', '            if n % i == 0:', '                return False', '        return True', '', '    def is_happy(n):', '        def digit_square_sum(n):', '            return sum(int(d) ** 2 for d in str(n))', '', '        seen = set()', '        while n != 1 and n not in seen:', '            seen.add(n)', '            n = digit_square_sum(n)', '        return n == 1', '', '    def is_happiest(n):', '        def digit_sum(n):', '            return sum(int(d) for d in str(n))', '', '        def is_power_of_two(n):', '            return n != 0 and (n & (n - 1)) == 0', '', '        if not is_prime(n):', '            return False', '        digit_sum_power_of_two = False', '        for i in range(1, n):', '            if is_happy(i) and is_power_of_two(digit_sum(i)):', '                digit_sum_power_of_two = True', '                break', '        return digit_sum_power_of_two', '', '    happiest_score = 0', '    happiest_cluster = ""', '    for cluster in input:', '        score = sum(ord(c) for c in cluster)', '        if is_happiest(score):', '            if score > happiest_score:', '                happiest_score = score', '                happiest_cluster = cluster', '            elif score == happiest_score and int(cluster) > int(happiest_cluster):', '                happiest_cluster = cluster', '    return {happiest_cluster: happiest_score} if happiest_cluster else {0: 0}'], ['', 'def is_happy_number(n):', '    def sum_of_squares_of_digits(n):', '        return sum(int(digit)**2 for digit in str(n))', '    visited = set()', '    while n != 1 and n not in visited:', '        visited.add(n)', '        n = sum_of_squares_of_digits(n)', '    return n == 1', '', 'def is_happy_prime(n):', '    if not is_happy_number(n):', '        return False', '    if n == 2:', '        return True', '    if n % 2 == 0:', '        return False', '    for i in range(3, int(n**0.5)+1, 2):', '        if n % i == 0:', '            return False', '    return True', '', 'def findHappinestNumber(input):', '    def sum_of_digits(n):', '        return sum(int(digit) for digit in str(n))', '    happiest_score = 0', '    happiest_number = 0', '    for vowel_cluster in input:', '        score = sum(ord(char) for char in vowel_cluster)', '        if is_happy_prime(score) and sum_of_digits(score) == 2**int(score**0.5):', '            if score > happiest_score:', '                happiest_score = score', '                happiest_number = vowel_cluster', '    return {happiest_number: happiest_score}', ''], ['def findHappinestNumber(input):', '    def is_prime(n):', '        if n <= 1:', '            return False', '        for i in range(2, int(n ** 0.5) + 1):', '            if n % i == 0:', '                return False', '        return True', '', '    def is_happy(n):', '        def sum_digits(x):', '            return sum(int(d) ** 2 for d in str(x))', '', '        seen = set()', '        while n != 1 and n not in seen:', '            seen.add(n)', '            n = sum_digits(n)', '        return n == 1', '', '    def is_happiest(n):', '        if not is_happy(n):', '            return False', '        digits_sum = sum(int(d) for d in str(n))', '        return digits_sum & (digits_sum - 1) == 0 and digits_sum != 0', '', '    happiest_score = 0', '    happiest_vowel_cluster = ""', '    for vowel_cluster in input:', '        score = sum(ord(c) for c in vowel_cluster)', '        if is_happiest(score) and score > happiest_score:', '            happiest_score = score', '            happiest_vowel_cluster = vowel_cluster', '        elif is_happiest(score) and score == happiest_score and score > 0 and score > sum(ord(c) for c in happiest_vowel_cluster):', '            happiest_vowel_cluster = vowel_cluster', '', '    return {happiest_vowel_cluster: happiest_score} if happiest_score > 0 else {happiest_vowel_cluster: 0}'], ['', 'import math', '', 'def is_happy_number(num: int) -> bool:', '    def sum_of_digits(n: int) -> int:', '        return sum(int(d) for d in str(n))', '    ', '    def is_prime(n: int) -> bool:', '        if n < 2:', '            return False', '        for i in range(2, int(math.sqrt(n)) + 1):', '            if n % i == 0:', '                return False', '        return True', '    ', '    def is_power_of_2(n: int) -> bool:', '        return n > 0 and (n & (n - 1)) == 0', '    ', '    while num != 1 and num != 4:', '        num = sum_of_digits(num)', '    return num == 1 or is_prime(num) and is_power_of_2(sum_of_digits(num))', '', 'def findHappinestNumber(input: List[str]) -> Dict[str, int]:', '    def get_happiness_score(vowel_cluster: str) -> int:', '        return sum(ord(c) for c in vowel_cluster)', '    ', '    happy_numbers = []', '    happiest_score = 0', '    happiest_vowel_cluster = ""', '    ', '    for vowel_cluster in input:', '        happiness_score = get_happiness_score(vowel_cluster)', '        if is_happy_number(happiness_score):', '            happy_numbers.append(happiness_score)', '            if happiness_score > happiest_score:', '                happiest_score = happiness_score', '                happiest_vowel_cluster = vowel_cluster', '    ', '    if happy_numbers:', '        return {happiest_vowel_cluster: happiest_score}', '    else:', '        return {"": 0}', ''], ['def is_happy_number(n):', '    def sum_of_squares(n):', '        return sum(int(digit) ** 2 for digit in str(n))', '    seen = set()', '    while True:', '        n = sum_of_squares(n)', '        if n == 1:', '            return True', '        elif n in seen:', '            return False', '        seen.add(n)', '', 'def findHappinestNumber(input):', '    def is_prime(n):', '        if n < 2:', '            return False', '        for i in range(2, int(n ** 0.5) + 1):', '            if n % i == 0:', '                return False', '        return True', '', '    def is_power_of_two(n):', '        return n > 0 and (n & (n - 1)) == 0', '', '    def get_sum_of_digits(n):', '        return sum(int(digit) for digit in str(n))', '', '    def is_happy_and_happiest(n):', '        if is_happy_number(n):', '            if is_prime(n) and is_power_of_two(get_sum_of_digits(n)):', '                return True', '        return False', '', '    happiest = 0', '    happiest_score = 0', '    for vowel_cluster in input:', '        score = sum(ord(char) for char in vowel_cluster)', '        if is_happy_and_happiest(score):', '            if score > happiest_score:', '                happiest_score = score', '                happiest = vowel_cluster', '            elif score == happiest_score:', '                if vowel_cluster > happiest:', '                    happiest = vowel_cluster', '    return {happiest: happiest_score}'], ['def is_happy_number(num):', '    def get_next_num(num):', '        return sum(int(digit)**2 for digit in str(num))', '    ', '    seen = set()', '    while num != 1 and num not in seen:', '        seen.add(num)', '        num = get_next_num(num)', '    return num == 1', '', 'def is_prime(num):', '    if num < 2:', '        return False', '    for i in range(2, int(num**0.5)+1):', '        if num % i == 0:', '            return False', '    return True', '', 'def find_happiest_number(vowel_clusters):', '    def get_sum_of_digits(num):', '        return sum(int(digit) for digit in str(num))', '    ', '    happiest_dict = {}', '    max_sum = 0', '    for cluster in vowel_clusters:', '        score = sum(ord(char) for char in cluster)', '        if is_happy_number(score) and is_prime(score):', '            sum_of_digits = get_sum_of_digits(score)', '            if sum_of_digits > max_sum:', '                max_sum = sum_of_digits', '                happiest_dict = {cluster: score}', '            elif sum_of_digits == max_sum and score > list(happiest_dict.values())[0]:', '                happiest_dict = {cluster: score}', '    if not happiest_dict:', '        happiest_dict = {"0": 0}', '    return happiest_dict'], ['', 'def is_happy_number(n):', '    def get_next(n):', '        total_sum = 0', '        while n > 0:', '            n, digit = divmod(n, 10)', '            total_sum += digit ** 2', '        return total_sum', '', '    seen = set()', '    while n != 1 and n not in seen:', '        seen.add(n)', '        n = get_next(n)', '', '    return n == 1', '', '', 'def findHappinestNumber(input):', '    def is_prime(num):', '        if num < 2:', '            return False', '        for i in range(2, int(num ** 0.5) + 1):', '            if num % i == 0:', '                return False', '        return True', '', '    def is_power_of_two(num):', '        return num != 0 and ((num & (num - 1)) == 0)', '', '    def sum_of_digits(num):', '        return sum(int(digit) for digit in str(num))', '', '    def get_happiness_score(vowel_cluster):', '        return sum(ord(char) for char in vowel_cluster)', '', '    max_happiness_score = 0', '    happiest_number = 0', '    for vowel_cluster in input:', '        happiness_score = get_happiness_score(vowel_cluster)', '        if is_happy_number(happiness_score) and is_prime(happiness_score) and is_power_of_two(sum_of_digits(happiness_score)):', '            if happiness_score > max_happiness_score:', '                max_happiness_score = happiness_score', '                happiest_number = vowel_cluster', '            elif happiness_score == max_happiness_score and vowel_cluster > happiest_number:', '                happiest_number = vowel_cluster', '', '    return {happiest_number: max_happiness_score}', ''], ['def is_happy(n):', '    def digit_sum(n):', '        return sum(int(d) for d in str(n))', '', '    def is_prime(n):', '        if n < 2:', '            return False', '        for i in range(2, int(n ** 0.5) + 1):', '            if n % i == 0:', '                return False', '        return True', '', '    def is_power_of_two(n):', '        return n != 0 and (n & (n - 1)) == 0', '', '    while True:', '        if n == 1:', '            return True', '        if is_prime(n) and is_power_of_two(digit_sum(n)):', '            return True', '        if n == 4:', '            return False', '        n = digit_sum(n)', '', 'def findHappinestNumber(input):', '    def digit_sum(n):', '        return sum(int(d) for d in str(n))', '', '    def is_prime(n):', '        if n < 2:', '            return False', '        for i in range(2, int(n ** 0.5) + 1):', '            if n % i == 0:', '                return False', '        return True', '', '    def is_power_of_two(n):', '        return n != 0 and (n & (n - 1)) == 0', '', '    def happiest_score(n):', '        if is_happy(n):', '            return digit_sum(n)', '        return 0', '', '    happiest = {}', '    for cluster in input:', '        score = sum(ord(c) for c in cluster)', '        if is_happy(score):', '            if score not in happiest or happiest[score] < score:', '                happiest[score] = cluster', '        else:', '            if 0 not in happiest or happiest[0] < score:', '                happiest[0] = cluster', '    return {v: k for k, v in happiest.items()}'], ['', 'def is_happy_number(num):', '    def get_sum_of_squares(num):', '        return sum(int(digit) ** 2 for digit in str(num))', '    ', '    seen = set()', '    while num != 1 and num not in seen:', '        seen.add(num)', '        num = get_sum_of_squares(num)', '    return num == 1', '', 'def is_prime(num):', '    if num < 2:', '        return False', '    for i in range(2, int(num ** 0.5) + 1):', '        if num % i == 0:', '            return False', '    return True', '', 'def is_power_of_two(num):', '    if num == 0:', '        return False', '    while num % 2 == 0:', '        num //= 2', '    return num == 1', '', 'def get_happiness_score(vowel_cluster):', '    return sum(ord(char) for char in vowel_cluster)', '', 'def findHappinestNumber(input):', '    happiest_score = 0', '    happiest_cluster = ""', '    for cluster in input:', '        score = get_happiness_score(cluster)', '        if is_happy_number(score) and is_prime(score) and is_power_of_two(sum(int(digit) for digit in str(score))):', '            if score > happiest_score:', '                happiest_score = score', '                happiest_cluster = cluster', '    return {happiest_cluster: happiest_score}', ''], ['', 'def is_happy_number(n):', '    def sum_of_squares(n):', '        return sum(int(i)**2 for i in str(n))', '', '    seen = set()', '    while n != 1 and n not in seen:', '        seen.add(n)', '        n = sum_of_squares(n)', '    return n == 1', '', 'def is_prime(n):', '    if n <= 1:', '        return False', '    for i in range(2, int(n**0.5)+1):', '        if n % i == 0:', '            return False', '    return True', '', 'def findHappinestNumber(input):', '    def digit_sum(n):', '        return sum(int(i) for i in str(n))', '', '    happiest_score = 0', '    happiest_cluster = ""', '    for cluster in input:', '        score = sum(ord(c) for c in cluster)', '        if is_happy_number(score) and is_prime(score):', '            if digit_sum(score) == 2**int((score-1).bit_length()):', '                if score > happiest_score:', '                    happiest_score = score', '                    happiest_cluster = cluster', '            else:', '                continue', '        else:', '            continue', '', '    return {happiest_cluster: happiest_score}', ''], ['', 'def is_happy_number(n):', '    if n == 1:', '        return True', '    if n == 4:', '        return False', '    return is_happy_number(sum(int(i) ** 2 for i in str(n)))', '', 'def is_prime(n):', '    if n < 2:', '        return False', '    for i in range(2, int(n ** 0.5) + 1):', '        if n % i == 0:', '            return False', '    return True', '', 'def findHappinestNumber(input):', '    happiest_score = 0', '    happiest_cluster = ""', '    for cluster in input:', '        score = sum(ord(c) for c in cluster)', '        if is_happy_number(score) and is_prime(score):', '            if score > happiest_score:', '                happiest_score = score', '                happiest_cluster = cluster', '            elif score == happiest_score and int(str(score), 2) > int(str(happiest_score), 2):', '                happiest_score = score', '                happiest_cluster = cluster', '    return {happiest_cluster: happiest_score} if happiest_score != 0 else {0: 0}', ''], ['def findHappinestNumber(input):', '    def is_prime(n):', '        if n < 2:', '            return False', '        for i in range(2, int(n ** 0.5) + 1):', '            if n % i == 0:', '                return False', '        return True', '', '    def is_happy(n):', '        seen = set()', '        while n not in seen:', '            seen.add(n)', '            n = sum(int(digit) ** 2 for digit in str(n))', '        return n == 1', '', '    def is_happy_number(n):', '        if n < 1:', '            return False', '        while n != 1 and n != 4:', '            n = sum(int(i) ** 2 for i in str(n))', '        return n == 1', '', '    def is_happiest_number(n):', '        if n == 0:', '            return False', '        if not is_happy_number(n):', '            return False', '        sum_of_digits = sum(map(int, str(n)))', '        base = 2', '        power = 0', '        while base ** power <= sum_of_digits:', '            if base ** power == sum_of_digits:', '                return True', '            power += 1', '        return False', '', '    happiest_score = 0', '    happiest_cluster = ""', '    for cluster in input:', '        score = sum(ord(char) for char in cluster)', '        if is_happiest_number(score) and score > happiest_score:', '            happiest_score = score', '            happiest_cluster = cluster', '', '    return {happiest_cluster: happiest_score}'], ['', 'def is_happy_number(n: int) -> bool:', '    def sum_of_digits_squared(n: int) -> int:', '        return sum(int(digit)**2 for digit in str(n))', '', '    seen = set()', '    while n != 1 and n not in seen:', '        seen.add(n)', '        n = sum_of_digits_squared(n)', '', '    return n == 1', '', '', 'def find_happiest_number(input: List[str]) -> Dict[str, int]:', '    def is_prime(n: int) -> bool:', '        if n < 2:', '            return False', '        for i in range(2, int(n**0.5)+1):', '            if n % i == 0:', '                return False', '        return True', '', '    def is_happy_sum(n: int) -> bool:', "        return bin(sum(int(digit) for digit in str(n)))[2:] == '1'*n.bit_length()", '', '    def calculate_happiness_score(vowel_cluster: str) -> int:', '        return sum(ord(char) for char in vowel_cluster)', '', '    happiest_score = 0', "    happiest_vowel_cluster = ''", '    for vowel_cluster in input:', '        happiness_score = calculate_happiness_score(vowel_cluster)', '        if is_prime(happiness_score) and is_happy_sum(happiness_score):', '            if happiness_score > happiest_score:', '                happiest_score = happiness_score', '                happiest_vowel_cluster = vowel_cluster', '            elif happiness_score == happiest_score and happiness_score > 0:', '                if int(happiest_vowel_cluster) < int(vowel_cluster):', '                    happiest_vowel_cluster = vowel_cluster', '', '    return {happiest_vowel_cluster: happiest_score}', ''], ['def is_prime(n: int) -> bool:', '    if n <= 1:', '        return False', '    for i in range(2, int(n**0.5)+1):', '        if n % i == 0:', '            return False', '    return True', '', 'def sum_of_digits(n: int) -> int:', '    return sum(int(digit) for digit in str(n))', '', 'def is_happy_number(n: int) -> bool:', '    if n == 1:', '        return True', '    elif n == 4:', '        return False', '    else:', '        return is_happy_number(sum(int(digit)**2 for digit in str(n)))', '', 'def findHappinestNumber(input: List[str]) -> Dict[str, int]:', '    happiest_score = 0', '    happiest_vowel_cluster = ""', '', '    for vowel_cluster in input:', '        score = sum(ord(char) for char in vowel_cluster)', '', '        if is_prime(score):', '            digit_sum = sum_of_digits(score)', '            if 2**int(digit_sum) == score:', '                if score > happiest_score:', '                    happiest_score = score', '                    happiest_vowel_cluster = vowel_cluster', '                elif score == happiest_score:', '                    if digit_sum > sum_of_digits(happiest_score):', '                        happiest_score = score', '                        happiest_vowel_cluster = vowel_cluster', '                    elif digit_sum == sum_of_digits(happiest_score) and score > happiest_score:', '                        happiest_score = score', '                        happiest_vowel_cluster = vowel_cluster', '', '    return {happiest_vowel_cluster: happiest_score} if happiest_score != 0 else {0: 0}'], ['def findHappinestNumber(input):', '    def is_prime(n):', '        if n < 2:', '            return False', '        for i in range(2, int(n ** 0.5) + 1):', '            if n % i == 0:', '                return False', '        return True', '', '    def is_happy(n):', '        def sum_of_squares(n):', '            return sum(int(i) ** 2 for i in str(n))', '', '        seen = set()', '        while True:', '            n = sum_of_squares(n)', '            if n == 1:', '                return True', '            elif n in seen:', '                return False', '            seen.add(n)', '', '    def sum_of_digits(n):', '        return sum(int(i) for i in str(n))', '', '    def is_happiest(n):', '        if not is_happy(n):', '            return False', '        s = sum_of_digits(n)', '        return s & (s - 1) == 0', '', '    def happiest_number(lst):', '        happy_numbers = [n for n in lst if is_happy(n)]', '        happiest_numbers = [n for n in happy_numbers if is_happiest(n)]', '        if not happiest_numbers:', '            return 0', '        return max(happiest_numbers)', '', '    result = {}', '    for vowel_cluster in input:', '        score = sum(ord(c) for c in vowel_cluster)', '        if is_prime(score) and is_happy(score):', '            result[vowel_cluster] = score', '    if not result:', '        return {input[0]: 0}', '    happiest_score = happiest_number(result.values())', '    for k, v in result.items():', '        if v == happiest_score:', '            return {k: v}'], ['', 'def is_happy(num):', '    def get_digits(n):', '        return [int(d) for d in str(n)]', '', '    def sum_of_squares(digits):', '        return sum(d ** 2 for d in digits)', '', '    seen = set()', '    while num not in seen:', '        seen.add(num)', '        digits = get_digits(num)', '        num = sum_of_squares(digits)', '    return num == 1', '', 'def is_prime(num):', '    if num < 2:', '        return False', '    for i in range(2, int(num ** 0.5) + 1):', '        if num % i == 0:', '            return False', '    return True', '', 'def findHappinestNumber(vowel_clusters):', '    def is_happy_prime(num):', '        return is_happy(num) and is_prime(num)', '', '    def sum_of_digits(num):', '        return sum(int(d) for d in str(num))', '', '    def is_power_of_two(num):', '        return num != 0 and (num & (num - 1) == 0)', '', '    max_sum = -1', '    happiest = 0', '    for cluster in vowel_clusters:', '        score = sum(ord(c) for c in cluster)', '        if is_happy_prime(score):', '            digit_sum = sum_of_digits(score)', '            if digit_sum > max_sum:', '                max_sum = digit_sum', '                happiest = score', '            elif digit_sum == max_sum and score > happiest:', '                happiest = score', '    return {"{0}".format(cluster): happiest} if happiest > 0 else {"0": 0}', ''], ['', 'def findHappinestNumber(input: list) -> dict:', '    def is_prime(number):', '        if number < 2:', '            return False', '        for i in range(2, int(number ** 0.5) + 1):', '            if number % i == 0:', '                return False', '        return True', '', '    def is_happy(number):', '        def sum_of_digits(num):', '            return sum(int(digit) ** 2 for digit in str(num))', '', '        seen_numbers = set()', '        while number != 1 and number not in seen_numbers:', '            seen_numbers.add(number)', '            number = sum_of_digits(number)', '        return number == 1', '', '    def is_happiest(number):', '        def sum_of_digits(num):', '            return sum(int(digit) for digit in str(num))', '', '        if not is_happy(number):', '            return False', '        digit_sum = sum_of_digits(number)', '        return digit_sum & (digit_sum - 1) == 0 and digit_sum != 0', '', '    happiest_score = 0', '    happiest_vowel_cluster = ""', '    for vowel_cluster in input:', '        score = sum(ord(char) for char in vowel_cluster)', '        if is_happiest(score) and score > happiest_score:', '            happiest_score = score', '            happiest_vowel_cluster = vowel_cluster', '    return {happiest_vowel_cluster: happiest_score} if happiest_vowel_cluster else {str(0): 0}', ''], ['', 'def findHappinestNumber(input):', '    def is_prime(num):', '        if num < 2:', '            return False', '        for i in range(2, int(num ** 0.5) + 1):', '            if num % i == 0:', '                return False', '        return True', '    ', '    def is_happy(num):', '        def square_sum(num):', '            return sum(int(i) ** 2 for i in str(num))', '        ', '        seen = set()', '        while num != 1 and num not in seen:', '            seen.add(num)', '            num = square_sum(num)', '        return num == 1', '        ', '    def is_happiest(num):', '        def digit_sum(num):', '            return sum(int(i) for i in str(num))', '        ', '        if is_happy(num):', '            return digit_sum(num)', '        return 0', '    ', '    happiest = 0', '    result = {}', '    for cluster in input:', '        score = sum(ord(c) for c in cluster)', '        if is_happiest(score) > happiest:', '            happiest = is_happiest(score)', '            result = {cluster: score}', '        elif is_happiest(score) == happiest and is_prime(score):', '            happiest = is_happiest(score)', '            result[cluster] = score', '    return result', ''], ['def findHappinestNumber(input):', '    def is_prime(n):', '        if n < 2:', '            return False', '        for i in range(2, int(n**0.5)+1):', '            if n % i == 0:', '                return False', '        return True', '    ', '    def is_happy(n):', '        def sum_of_squares(n):', '            return sum(int(i)**2 for i in str(n))', '', '        seen = set()', '        while n != 1 and n not in seen:', '            seen.add(n)', '            n = sum_of_squares(n)', '        return n == 1', '', '    def is_happiest(n):', '        if not is_happy(n):', '            return False', '        digits_sum = sum(int(i) for i in str(n))', '        base_2_exponent = 0', '        while 2**base_2_exponent <= digits_sum:', '            if 2**base_2_exponent == digits_sum:', '                return True', '            base_2_exponent += 1', '        return False', '', '    def calculate_happiness_score(vowel_cluster):', '        return sum(ord(c) for c in vowel_cluster)', '', '    happiest_score = 0', '    happiest_vowel_cluster = ""', '    for vowel_cluster in input:', '        happiness_score = calculate_happiness_score(vowel_cluster)', '        if is_happiest(happiness_score):', '            if happiness_score > happiest_score:', '                happiest_score = happiness_score', '                happiest_vowel_cluster = vowel_cluster', '            elif happiness_score == happiest_score and happiness_score != 0:', '                if int(vowel_cluster) > int(happiest_vowel_cluster):', '                    happiest_vowel_cluster = vowel_cluster', '        elif happiest_score == 0:', '            happiest_vowel_cluster = 0', '', '    return {happiest_vowel_cluster: happiest_score}'], ['', 'def is_happy_number(num):', '    def sum_of_digits(n):', '        s = 0', '        while n:', '            s += n % 10', '            n //= 10', '        return s', '    def is_prime(n):', '        if n < 2:', '            return False', '        for i in range(2, int(n**0.5)+1):', '            if n % i == 0:', '                return False', '        return True', '    def is_power_of_2(n):', '        return n and not (n & (n - 1))', '', '    def is_happy(n):', '        seen = set()', '        while n not in seen:', '            seen.add(n)', '            n = sum_of_digits(n)', '        return n == 1', '', '    if is_happy(num) and is_prime(num) and is_power_of_2(sum_of_digits(num)):', '        return True', '    else:', '        return False', '', 'def findHappinestNumber(input):', '    def sum_of_digits(n):', '        s = 0', '        while n:', '            s += n % 10', '            n //= 10', '        return s', '    def is_prime(n):', '        if n < 2:', '            return False', '        for i in range(2, int(n**0.5)+1):', '            if n % i == 0:', '                return False', '        return True', '    def is_power_of_2(n):', '        return n and not (n & (n - 1))', '', '    def is_happy(n):', '        seen = set()', '        while n not in seen:', '            seen.add(n)', '            n = sum_of_digits(n)', '        return n == 1', '', '    scores = {}', '    for cluster in input:', '        score = sum(ord(c) for c in cluster)', '        if is_happy_number(score):', '            if score in scores:', '                if sum_of_digits(score) > sum_of_digits(scores[score]):', '                    scores[score] = cluster', '            else:', '                scores[score] = cluster', '', '    if not scores:', '        return { "0": 0 }', '    else:', '        happiest = max(scores, key=lambda x: (sum_of_digits(x), x), default=0)', '        return { scores[happiest]: happiest }', ''], ['def is_prime(n: int) -> bool:', '    if n < 2:', '        return False', '    for i in range(2, int(n ** 0.5) + 1):', '        if n % i == 0:', '            return False', '    return True', '', 'def sum_of_digits(n: int) -> int:', '    return sum(int(digit) for digit in str(n))', '', 'def findHappinestNumber(input: List[str]) -> Dict[str, int]:', '    happiest_score = 0', '    happiest_number = 0', '    for vowel_cluster in input:', '        score = sum(ord(char) for char in vowel_cluster)', '        if is_prime(score):', '            digit_sum = sum_of_digits(score)', '            if 2 ** digit_sum == score:', '                if digit_sum > happiest_number:', '                    happiest_number = digit_sum', '                    happiest_score = score', '                elif digit_sum == happiest_number and score > happiest_score:', '                    happiest_score = score', '    return {vowel_cluster: happiest_score for vowel_cluster in input}'], ['def is_prime(n: int) -> bool:', '    if n <= 1:', '        return False', '    elif n <= 3:', '        return True', '    elif n % 2 == 0 or n % 3 == 0:', '        return False', '    i = 5', '    while i * i <= n:', '        if n % i == 0 or n % (i + 2) == 0:', '            return False', '        i += 6', '    return True', '', '', 'def sum_of_digits(n: int) -> int:', '    return sum(int(digit) for digit in str(n))', '', '', 'def is_happy_number(n: int) -> bool:', '    seen = set()', '    while n != 1:', '        n = sum_of_digits(n)', '        if n in seen:', '            return False', '        seen.add(n)', '    return True', '', '', 'def find_happiest_number(vowel_clusters: List[str]) -> Dict[str, int]:', '    happiest_number = 0', '    happiest_score = 0', '    for cluster in vowel_clusters:', '        score = sum(ord(char) for char in cluster)', '        if is_happy_number(score) and is_prime(score):', '            sum_of_digits_score = sum_of_digits(score)', '            if sum_of_digits_score > happiest_score:', '                happiest_number = score', '                happiest_score = sum_of_digits_score', '            elif sum_of_digits_score == happiest_score and score > happiest_number:', '                happiest_number = score', '    return {cluster: happiest_number for cluster in vowel_clusters}'], ['def findHappinestNumber(input):', '    def is_prime(n):', '        if n <= 1:', '            return False', '        for i in range(2, int(n ** 0.5) + 1):', '            if n % i == 0:', '                return False', '        return True', '', '    def is_happy(n):', '        def sum_of_squares(n):', '            return sum(int(digit) ** 2 for digit in str(n))', '', '        seen = set()', '        while n != 1 and n not in seen:', '            seen.add(n)', '            n = sum_of_squares(n)', '        return n == 1', '', '    def is_happiest(n):', '        if not is_happy(n):', '            return False', '        digits_sum = sum(int(digit) for digit in str(n))', '        return digits_sum > 0 and (digits_sum & (digits_sum - 1) == 0)', '', '    def happiness_score(vowel_cluster):', '        return sum(ord(char) for char in vowel_cluster)', '', '    happiest_score = 0', '    happiest_vowel_cluster = ""', '    for vowel_cluster in input:', '        score = happiness_score(vowel_cluster)', '        if is_happiest(score):', '            if score > happiest_score:', '                happiest_score = score', '                happiest_vowel_cluster = vowel_cluster', '            elif score == happiest_score and score > 0 and score > int(happiest_vowel_cluster):', '                happiest_vowel_cluster = vowel_cluster', '    return {happiest_vowel_cluster: happiest_score}'], ['def is_happy(num):', '    if num == 1:', '        return True', '    if num == 4:', '        return False', '    return is_happy(sum(int(i)**2 for i in str(num)))', '', 'def is_prime(num):', '    if num < 2:', '        return False', '    for i in range(2, int(num**0.5) + 1):', '        if num % i == 0:', '            return False', '    return True', '', 'def is_power_of_two(num):', '    return num != 0 and ((num & (num - 1)) == 0)', '', 'def calculate_happiness_score(vowel_cluster):', '    return sum(ord(c) for c in vowel_cluster)', '', 'def findHappinestNumber(input):', '    happiest_score = 0', '    happiest_number = ""', '    for vowel_cluster in input:', '        happiness_score = calculate_happiness_score(vowel_cluster)', '        if is_happy(happiness_score) and is_prime(happiness_score) and is_power_of_two(sum(int(i) for i in str(happiness_score))):', '            if happiness_score > happiest_score:', '                happiest_score = happiness_score', '                happiest_number = vowel_cluster', '            elif happiness_score == happiest_score and vowel_cluster > happiest_number:', '                happiest_number = vowel_cluster', '    return {happiest_number: happiest_score}'], ['def findHappinestNumber(input):', '    def is_prime(n):', '        if n < 2:', '            return False', '        for i in range(2, int(n ** 0.5) + 1):', '            if n % i == 0:', '                return False', '        return True', '', '    def is_happy(n):', '        def get_next(n):', '            return sum(int(i) ** 2 for i in str(n))', '', '        seen = set()', '        while n != 1 and n not in seen:', '            seen.add(n)', '            n = get_next(n)', '        return n == 1', '', '    def is_happiest(n):', '        def get_sum(n):', '            return sum(int(i) for i in str(n))', '', '        if not is_happy(n):', '            return False', '        s = get_sum(n)', '        while s > 1:', '            if s % 2 != 0:', '                return False', '            s //= 2', '        return True', '', '    def get_happiest(n_list):', '        happiest = 0', '        happiest_score = 0', '        for n in n_list:', '            if is_happiest(n):', '                score = sum(ord(c) for c in n)', '                if score > happiest_score:', '                    happiest = n', '                    happiest_score = score', '        return {happiest: happiest_score} if happiest_score > 0 else {0: 0}', '', '    return get_happiest(input)'], ['', 'def is_happy_number(n: int) -> bool:', '    def sum_of_squares(n: int) -> int:', '        return sum(int(digit)**2 for digit in str(n))', '', '    seen = set()', '    while n != 1:', '        n = sum_of_squares(n)', '        if n in seen:', '            return False', '        seen.add(n)', '    return True', '', 'def is_prime(n: int) -> bool:', '    if n <= 1:', '        return False', '    for i in range(2, int(n ** 0.5) + 1):', '        if n % i == 0:', '            return False', '    return True', '', 'def findHappinestNumber(vowel_clusters: List[str]) -> Dict[str, int]:', '    def is_happy_and_sum_of_digits_is_power_of_two(n: int) -> bool:', '        if not is_happy_number(n):', '            return False', '        digit_sum = sum(int(digit) for digit in str(n))', '        return digit_sum > 0 and (digit_sum & (digit_sum - 1)) == 0', '', '    def digit_sum(n: int) -> int:', '        return sum(int(digit) for digit in str(n))', '', '    def is_happier(n: int, happiest: int) -> bool:', '        if digit_sum(n) > digit_sum(happiest):', '            return True', '        if digit_sum(n) < digit_sum(happiest):', '            return False', '        return n > happiest', '', '    happiest = 0', '    happiest_cluster = ""', '    for cluster in vowel_clusters:', '        score = sum(ord(vowel) for vowel in cluster)', '        if is_happy_and_sum_of_digits_is_power_of_two(score) and is_prime(score):', '            if is_happier(score, happiest):', '                happiest = score', '                happiest_cluster = cluster', '    return {happiest_cluster: happiest}', ''], ['def is_happy_number(num):', '    def sum_of_squares(n):', '        return sum(int(digit)**2 for digit in str(n))', '    seen = set()', '    while num not in seen:', '        seen.add(num)', '        num = sum_of_squares(num)', '    return num == 1', '', 'def is_prime(num):', '    if num < 2:', '        return False', '    for i in range(2, int(num**0.5)+1):', '        if num % i == 0:', '            return False', '    return True', '', 'def is_happiest_number(num):', '    if not is_happy_number(num):', '        return False', '    digit_sum = sum(int(digit) for digit in str(num))', "    return bin(digit_sum).count('1') == 1", '', 'def findHappinestNumber(input):', '    happiest_score = 0', '    happiest_cluster = ""', '    for cluster in input:', '        score = sum(ord(char) for char in cluster)', '        if is_happiest_number(score) and score > happiest_score:', '            happiest_score = score', '            happiest_cluster = cluster', '        elif is_happy_number(score) and score > happiest_score and not is_happiest_number(score):', '            happiest_score = score', '            happiest_cluster = cluster', '    return {happiest_cluster: happiest_score} if happiest_score > 0 else {happiest_cluster: 0}'], ['def findHappinestNumber(input):', '    def is_happy_number(num):', '        def sum_of_squares_of_digits(n):', '            s = 0', '            while n:', '                s += (n % 10) ** 2', '                n //= 10', '            return s', '', '        seen = set()', '        while num != 1 and num not in seen:', '            seen.add(num)', '            num = sum_of_squares_of_digits(num)', '        return num == 1', '', '    def is_prime(num):', '        if num < 2:', '            return False', '        for i in range(2, int(num ** 0.5) + 1):', '            if num % i == 0:', '                return False', '        return True', '', '    def is_happy_prime(num):', '        if not is_happy_number(num) or not is_prime(num):', '            return False', '        digit_sum = sum(int(d) for d in str(num))', '        return digit_sum == 2 ** (digit_sum.bit_length() - 1)', '', '    happiest_score = 0', '    happiest_cluster = ""', '    for cluster in input:', '        cluster_score = sum(ord(c) for c in cluster)', '        if is_happy_prime(cluster_score):', '            if cluster_score > happiest_score:', '                happiest_score = cluster_score', '                happiest_cluster = cluster', '            elif cluster_score == happiest_score and cluster_score > int(happiest_cluster):', '                happiest_cluster = cluster', '', '    return {happiest_cluster: happiest_score} if happiest_score else {0: 0}'], ['def is_happy_number(num):', '    def sum_of_digits(n):', '        return sum(int(digit) for digit in str(n))', '', '    def is_prime(n):', '        if n < 2:', '            return False', '        for i in range(2, int(n ** 0.5) + 1):', '            if n % i == 0:', '                return False', '        return True', '', '    def is_power_of_two(n):', '        return n != 0 and not (n & (n - 1))', '', '    while True:', '        num = sum_of_digits(num)', '        if is_power_of_two(num) and is_prime(num):', '            return num', '        if num == 4:', '            return 0', '', '', 'def find_happiest_number(input_list):', '    happiest_score = -1', '    happiest_number = None', '    for vowel_cluster in input_list:', '        score = sum(ord(c) for c in vowel_cluster)', '        if is_happy_number(score) and score > happiest_score:', '            happiest_score = score', '            happiest_number = vowel_cluster', '    if happiest_number is None:', '        return {}', '    else:', '        return {happiest_number: happiest_score}'], ['def is_happy_number(number):', '    def sum_of_squares(number):', '        res = 0', '        while number:', '            res += (number % 10) ** 2', '            number //= 10', '        return res', '    ', '    seen = set()', '    while number != 1 and number not in seen:', '        seen.add(number)', '        number = sum_of_squares(number)', '    return number == 1', '', 'def is_prime(number):', '    if number < 2:', '        return False', '    for i in range(2, int(number ** 0.5) + 1):', '        if number % i == 0:', '            return False', '    return True', '', 'def findHappinestNumber(input):', '    def sum_of_digits(number):', '        res = 0', '        while number:', '            res += number % 10', '            number //= 10', '        return res', '    ', '    happiest_score = 0', '    happiest_cluster = ""', '    for cluster in input:', '        score = sum(ord(char) for char in cluster)', '        if is_happy_number(score) and is_prime(score):', '            if sum_of_digits(score) == 2 ** (score.bit_length() - 1):', '                if score > happiest_score:', '                    happiest_score = score', '                    happiest_cluster = cluster', '                elif score == happiest_score and cluster > happiest_cluster:', '                    happiest_cluster = cluster', '    return {happiest_cluster: happiest_score} if happiest_score else {happiest_cluster: 0}'], ['def is_happy_number(n):', '    def sum_of_squares_of_digits(n):', '        return sum(int(d)**2 for d in str(n))', '', '    seen = set()', '    while n not in seen:', '        seen.add(n)', '        n = sum_of_squares_of_digits(n)', '    return 1 in seen', '', 'def findHappinestNumber(input):', '    def is_prime(n):', '        if n < 2:', '            return False', '        for i in range(2, int(n ** 0.5) + 1):', '            if n % i == 0:', '                return False', '        return True', '', '    def is_power_of_two(n):', '        return n > 0 and (n & (n - 1)) == 0', '', '    def sum_of_digits(n):', '        return sum(int(d) for d in str(n))', '', '    result = {}', '    max_sum = -1', '    max_happy_number = -1', '', '    for cluster in input:', '        happiness_score = sum(ord(c) for c in cluster)', '        if is_happy_number(happiness_score):', '            if is_prime(happiness_score) and is_power_of_two(sum_of_digits(happiness_score)):', '                if sum_of_digits(happiness_score) > max_sum:', '                    max_sum = sum_of_digits(happiness_score)', '                    max_happy_number = happiness_score', '                elif sum_of_digits(happiness_score) == max_sum:', '                    max_happy_number = max(max_happy_number, happiness_score)', '        else:', '            max_happy_number = max(max_happy_number, 0)', '        result[cluster] = max_happy_number', '    return result'], ['def is_happy_number(n):', '    def sum_of_squares_of_digits(n):', '        return sum(int(digit)**2 for digit in str(n))', '    seen = set()', '    while n != 1 and n not in seen:', '        seen.add(n)', '        n = sum_of_squares_of_digits(n)', '    return n == 1', '', 'def is_prime(n):', '    if n < 2:', '        return False', '    for i in range(2, int(n**0.5) + 1):', '        if n % i == 0:', '            return False', '    return True', '', 'def find_happinest_number(input):', '    def sum_of_digits(n):', '        return sum(int(digit) for digit in str(n))', '    happiest_score = 0', '    happiest_number = 0', '    for vowel_cluster in input:', '        score = sum(ord(char) for char in vowel_cluster)', '        if is_happy_number(score) and is_prime(score):', '            if sum_of_digits(score) == 2**int(math.log2(sum_of_digits(score))):', '                if score > happiest_score:', '                    happiest_score = score', '                    happiest_number = vowel_cluster', '    return {happiest_number: happiest_score}'], ['def findHappinestNumber(input):', '    def is_prime(n):', '        if n < 2:', '            return False', '        for i in range(2, int(n ** 0.5) + 1):', '            if n % i == 0:', '                return False', '        return True', '', '    def is_happy(n):', '        def sum_digits(n):', '            return sum(int(digit) ** 2 for digit in str(n))', '', '        seen = set()', '        while n != 1 and n not in seen:', '            seen.add(n)', '            n = sum_digits(n)', '        return n == 1', '', '    def is_happiest(n):', '        def sum_digits(n):', '            return sum(int(digit) for digit in str(n))', '', '        power = 0', '        while 2 ** power < n:', '            happy_sum = sum_digits(n)', '            if happy_sum == 2 ** power and is_prime(n):', '                return True', '            power += 1', '        return False', '', '    happiest_score = 0', '    happiest_cluster = ""', '    for cluster in input:', '        score = sum(ord(c) for c in cluster)', '        if is_happiest(score):', '            if score > happiest_score:', '                happiest_score = score', '                happiest_cluster = cluster', '            elif score == happiest_score and int(cluster) > int(happiest_cluster):', '                happiest_cluster = cluster', '    return {happiest_cluster: happiest_score} if happiest_score != 0 else {0: 0}'], ['', 'from math import log2', '', 'def is_prime(n):', '    if n <= 1:', '        return False', '    for i in range(2, int(n**0.5)+1):', '        if n % i == 0:', '            return False', '    return True', '', 'def sum_of_digits(n):', '    return sum(int(i) for i in str(n))', '', 'def is_happy_number(n):', '    while n != 1 and n != 4:', '        n = sum_of_digits(n)', '    return n == 1', '', 'def findHappinestNumber(input):', '    happiest_score = 0', '    happiest_vowel_cluster = ""', '    for cluster in input:', '        score = sum(ord(c) for c in cluster)', '        if is_happy_number(score) and is_prime(score):', '            if sum_of_digits(score) == 2**int(log2(sum_of_digits(score))):', '                if score > happiest_score:', '                    happiest_score = score', '                    happiest_vowel_cluster = cluster', '            else:', '                continue', '        else:', '            continue', '    return {happiest_vowel_cluster: happiest_score} if happiest_score != 0 else {0: 0}', ''], ['def findHappinestNumber(input):', '    def is_prime(n):', '        if n <= 1:', '            return False', '        for i in range(2, int(n ** 0.5) + 1):', '            if n % i == 0:', '                return False', '        return True', '', '    def is_happy(n):', '        def sum_digits(n):', '            return sum(int(digit) ** 2 for digit in str(n))', '', '        seen = set()', '        while n not in seen:', '            seen.add(n)', '            n = sum_digits(n)', '        return n == 1', '', '    def is_happiest(n):', '        def sum_digits(n):', '            return sum(int(digit) for digit in str(n))', '', '        if not is_happy(n):', '            return False', '        s = sum_digits(n)', '        return s & (s - 1) == 0', '', '    happiest_score = 0', '    happiest_cluster = ""', '    for cluster in input:', '        score = sum(ord(c) for c in cluster)', '        if is_happiest(score):', '            if score > happiest_score:', '                happiest_score = score', '                happiest_cluster = cluster', '            elif score == happiest_score and int(cluster) > int(happiest_cluster):', '                happiest_cluster = cluster', '    return {happiest_cluster: happiest_score} if happiest_score != 0 else {0: 0}'], ['def is_happy_number(n):', '    def sum_of_digits_squared(n):', '        return sum(int(digit)**2 for digit in str(n))', '    seen_numbers = set()', '    while n != 1 and n not in seen_numbers:', '        seen_numbers.add(n)', '        n = sum_of_digits_squared(n)', '    return n == 1', '', 'def find_happiest_number(input_list):', '    def sum_of_digits(n):', '        return sum(int(digit) for digit in str(n))', '    happiest_score = 0', '    happiest_number = 0', '    for vowel_cluster in input_list:', '        score = sum(ord(char) for char in vowel_cluster)', '        if is_happy_number(score):', '            digit_sum = sum_of_digits(score)', '            if digit_sum == 2**int(math.log2(digit_sum)):', '                if score > happiest_score:', '                    happiest_score = score', '                    happiest_number = vowel_cluster', '    return {happiest_number: happiest_score}'], ['def findHappinestNumber(input):', '    def is_prime(n):', '        if n < 2:', '            return False', '        for i in range(2, int(n ** 0.5) + 1):', '            if n % i == 0:', '                return False', '        return True', '', '    def is_happy(n):', '        visited = set()', '        while n != 1:', '            n = sum(int(i) ** 2 for i in str(n))', '            if n in visited:', '                return False', '            visited.add(n)', '        return True', '', '    def is_happiest(n):', '        if not is_happy(n):', '            return False', '        digit_sum = sum(int(i) for i in str(n))', '        if digit_sum == 0:', '            return False', '        binary_sum = sum(int(i) for i in bin(digit_sum)[2:])', '        return binary_sum == 1', '', '    def get_happiest(lst):', '        happiest_score = 0', '        happiest_cluster = ""', '        for cluster in lst:', '            score = sum(ord(c) for c in cluster)', '            if is_happiest(score):', '                if score > happiest_score:', '                    happiest_score = score', '                    happiest_cluster = cluster', '                elif score == happiest_score and int(cluster) > int(happiest_cluster):', '                    happiest_cluster = cluster', '        if happiest_score == 0:', '            return {happiest_cluster: 0}', '        else:', '            return {happiest_cluster: happiest_score}', '', '    return get_happiest(input)'], ['def findHappinestNumber(input):', '    def is_happy(num):', '        def sum_of_squares(num):', '            return sum(int(digit)**2 for digit in str(num))', '        seen = set()', '        while num not in seen:', '            seen.add(num)', '            num = sum_of_squares(num)', '        return num == 1', '', '    def is_prime(num):', '        if num < 2:', '            return False', '        for i in range(2, int(num**0.5)+1):', '            if num % i == 0:', '                return False', '        return True', '', '    def is_happy_number(num):', '        if num < 1:', '            return False', '        while num != 1 and num != 4:', '            num = sum(int(i)**2 for i in str(num))', '        return num == 1', '', '    def get_sum_of_digits(num):', '        return sum(int(digit) for digit in str(num))', '', '    def is_happiest_number(num):', '        if not is_happy_number(num):', '            return False', '        sum_of_digits = get_sum_of_digits(num)', '        if sum_of_digits == 0:', '            return False', '        binary_sum = bin(sum_of_digits)[2:]', "        return binary_sum.count('1') == 1", '', '    def get_vowel_clusters_score(vowel_clusters):', '        scores = {}', '        for cluster in vowel_clusters:', '            score = sum(ord(char) for char in cluster)', '            if is_happy_number(score):', '                if is_happiest_number(score):', '                    scores[cluster] = score', '        if not scores:', "            scores['<vowel_cluster'] = 0", '        else:', '            happiest_score = max(scores.values())', '            happiest_clusters = [k for k, v in scores.items() if v == happiest_score]', '            scores = {cluster: happiest_score for cluster in happiest_clusters}', '        return scores', '', '    return get_vowel_clusters_score(input)'], ['', 'from math import log2, sqrt', '', 'def is_happy_number(n: int) -> bool:', '    def sum_of_digits(n: int) -> int:', '        return sum(int(d) for d in str(n))', '', '    def is_prime(n: int) -> bool:', '        if n < 2:', '            return False', '        for i in range(2, int(sqrt(n))+1):', '            if n % i == 0:', '                return False', '        return True', '', '    if n < 1:', '        return False', '    while n != 1 and n != 4:', '        n = sum_of_digits(n)', '    return n == 1 or n == 4 and is_prime(n)', '', 'def findHappinestNumber(input: List[str]) -> Dict[str, int]:', '    def sum_of_ascii(s: str) -> int:', '        return sum(ord(c) for c in s)', '', '    def sum_of_digits(n: int) -> int:', '        return sum(int(d) for d in str(n))', '', '    def is_happiest(hn: int, hs: int, n: int, s: int) -> bool:', '        if hs < s:', '            return True', '        elif hs > s:', '            return False', '        elif hn < n:', '            return False', '        else:', '            return True', '', '    happiest = 0', '    result = {}', '    for cluster in input:', '        s = sum_of_ascii(cluster)', '        if is_happy_number(s):', '            if is_happiest(0, 0, int(s), sum_of_digits(s)):', '                happiest = s', '                result = {cluster: s}', '        elif happiest == 0:', '            result = {cluster: 0}', '', '    return result', ''], ['', 'def findHappinestNumber(input):', '    def isPrime(num):', '        if num < 2:', '            return False', '        for i in range(2, int(num ** 0.5) + 1):', '            if num % i == 0:', '                return False', '        return True', '    ', '    def isHappy(num):', '        def getSum(n):', '            s = 0', '            while n > 0:', '                s += (n % 10) ** 2', '                n //= 10', '            return s', '        slow = num', '        fast = getSum(num)', '        while fast != 1 and slow != fast:', '            slow = getSum(slow)', '            fast = getSum(getSum(fast))', '        return fast == 1', '    ', '    def getHappiest(numList):', '        happiest = 0', '        happiestScore = 0', '        for num in numList:', '            if isHappy(num) and isPrime(num):', '                score = sum(ord(c) for c in num)', '                digitSum = sum(int(d) for d in str(score) if d.isdigit())', '                if digitSum & (digitSum - 1) == 0 and score > happiestScore:', '                    happiest = num', '                    happiestScore = score', '        return {happiest: happiestScore} if happiestScore > 0 else {0: 0}', '    ', '    return getHappiest(input)', ''], ['', 'def is_happy_number(n):', '    def sum_of_digit(n):', '        s = 0', '        while n:', '            s += (n % 10) ** 2', '            n //= 10', '        return s', '', '    seen = set()', '    while n != 1 and n not in seen:', '        seen.add(n)', '        n = sum_of_digit(n)', '', '    return n == 1', '', 'def is_happy_score(n):', '    digits = str(n)', '    base_2 = bin(sum(int(d) for d in digits))[2:]', "    return base_2.count('1') == 1", '', 'def findHappinestNumber(input):', '    happiest_score = 0', '    happiest_cluster = ""', '    for cluster in input:', '        score = sum(ord(c) for c in cluster)', '        if is_happy_number(score) and is_happy_score(score):', '            if score > happiest_score:', '                happiest_score = score', '                happiest_cluster = cluster', '            elif score == happiest_score and cluster > happiest_cluster:', '                happiest_cluster = cluster', '    return {happiest_cluster: happiest_score}', ''], ['def is_prime(n: int) -> bool:', '    if n < 2:', '        return False', '    for i in range(2, int(n ** 0.5) + 1):', '        if n % i == 0:', '            return False', '    return True', '', 'def is_happy(n: int) -> bool:', '    if n == 1:', '        return True', '    elif n == 4:', '        return False', '    else:', '        return is_happy(sum(int(i) ** 2 for i in str(n)))', '', 'def findHappinestNumber(input: List[str]) -> Dict[str, int]:', '    def sum_digits(n: int) -> int:', '        return sum(int(i) for i in str(n))', '', '    def is_power_of_two(n: int) -> bool:', '        return n != 0 and (n & (n - 1)) == 0', '', '    def is_happy_number(n: int) -> bool:', '        return is_prime(n) and is_power_of_two(sum_digits(n))', '', '    def get_happiness_score(vowel_cluster: str) -> int:', '        return sum(ord(c) for c in vowel_cluster)', '', '    happy_numbers = [n for n in range(2, 1000) if is_happy_number(n)]', '    happiest_number = max(happy_numbers, key=lambda n: (sum_digits(n), n))', '', '    happiest_vowel_cluster = ""', '    happiest_score = 0', '    for vowel_cluster in input:', '        score = get_happiness_score(vowel_cluster)', '        if score == happiest_number and happiest_score < score:', '            happiest_vowel_cluster = vowel_cluster', '            happiest_score = score', '', '    return {happiest_vowel_cluster: happiest_score} if happiest_vowel_cluster else {happiest_vowel_cluster: 0}'], ['', 'def isHappy(n: int) -> bool:', '    def getSum(n: int) -> int:', '        s = 0', '        while n > 0:', '            s += (n % 10) ** 2', '            n //= 10', '        return s', '    seen = set()', '    while n != 1 and n not in seen:', '        seen.add(n)', '        n = getSum(n)', '    return n == 1', '', 'def isPrime(n: int) -> bool:', '    if n < 2:', '        return False', '    for i in range(2, int(n ** 0.5) + 1):', '        if n % i == 0:', '            return False', '    return True', '', 'def findHappinestNumber(input: List[str]) -> dict:', '    def getScore(s: str) -> int:', '        return sum(ord(c) for c in s)', '    def isPowerOfTwo(n: int) -> bool:', '        return n and not (n & (n - 1))', '    def getSumOfDigits(n: int) -> int:', '        return sum(int(c) for c in str(n))', '    def isHappyPrime(n: int) -> bool:', '        return isHappy(n) and isPrime(n) and isPowerOfTwo(getSumOfDigits(n))', '    scores = {s: getScore(s) for s in input}', '    happiest = 0', '    happiestScore = 0', '    for s, score in scores.items():', '        if isHappyPrime(score):', '            if score > happiestScore:', '                happiest = s', '                happiestScore = score', '            elif score == happiestScore and s > happiest:', '                happiest = s', '    return {happiest: happiestScore} if happiest else {0: 0}', ''], ['def findHappinestNumber(input):', '    def is_happy(num):', '        def sum_of_digits(n):', '            return sum(int(digit) ** 2 for digit in str(n))', '', '        seen = set()', '        while num not in seen:', '            seen.add(num)', '            num = sum_of_digits(num)', '        return num == 1', '', '    def is_prime(n):', '        if n < 2:', '            return False', '        for i in range(2, int(n ** 0.5) + 1):', '            if n % i == 0:', '                return False', '        return True', '', '    def is_happy_and_prime(num):', '        return is_happy(num) and is_prime(num)', '', '    def is_happiest(num, current_happiest):', '        if num > current_happiest:', '            return True', '        elif num == current_happiest:', '            return False', '        else:', '            return False', '', '    happiest_score = 0', '    happiest_cluster = ""', '    for cluster in input:', '        score = sum(ord(char) for char in cluster)', '        if is_happy_and_prime(score) and is_happiest(score, happiest_score):', '            happiest_score = score', '            happiest_cluster = cluster', '', '    return {happiest_cluster: happiest_score} if happiest_score != 0 else {0: 0}'], ['def is_happy(num):', '    def sum_of_digits(n):', '        return sum(int(d) for d in str(n))', '', '    def is_prime(n):', '        if n < 2:', '            return False', '        for i in range(2, int(n ** 0.5) + 1):', '            if n % i == 0:', '                return False', '        return True', '', '    while num != 1 and num != 4:', '        num = sum_of_digits(num)', '    return num == 1 or (num == 4 and is_prime(num) and sum_of_digits(num) == 2)', '', '', 'def find_happiest_number(input):', '    def sum_of_digits(n):', '        return sum(int(d) for d in str(n))', '', '    def is_power_of_two(n):', '        return n != 0 and (n & (n - 1)) == 0', '', '    def get_happiness_score(vowel_cluster):', '        return sum(ord(c) for c in vowel_cluster)', '', '    happiest_score = 0', '    happiest_num = 0', '    for vowel_cluster in input:', '        happiness_score = get_happiness_score(vowel_cluster)', '        if is_happy(happiness_score):', '            if happiness_score > happiest_score:', '                happiest_score = happiness_score', '                happiest_num = happiness_score', '            elif happiness_score == happiest_score:', '                happiest_num = max(happiest_num, happiness_score)', '    return {vowel_cluster: happiest_num for vowel_cluster in input}'], ['', 'def is_happy_number(n:int)->bool:', '    def sum_of_digits(n:int)->int:', '        s = 0', '        while n:', '            s += n % 10', '            n //= 10', '        return s', '        ', '    def is_prime(n:int)->bool:', '        if n < 2:', '            return False', '        for i in range(2, int(n**0.5)+1):', '            if n % i == 0:', '                return False', '        return True', '        ', '    def is_power_of_two(n:int)->bool:', '        if n < 1:', '            return False', '        while n > 1:', '            if n % 2 != 0:', '                return False', '            n //= 2', '        return True', '        ', '    if not is_prime(n):', '        return False', '    return is_power_of_two(sum_of_digits(n))', '    ', 'def findHappinestNumber(input:List[str])->Dict[str,Union[int,str]]:', '    def get_score(s:str)->int:', '        return sum(ord(c) for c in s)', '    ', '    def is_happiest_number(n:int)->bool:', '        if not is_happy_number(n):', '            return False', '        digit_sum = sum(int(d) for d in str(n))', '        for i in range(n+1, 100000):', '            if is_happy_number(i) and sum(int(d) for d in str(i)) == digit_sum:', '                return False', '        return True', '    ', '    scores = {}', '    max_score = 0', '    for s in input:', '        score = get_score(s)', '        if is_happiest_number(score):', '            if score > max_score:', '                scores = {s: score}', '                max_score = score', '            elif score == max_score:', '                scores[s] = score', '    if not scores:', '        return {"0": 0}', '    return scores', ''], ['', 'def is_happy(n):', '    """', '    Check if a number is happy or not', '    """', '    def sum_of_squares(n):', '        """', '        Calculate the sum of squares of digits in a number', '        """', '        return sum(int(d)**2 for d in str(n))', '    ', '    seen = set()', '    while n not in seen:', '        seen.add(n)', '        n = sum_of_squares(n)', '    return n == 1', '', 'def is_prime(n):', '    """', '    Check if a number is prime or not', '    """', '    if n < 2:', '        return False', '    for i in range(2, int(n**0.5)+1):', '        if n % i == 0:', '            return False', '    return True', '', 'def findHappinestNumber(input):', '    """', '    Find the happiest number and its corresponding vowel cluster from a list of vowel clusters', '    """', '    happiest_score = 0', '    happiest_number = 0', '    for cluster in input:', '        score = sum(ord(c) for c in cluster)', '        if is_happy(score) and (not happiest_number or score > happiest_score or (score == happiest_score and score > happiest_number)) and is_prime(score):', '            happiest_score = score', '            happiest_number = cluster', '    return {happiest_number: happiest_score}', ''], ['def is_prime(n: int) -> bool:', '    if n <= 1:', '        return False', '    for i in range(2, int(n ** 0.5) + 1):', '        if n % i == 0:', '            return False', '    return True', '', '', 'def is_happy(n: int) -> bool:', '    seen = set()', '    while n != 1 and n not in seen:', '        seen.add(n)', '        n = sum(int(digit) ** 2 for digit in str(n))', '    return n == 1', '', '', 'def is_happiest(n: int) -> bool:', '    if not is_happy(n):', '        return False', '    digit_sum = sum(int(digit) for digit in str(n))', '    return digit_sum == 2 ** int(digit_sum.bit_length() - 1)', '', '', 'def findHappinestNumber(input: List[str]) -> Dict[str, int]:', '    happiest = 0', '    happiest_cluster = ""', '    for cluster in input:', '        score = sum(ord(char) for char in cluster)', '        if is_happiest(score) and score > happiest:', '            happiest = score', '            happiest_cluster = cluster', '    return {happiest_cluster: happiest}'], ['def is_happy_number(n):', '    if n == 1:', '        return True', '    if n == 4:', '        return False', '', '    next_n = 0', '    for digit in str(n):', '        next_n += int(digit) ** 2', '    return is_happy_number(next_n)', '', 'def findHappinestNumber(input):', '    happiest_score = 0', '    happiest_vowel_cluster = ""', '', '    for vowel_cluster in input:', '        vowel_cluster_score = sum(ord(c) for c in vowel_cluster)', '', '        if is_happy_number(vowel_cluster_score):', '            if vowel_cluster_score > happiest_score:', '                happiest_score = vowel_cluster_score', '                happiest_vowel_cluster = vowel_cluster', '            elif vowel_cluster_score == happiest_score and vowel_cluster > happiest_vowel_cluster:', '                happiest_vowel_cluster = vowel_cluster', '', '    return {happiest_vowel_cluster: happiest_score} if happiest_vowel_cluster else {0: 0}'], ['', 'def is_happy_number(num):', '    def sum_of_digits(n):', '        return sum(int(digit) ** 2 for digit in str(n))', '', '    seen = set()', '    while num not in seen:', '        seen.add(num)', '        num = sum_of_digits(num)', '    return num == 1', '', 'def findHappinestNumber(vowel_clusters: List[str]) -> Dict[str, int]:', '    def sum_of_digits(num: int) -> int:', '        return sum(map(int, str(num)))', '', '    def is_prime(num: int) -> bool:', '        if num <= 1:', '            return False', '        for i in range(2, int(num ** 0.5) + 1):', '            if num % i == 0:', '                return False', '        return True', '', '    def is_happy_number_power_of_2(num: int) -> bool:', '        if num == 1:', '            return True', '        s = sum_of_digits(num)', '        if s == 2:', '            return True', '        if s % 2 == 0:', '            return False', '        return is_happy_number_power_of_2(s)', '', '    happiest_score = 0', '    happiest_vowel_cluster = ""', '    for vowel_cluster in vowel_clusters:', '        score = sum(ord(c) for c in vowel_cluster)', '        if is_prime(score) and is_happy_number_power_of_2(score):', '            if score > happiest_score:', '                happiest_score = score', '                happiest_vowel_cluster = vowel_cluster', '            elif score == happiest_score and score > 0 and score > sum_of_digits(happiest_score):', '                happiest_score = score', '                happiest_vowel_cluster = vowel_cluster', '    return {happiest_vowel_cluster: happiest_score}', ''], ['', 'def is_happy(num):', '    def get_digits(n):', '        digits = []', '        while n > 0:', '            digits.append(n % 10)', '            n //= 10', '        return digits', '', '    def is_prime(n):', '        if n < 2:', '            return False', '        for i in range(2, int(n ** 0.5) + 1):', '            if n % i == 0:', '                return False', '        return True', '', '    def is_power_of_two(n):', '        return n != 0 and (n & (n - 1)) == 0', '', '    if not is_prime(num):', '        return False', '', '    digits_sum = sum(get_digits(num))', '    if not is_power_of_two(digits_sum):', '        return False', '', '    return True', '', 'def findHappinestNumber(input):', '    def get_happiness_score(cluster):', '        return sum(ord(c) for c in cluster)', '', '    happy_numbers = []', '    for cluster in input:', '        happiness_score = get_happiness_score(cluster)', '        if is_happy(happiness_score):', '            happy_numbers.append((cluster, happiness_score))', '', '    if not happy_numbers:', '        return {"0": 0}', '', '    happiest_number = max(happy_numbers, key=lambda x: (sum(int(d) for d in str(x[1])), x[1]))', '    return {happiest_number[0]: happiest_number[1]}', ''], ['', 'def is_happy_number(num):', '    def sum_of_digits(n):', '        return sum(int(i) for i in str(n))', '', '    def is_prime(n):', '        if n < 2:', '            return False', '        for i in range(2, int(n ** 0.5) + 1):', '            if n % i == 0:', '                return False', '        return True', '', '    def is_power_of_two(n):', '        return n > 0 and (n & (n - 1)) == 0', '', '    seen = set()', '    while num not in seen:', '        seen.add(num)', '        num = sum_of_digits(num)', '    return num == 1 and is_prime(sum_of_digits(num)) and is_power_of_two(sum_of_digits(num))', '', '', 'def findHappinestNumber(input):', '    def sum_of_digits(n):', '        return sum(int(i) for i in str(n))', '', '    def is_happiest_number(n):', '        return is_happy_number(n) and (not happiest_number or sum_of_digits(n) > sum_of_digits(happiest_number) or (sum_of_digits(n) == sum_of_digits(happiest_number) and n > happiest_number))', '', '    happiest_number = 0', '    for vowel_cluster in input:', '        happiness_score = sum(ord(c) for c in vowel_cluster)', '        if is_happiest_number(happiness_score):', '            happiest_number = happiness_score', '    return {vowel_cluster: happiest_number for vowel_cluster in input}', '']]
Attempting to implement {'findHappinestNumber'}
Killing subprocesses
Successfully implemented {'findHappinestNumber'}
Total: 64 completions!
[['', 'from typing import Dict, List', '', 'def calculateLargestHappiestScore(input: List[str]) -> Dict[str, int]:', '    vowels = []', '    for word in input:', '        vowels += getListOfVowelClusters(word)', '    happiest_dict = findHappinestNumber(vowels)', '    return happiest_dict', ''], ['', 'from typing import List, Tuple', '', 'def calculateLargestHappiestScore(input: List[str]) -> Dict[str, int]:', '    vowel_clusters = []', '    for string in input:', '        vowel_clusters += getListOfVowelClusters(string)', '    happiness_scores = {}', '    for cluster in vowel_clusters:', '        result = findHappinestNumber(cluster)', '        if result["<vowel_cluster"] not in happiness_scores or result["<happiest_score"] > happiness_scores[result["<vowel_cluster"]]:', '            happiness_scores[result["<vowel_cluster"]] = result["<happiest_score"]', '    return happiness_scores', ''], ['', '', 'def calculateLargestHappiestScore(input):', '    clusters = getListOfVowelClusters(input)', '    largest_happiest_score = 0', '    happiest_cluster = ""', '    for cluster in clusters:', '        score_dict = findHappinestNumber(cluster)', '        score = score_dict[cluster]', '        if score > largest_happiest_score:', '            largest_happiest_score = score', '            happiest_cluster = cluster', '    return {happiest_cluster: largest_happiest_score}', ''], ['', 'from typing import Dict, List, Tuple', '', 'def calculateLargestHappiestScore(input: List[str]) -> Dict[str, int]:', '    max_score = 0', '    max_cluster = ""', '', '    for perm in input:', '        clusters = getListOfVowelClusters(perm)', '        for cluster in clusters:', '            score_dict = findHappinestNumber(cluster)', '            score = score_dict.get(cluster, 0)', '            if score > max_score:', '                max_score = score', '                max_cluster = cluster', '', '    return {max_cluster: max_score}', ''], ['def calculateLargestHappiestScore(input):', '    ', '    vowel_clusters = getListOfVowelClusters(input)', '    happiest_dict = findHappinestNumber(vowel_clusters)', '    ', '    max_score = 0', '    max_cluster = ""', '    for cluster, score in happiest_dict.items():', '        if score > max_score:', '            max_score = score', '            max_cluster = cluster', '    ', '    return {max_cluster: max_score}'], ['', 'from typing import Dict, List', '', 'def calculateLargestHappiestScore(input: List[str]) -> Dict[str, int]:', '    vowel_clusters = []', '    for word in input:', '        vowel_clusters += getListOfVowelClusters(word)', '    happiest_dict = findHappinestNumber(vowel_clusters)', '    return happiest_dict', ''], ['', 'from typing import Dict, List', '', 'def calculateLargestHappiestScore(input: List[str]) -> Dict[str, int]:', '    vowel_clusters = []', '    for i in input:', '        vowel_clusters += getListOfVowelClusters(i)', '    happiest_score_dict = findHappinestNumber(vowel_clusters)', '    return {happiest_score_dict["vowel_cluster"]: happiest_score_dict["happiest_score"]}', ''], ['', 'from typing import Dict, List', '', 'def calculateLargestHappiestScore(input: List[str]) -> Dict[str, int]:', '    vowel_clusters = []', '    for string in input:', '        vowel_clusters += getListOfVowelClusters(string)', '    happiest_scores = {}', '    for cluster in vowel_clusters:', '        score_dict = findHappinestNumber(cluster)', '        if score_dict["Happiest_score"] > happiest_scores.get(score_dict["vowel_cluster"], 0):', '            happiest_scores[score_dict["vowel_cluster"]] = score_dict["Happiest_score"]', '    return happiest_scores', ''], ['def calculateLargestHappiestScore(input):', '    ', '    max_score = 0', '    max_cluster = ""', '    vowel_clusters = getListOfVowelClusters(input)', '    ', '    for cluster in vowel_clusters:', '        score_dict = findHappinestNumber(cluster)', '        score = score_dict[list(score_dict.keys())[0]]', '        if score > max_score:', '            max_score = score', '            max_cluster = list(score_dict.keys())[0]', '    ', '    return {max_cluster: max_score}'], ['', 'from typing import List, Dict', '', 'def calculateLargestHappiestScore(input: List[str]) -> Dict[str, int]:', '    vowel_clusters = []', '    for word in input:', '        vowel_clusters += getListOfVowelClusters(word)', '    happiest_dict = findHappinestNumber(vowel_clusters)', '    return happiest_dict', ''], ['', 'from typing import Dict, List', '', 'def calculateLargestHappiestScore(input: List[str]) -> Dict[str, int]:', '    largest_happiness_score = 0', '    largest_happiness_score_vowel_cluster = ""', '    ', '    for permutation in input:', '        vowel_clusters = getListOfVowelClusters(permutation)', '        happiest_score_dict = findHappinestNumber(vowel_clusters)', '        ', '        for vowel_cluster, happiest_score in happiest_score_dict.items():', '            if happiest_score > largest_happiness_score:', '                largest_happiness_score = happiest_score', '                largest_happiness_score_vowel_cluster = vowel_cluster', '    ', '    return {largest_happiness_score_vowel_cluster: largest_happiness_score}', ''], ['', 'from typing import List, Dict', '', 'def calculateLargestHappiestScore(input: List[str]) -> Dict[str, int]:', '    max_score = 0', '    max_cluster = ""', '    for perm in input:', '        clusters = getListOfVowelClusters(perm)', '        for cluster in clusters:', '            score_dict = findHappinestNumber(cluster)', '            if score_dict[cluster] > max_score:', '                max_score = score_dict[cluster]', '                max_cluster = cluster', '    return {max_cluster: max_score}', ''], ['from typing import List, Tuple', '', 'def calculateLargestHappiestScore(input: List[str]) -> Tuple[str, int]:', '    vowel_clusters = []', '    for string in input:', '        vowel_clusters += getListOfVowelClusters(string)', '    happiest_dict = findHappinestNumber(vowel_clusters)', '    return max(happiest_dict.items(), key=lambda x: x[1])'], ['from typing import Dict, List', '', 'def calculateLargestHappiestScore(input: List[str]) -> Dict[str, int]:', '    largest_happiest_score = 0', '    largest_happiest_cluster = ""', '    for perm in input:', '        clusters = getListOfVowelClusters(perm)', '        for cluster in clusters:', '            result = findHappinestNumber(cluster)', '            if result["<happiest_score>"] > largest_happiest_score:', '                largest_happiest_score = result["<happiest_score>"]', '                largest_happiest_cluster = result["<vowel_cluster>"]', '    return {largest_happiest_cluster: largest_happiest_score}'], ['def calculateLargestHappiestScore(input):', '    ', '    vowel_clusters = getListOfVowelClusters(input)', '    scores = {}', '    ', '    for cluster in vowel_clusters:', '        score = findHappinestNumber([cluster])[cluster]', '        if score > 0:', '            if score not in scores.keys() or len(cluster) > len(scores[score]):', '                scores[score] = cluster', '    ', '    if len(scores) == 0:', '        return {"<vowel_cluster": 0}', '    ', '    max_score = max(scores.keys())', '    return {scores[max_score]: max_score}'], ['', 'from typing import List, Dict', '', 'def calculateLargestHappiestScore(input: List[str]) -> Dict[str, int]:', '    vowel_clusters = []', '    for string in input:', '        vowel_clusters += getListOfVowelClusters(string)', '    happiest_dict = findHappinestNumber(vowel_clusters)', "    return {happiest_dict['cluster']: happiest_dict['happiness_score']}", ''], ['', 'from typing import List, Dict', '', 'def calculateLargestHappiestScore(input: List[str]) -> Dict[str, int]:', '    vowel_clusters = []', '    for string in input:', '        vowel_clusters += getListOfVowelClusters(string)', '    happiest_dict = findHappinestNumber(vowel_clusters)', '    return happiest_dict', ''], ['', 'from typing import Dict, List', '', 'def calculateLargestHappiestScore(input: List[str]) -> Dict[str, int]:', '    happiest_score_dict = {}', '    for perm in input:', '        vowel_clusters = getListOfVowelClusters(perm)', '        for cluster in vowel_clusters:', '            happiest_dict = findHappinestNumber(cluster)', '            if happiest_dict["Happiest score"] > happiest_score_dict.get(cluster, 0):', '                happiest_score_dict[cluster] = happiest_dict["Happiest score"]', '    return happiest_score_dict', ''], ['def calculateLargestHappiestScore(input):', '    ', '    vowel_clusters = getListOfVowelClusters(input)', '    happiest_dict = findHappinestNumber(vowel_clusters)', '    ', '    largest_happiest_score = 0', '    largest_happiest_vowel_cluster = ""', '    ', '    for key, value in happiest_dict.items():', '        if value > largest_happiest_score:', '            largest_happiest_score = value', '            largest_happiest_vowel_cluster = key', '    ', '    return {largest_happiest_vowel_cluster: largest_happiest_score}'], ['def calculateLargestHappiestScore(input):', '    ', '    max_score = 0', '    max_cluster = ""', '    ', '    clusters = getListOfVowelClusters(input)', '    ', '    for cluster in clusters:', '        result = findHappinestNumber(cluster)', '        score = result[cluster]', '        if score > max_score:', '            max_score = score', '            max_cluster = cluster', '    ', '    return {max_cluster: max_score}'], ['def calculateLargestHappiestScore(input):', '    ', '    vowel_clusters = getListOfVowelClusters(input)', '    happiest_score_dict = {}', '    for cluster in vowel_clusters:', '        happiest_score_dict[cluster] = findHappinestNumber(cluster)[cluster]', '    ', '    largest_score = 0', '    largest_vowel_cluster = ""', '    for cluster, score in happiest_score_dict.items():', '        if score > largest_score:', '            largest_score = score', '            largest_vowel_cluster = cluster', '    ', '    return {largest_vowel_cluster: largest_score}'], ['', 'from typing import List, Dict', '', 'def calculateLargestHappiestScore(input: List[str]) -> Dict[str, int]:', '    max_score = 0', '    max_cluster = ""', '    for permutation in input:', '        vowel_clusters = getListOfVowelClusters(permutation)', '        for cluster in vowel_clusters:', '            result = findHappinestNumber(cluster)', '            if result["<happiest_score>"] > max_score:', '                max_score = result["<happiest_score>"]', '                max_cluster = result["<vowel_cluster>"]', '    return {max_cluster: max_score}', ''], ['', 'from typing import List, Dict', '', 'def calculateLargestHappiestScore(input: List[str]) -> Dict[str, int]:', '    vowel_clusters = []', '    for s in input:', '        vowel_clusters += getListOfVowelClusters(s)', '    happiest_dict = findHappinestNumber(vowel_clusters)', '    largest_score = 0', "    largest_cluster = ''", '    for k, v in happiest_dict.items():', '        if v > largest_score:', '            largest_score = v', '            largest_cluster = k', '    return {largest_cluster: largest_score}', ''], ['', 'from typing import List, Tuple', '', 'def calculateLargestHappiestScore(input: List[str]) -> Tuple[str, int]:', '    vowel_clusters = []', '    for string in input:', '        vowel_clusters += getListOfVowelClusters(string)', '    happiest_dict = findHappinestNumber(vowel_clusters)', '    return max(happiest_dict.items(), key=lambda x: x[1])', ''], ['def calculateLargestHappiestScore(input):', '    ', '    vowel_clusters = getListOfVowelClusters(input)', '    happiest_dict = findHappinestNumber(vowel_clusters)', '    happiest_score = happiest_dict.values()[0]', '    happiest_vowel_cluster = happiest_dict.keys()[0]', '    ', '    for cluster in vowel_clusters:', '        score = findHappinestNumber([cluster]).values()[0]', '        if score > happiest_score:', '            happiest_score = score', '            happiest_vowel_cluster = cluster', '    ', '    return {happiest_vowel_cluster: happiest_score}'], ['def calculateLargestHappiestScore(input):', '    ', '    vowel_clusters = getListOfVowelClusters(input)', '    happiest_score_dict = {}', '    ', '    for cluster in vowel_clusters:', '        happiest_score_dict[cluster] = findHappinestNumber(cluster)[cluster]', '    ', '    largest_happiest_score = max(happiest_score_dict.values())', '    largest_happiest_cluster = [k for k, v in happiest_score_dict.items() if v == largest_happiest_score][0]', '    ', '    return {largest_happiest_cluster: largest_happiest_score}'], ['', 'from typing import List, Tuple, Dict', '', 'def calculateLargestHappiestScore(input: List[str]) -> Dict[str, int]:', '    vowel_clusters = []', '    for s in input:', '        vowel_clusters += getListOfVowelClusters(s)', '    happiest_dict = findHappinestNumber(vowel_clusters)', '    return {happiest_dict["vowel_cluster"]: happiest_dict["happiest_score"]}', ''], ['', 'from typing import Dict, List', '', 'def calculateLargestHappiestScore(input: List[str]) -> Dict[str, int]:', '    largest_happiest_score = 0', '    largest_happiest_vowel_cluster = ""', '    for permutation in input:', '        vowel_clusters = getListOfVowelClusters(permutation)', '        happiest_score_dict = findHappinestNumber(vowel_clusters)', '        for vowel_cluster, happiest_score in happiest_score_dict.items():', '            if happiest_score > largest_happiest_score:', '                largest_happiest_score = happiest_score', '                largest_happiest_vowel_cluster = vowel_cluster', '    return {largest_happiest_vowel_cluster: largest_happiest_score}', ''], ['', 'from typing import Dict, List, Tuple', '', 'def calculateLargestHappiestScore(input: List[str]) -> Dict[str, int]:', '    vowel_clusters = []', '    for word in input:', '        vowel_clusters += getListOfVowelClusters(word)', '    happiness_scores = {}', '    for cluster in vowel_clusters:', '        happiest_score, _ = findHappinestNumber(cluster)', '        happiness_scores[cluster] = happiest_score', '    largest_happiest_score = max(happiness_scores.values())', '    largest_clusters = [cluster for cluster, score in happiness_scores.items() if score == largest_happiest_score]', '    return {cluster: largest_happiest_score for cluster in largest_clusters}', ''], ['def calculateLargestHappiestScore(input):', '    ', '    vowel_clusters = getListOfVowelClusters(input)', '    happiest_dict = {}', '    for cluster in vowel_clusters:', '        happiest_dict[cluster] = findHappinestNumber(cluster)[cluster]', '    ', '    largest_happiest_score = max(happiest_dict.values())', '    largest_happiest_cluster = [k for k, v in happiest_dict.items() if v == largest_happiest_score][0]', '    ', '    return {largest_happiest_cluster: largest_happiest_score}'], ['', 'from typing import List, Tuple', '', 'def calculateLargestHappiestScore(input: List[str]) -> Tuple[str, int]:', '    vowel_clusters = []', '    for word in input:', '        vowel_clusters += getListOfVowelClusters(word)', '    happiest_dict = findHappinestNumber(vowel_clusters)', '    return max(happiest_dict.items(), key=lambda x: x[1])', ''], ['def calculateLargestHappiestScore(input):', '    ', '    vowel_clusters = getListOfVowelClusters(input)', '    max_happiness_score = 0', '    max_happiness_cluster = ""', '    ', '    for cluster in vowel_clusters:', '        happiness_dict = findHappinestNumber(cluster)', '        happiness_score = happiness_dict[cluster]', '        if happiness_score > max_happiness_score:', '            max_happiness_score = happiness_score', '            max_happiness_cluster = cluster', '    ', '    return {max_happiness_cluster: max_happiness_score}'], ['', '', 'def calculateLargestHappiestScore(input: list) -> dict:', "    clusters = getListOfVowelClusters(''.join(input))", '    happiest_dict = findHappinestNumber(clusters)', '    return happiest_dict', ''], ['', 'from typing import List', '', 'def calculateLargestHappiestScore(input: List[str]) -> dict:', '    vowel_clusters = []', '    for word in input:', '        vowel_clusters += getListOfVowelClusters(word)', '    happiest_dict = findHappinestNumber(vowel_clusters)', '    return happiest_dict', ''], ['', '', 'def calculateLargestHappiestScore(input):', '    vowel_clusters = getListOfVowelClusters(input)', '    happiest_dict = findHappinestNumber(vowel_clusters)', '    largest_score = 0', '    largest_cluster = ""', '    for cluster in happiest_dict:', '        score = happiest_dict[cluster]', '        if score > largest_score:', '            largest_score = score', '            largest_cluster = cluster', '    return {largest_cluster: largest_score}', ''], ['', 'from typing import Dict, List', '', 'def calculateLargestHappiestScore(input: List[str]) -> Dict[str, int]:', '    vowel_clusters = []', '    for permutation in input:', '        vowel_clusters += getListOfVowelClusters(permutation)', '    happiest_score_dict = findHappinestNumber(vowel_clusters)', '    return happiest_score_dict', ''], ['', 'from typing import Dict, List', '', 'def calculateLargestHappiestScore(input: List[str]) -> Dict[str, int]:', '    vowel_clusters = []', '    for string in input:', '        vowel_clusters += getListOfVowelClusters(string)', '    happiest_dict = findHappinestNumber(vowel_clusters)', '    max_happiness = 0', '    max_happiness_cluster = ""', '    for cluster, happiness in happiest_dict.items():', '        if happiness > max_happiness:', '            max_happiness = happiness', '            max_happiness_cluster = cluster', '    return {max_happiness_cluster: max_happiness}', ''], ['', '', 'def calculateLargestHappiestScore(input):', '    vowel_clusters = getListOfVowelClusters(input)', '    max_happiness = 0', '    max_cluster = ""', '    ', '    for cluster in vowel_clusters:', '        happiness = findHappinestNumber(cluster)["happiest_score"]', '        if happiness > max_happiness:', '            max_happiness = happiness', '            max_cluster = cluster', '    ', '    return {max_cluster: max_happiness}', ''], ['def calculateLargestHappiestScore(input):', '    ', '    vowel_clusters = getListOfVowelClusters(input)', '    happiness_scores = {}', '    ', '    for cluster in vowel_clusters:', '        score_dict = findHappinestNumber(cluster)', '        if score_dict["<vowel_cluster"] not in happiness_scores or happiness_scores[score_dict["<vowel_cluster"]] < score_dict["<happiest_score>"]:', '            happiness_scores[score_dict["<vowel_cluster"]] = score_dict["<happiest_score>"]', '    ', '    return {max(happiness_scores, key=happiness_scores.get): happiness_scores[max(happiness_scores, key=happiness_scores.get)]}'], ['def calculateLargestHappiestScore(input):', '    ', '    vowel_clusters = getListOfVowelClusters(input)', '    max_score = 0', '    max_vowel_cluster = ""', '    ', '    for cluster in vowel_clusters:', '        score_dict = findHappinestNumber(cluster)', '        score = score_dict[cluster]', '        if score > max_score:', '            max_score = score', '            max_vowel_cluster = cluster', '    ', '    return {max_vowel_cluster: max_score}'], ['def calculateLargestHappiestScore(input):', '    ', '    vowel_clusters = getListOfVowelClusters(input)', '    max_score = 0', '    max_cluster = ""', '    ', '    for cluster in vowel_clusters:', '        score_dict = findHappinestNumber(cluster)', '        for k, v in score_dict.items():', '            if v > max_score:', '                max_score = v', '                max_cluster = k', '    ', '    return {max_cluster: max_score}'], ['', '', 'def calculateLargestHappiestScore(input: list) -> dict:', '    vowel_clusters = getListOfVowelClusters("".join(input))', '    happiest_dict = findHappinestNumber(vowel_clusters)', '    return {happiest_dict["<vowel_cluster"]: happiest_dict["<happiest_score>"]}', ''], ['def calculateLargestHappiestScore(input):', '    ', '    vowel_clusters = getListOfVowelClusters(input)', '    max_happy_score = 0', '    max_happy_cluster = ""', '    for cluster in vowel_clusters:', '        happy_dict = findHappinestNumber(cluster)', '        if happy_dict[cluster] > max_happy_score:', '            max_happy_score = happy_dict[cluster]', '            max_happy_cluster = cluster', '    ', '    return {max_happy_cluster: max_happy_score}'], ['from typing import List, Dict', '', 'def calculateLargestHappiestScore(input: List[str]) -> Dict[str, int]:', '    max_score = 0', '    max_cluster = ""', '    for perm in input:', '        vowel_clusters = getListOfVowelClusters(perm)', '        happiest_dict = findHappinestNumber(vowel_clusters)', '        happiest_score = happiest_dict[happiest_dict.keys()[0]]', '        if happiest_score > max_score:', '            max_score = happiest_score', '            max_cluster = happiest_dict.keys()[0]', '    return {max_cluster: max_score}'], ['def calculateLargestHappiestScore(input):', '    ', '    clusters = getListOfVowelClusters(input)', '    max_happy_score = 0', '    max_cluster = ""', '    for cluster in clusters:', '        result = findHappinestNumber(cluster)', '        if result[cluster] > max_happy_score:', '            max_happy_score = result[cluster]', '            max_cluster = cluster', '    ', '    return {max_cluster: max_happy_score}'], ['', '', 'def calculateLargestHappiestScore(input):', '    clusters = getListOfVowelClusters(input)', '    max_score = 0', '    max_cluster = ""', '    for cluster in clusters:', '        score = findHappinestNumber(cluster)[cluster]', '        if score > max_score:', '            max_score = score', '            max_cluster = cluster', '    return {max_cluster: max_score}', ''], ['def calculateLargestHappiestScore(input):', '    ', '    vowel_clusters = getListOfVowelClusters(input)', '    max_score = 0', '    max_cluster = ""', '    ', '    for cluster in vowel_clusters:', '        score_dict = findHappinestNumber(cluster)', '        if score_dict[cluster] > max_score:', '            max_score = score_dict[cluster]', '            max_cluster = cluster', '            ', '    return {max_cluster: max_score}'], ['', 'from typing import List', '', 'def calculateLargestHappiestScore(input: List[str]) -> dict:', '    vowel_clusters = []', '    for string in input:', '        vowel_clusters += getListOfVowelClusters(string)', '    happiest_dict = findHappinestNumber(vowel_clusters)', '    return happiest_dict', ''], ['def calculateLargestHappiestScore(input):', '    ', '    clusters = getListOfVowelClusters(input)', '    max_score = 0', '    max_cluster = ""', '    ', '    for cluster in clusters:', '        happiest = findHappinestNumber(cluster)', '        if happiest[cluster] > max_score:', '            max_score = happiest[cluster]', '            max_cluster = cluster', '    ', '    return {max_cluster: max_score}'], ['def calculateLargestHappiestScore(input):', '    ', '    vowel_clusters = getListOfVowelClusters(input)', '    happiest_dict = findHappinestNumber(vowel_clusters)', '    ', '    largest_score = 0', '    largest_cluster = ""', '    for cluster, score in happiest_dict.items():', '        if score > largest_score:', '            largest_score = score', '            largest_cluster = cluster', '    ', '    return {largest_cluster: largest_score}'], ['', 'from typing import Dict, List, Tuple', '', 'def calculateLargestHappiestScore(input: List[str]) -> Dict[str, int]:', '    vowel_clusters = []', '    for word in input:', '        vowel_clusters.extend(getListOfVowelClusters(word))', '    happiest_dict = findHappinestNumber(vowel_clusters)', '    return happiest_dict', ''], ['def calculateLargestHappiestScore(input):', '    vowel_clusters = getListOfVowelClusters(input)', '    max_happiest_score = 0', '    max_happiest_vowel_cluster = ""', '    for vowel_cluster in vowel_clusters:', '        happiest_dict = findHappinestNumber(vowel_cluster)', '        happiest_score = happiest_dict[vowel_cluster]', '        if happiest_score > max_happiest_score:', '            max_happiest_score = happiest_score', '            max_happiest_vowel_cluster = vowel_cluster', '    return {max_happiest_vowel_cluster: max_happiest_score}'], ['', 'from typing import List, Tuple', '', 'def calculateLargestHappiestScore(input: List[str]) -> Tuple[str, int]:', '    vowel_clusters = []', '    for string in input:', '        vowel_clusters.extend(getListOfVowelClusters(string))', '    happiest_dict = findHappinestNumber(vowel_clusters)', '    return max(happiest_dict.items(), key=lambda x:x[1])', ''], ['', 'from typing import List, Dict', '', 'def calculateLargestHappiestScore(input: List[str]) -> Dict[str, int]:', '    vowel_clusters = []', '    for word in input:', '        vowel_clusters += getListOfVowelClusters(word)', '    happiest_scores = {}', '    for cluster in vowel_clusters:', '        happiest_scores[cluster] = findHappinestNumber(cluster)["<happiest_score>"]', '    max_happiest_score = max(happiest_scores.values(), default=0)', '    return {k: v for k, v in happiest_scores.items() if v == max_happiest_score}', ''], ['', 'from typing import List, Dict', '', 'def calculateLargestHappiestScore(input: List[str]) -> Dict[str, int]:', '    max_score = 0', '    max_cluster = ""', '    for perm in input:', '        clusters = getListOfVowelClusters(perm)', '        for cluster in clusters:', '            score_dict = findHappinestNumber(cluster)', '            if score_dict[cluster] > max_score:', '                max_score = score_dict[cluster]', '                max_cluster = cluster', '    return {max_cluster: max_score}', ''], ['def calculateLargestHappiestScore(input):', '', '    vowel_clusters = getListOfVowelClusters(input)', '    happiest_dict = findHappinestNumber(vowel_clusters)', '    largest_happiest_score = 0', '    largest_vowel_cluster = ""', '    for cluster, score in happiest_dict.items():', '        if score > largest_happiest_score:', '            largest_happiest_score = score', '            largest_vowel_cluster = cluster', '    return {largest_vowel_cluster: largest_happiest_score}'], ['def calculateLargestHappiestScore(input):', '    ', '    vowel_clusters = getListOfVowelClusters(input)', '    largest_happiest_score = 0', '    largest_happiest_cluster = ""', '    ', '    for cluster in vowel_clusters:', '        happiness_score = findHappinestNumber(cluster)[cluster]', '        if happiness_score > largest_happiest_score:', '            largest_happiest_score = happiness_score', '            largest_happiest_cluster = cluster', '    ', '    return {largest_happiest_cluster: largest_happiest_score}'], ['def calculateLargestHappiestScore(input):', '    ', '    vowel_clusters = getListOfVowelClusters(input)', '    max_score = 0', '    max_cluster = ""', '    ', '    for cluster in vowel_clusters:', '        score_dict = findHappinestNumber(cluster)', '        happiest_score = score_dict[cluster]', '        if happiest_score > max_score:', '            max_score = happiest_score', '            max_cluster = cluster', '    ', '    return {max_cluster: max_score}'], ['', 'def calculateLargestHappiestScore(input):', '    clusters = getListOfVowelClusters(input)', '    results = {}', '    for cluster in clusters:', '        score = findHappinestNumber(cluster)', "        if score['<vowel_cluster'] not in results or results[score['<vowel_cluster']] < score['<happiest_score>']:", "            results[score['<vowel_cluster']] = score['<happiest_score>']", '    return results'], ['', 'from typing import Dict, List', '', 'def calculateLargestHappiestScore(input: List[str]) -> Dict[str, int]:', '    vowel_clusters = []', '    for string in input:', '        vowel_clusters += getListOfVowelClusters(string)', '    happiest_dict = findHappinestNumber(vowel_clusters)', '    return happiest_dict', ''], ['', 'from typing import List, Dict', '', 'def calculateLargestHappiestScore(input: List[str]) -> Dict[str, int]:', '    largest_happiness_score = 0', '    largest_happiness_cluster = ""', '    ', '    for perm in input:', '        vowel_clusters = getListOfVowelClusters(perm)', '        happiest_number = findHappinestNumber(vowel_clusters)', '        if happiest_number["<vowel_cluster"] not in largest_happiness_cluster:', '            if happiest_number["<happiest_score"] > largest_happiness_score:', '                largest_happiness_score = happiest_number["<happiest_score"]', '                largest_happiness_cluster = happiest_number["<vowel_cluster"]', '    ', '    return {largest_happiness_cluster: largest_happiness_score}', ''], ['', 'from typing import Dict, List', '', 'def calculateLargestHappiestScore(input: List[str]) -> Dict[str, int]:', '    vowel_clusters = []', '    for s in input:', '        vowel_clusters.extend(getListOfVowelClusters(s))', '    happiest_dict = findHappinestNumber(vowel_clusters)', "    return {happiest_dict['vowel_cluster']: happiest_dict['happiest_score']}", ''], ['def calculateLargestHappiestScore(input):', '    ', '    max_score = 0', '    max_cluster = ""', '    clusters = getListOfVowelClusters(input)', '    ', '    for cluster in clusters:', '        score_dict = findHappinestNumber(cluster)', '        if score_dict[cluster] > max_score:', '            max_score = score_dict[cluster]', '            max_cluster = cluster', '    ', '    return {max_cluster: max_score}'], ['', 'from typing import List, Dict', '', 'def calculateLargestHappiestScore(input: List[str]) -> Dict[str, int]:', '    max_score = 0', '    max_score_cluster = ""', '    for cluster in input:', '        score_dict = findHappinestNumber(getListOfVowelClusters(cluster))', '        if score_dict[cluster] > max_score:', '            max_score = score_dict[cluster]', '            max_score_cluster = cluster', '    return {max_score_cluster: max_score}', '']]
Attempting to implement {'calculateLargestHappiestScore'}
Killing subprocesses
Successfully implemented {'calculateLargestHappiestScore'}
Implementing SCC 3 {'getListOfVowelClusters'}
Implementing SCC 4 {'findHappinestNumber'}
Total: 64 completions!
[['from typing import List, Tuple', '', 'def is_happy_number(n: int) -> bool:', '    def sum_of_digits(n: int) -> int:', '        s = 0', '        while n > 0:', '            s += n % 10', '            n //= 10', '        return s', '    def is_power_of_2(n: int) -> bool:', '        return n > 0 and (n & (n-1)) == 0', '    return is_power_of_2(sum_of_digits(n))', '', 'def maximizeHappiestScore(input: str) -> str:', "    vowels = set('aeiouAEIOU')", '    max_score = -1', '    max_vowel_cluster = ""', '    for perm in permute(input):', '        for i in range(len(perm)-1):', '            if perm[i] in vowels and perm[i+1] in vowels:', '                score = ord(perm[i]) + ord(perm[i+1])', '                if score > max_score:', '                    max_score = score', '                    max_vowel_cluster = perm[i:i+2]', '    if not max_vowel_cluster:', '        return f"Happiest String: - Happiest Score: 0 (Unhappy)"', '    happy_scores = calculateLargestHappiestScore(permute(max_vowel_cluster))', '    if not happy_scores:', '        return f"Happiest String: {max_vowel_cluster} - Happiest Score: {max_score} (Unhappy)"', '    happiest_score = max(happy_scores.values())', '    happiest_clusters = [k for k, v in happy_scores.items() if v == happiest_score]', '    happiest_cluster = sorted(happiest_clusters, key=lambda c: (-len(c), -sum(ord(ch) for ch in c), -ord(c[0])))[0]', '    status = "Happy" if is_happy_number(happiest_score) else "Unhappy"', '    return f"Happiest String: {happiest_cluster} - Happiest Score: {happiest_score} ({status})"'], ['', 'from typing import List, Tuple', '', 'def maximizeHappiestScore(input: str) -> str:', '    def is_happy(n: int) -> bool:', '        def sum_of_digits(n: int) -> int:', '            return sum(int(d) for d in str(n))', '', '        def is_power_of_2(n: int) -> bool:', '            return n & (n - 1) == 0 and n != 0', '', '        while n != 1 and n != 4:', '            n = sum_of_digits(n)', '        return n == 1', '', '    def happiest_score(vowel_cluster: str) -> int:', '        return sum(ord(c) for c in vowel_cluster)', '', '    def is_vowel(c: str) -> bool:', '        return c in "aeiouAEIOU"', '', '    def find_happiest_string(permutations: List[str]) -> Tuple[str, int, str]:', '        max_score = -1', '        happiest_string = ""', '        status = "Unhappy"', '        for perm in permutations:', '            for i in range(len(perm)):', '                if not is_vowel(perm[i]):', '                    continue', '                for j in range(i + 1, len(perm) + 1):', '                    if j == len(perm) or not is_vowel(perm[j]):', '                        score = happiest_score(perm[i:j])', '                        if score > max_score and is_happy(score):', '                            max_score = score', '                            happiest_string = perm[i:j]', '                            status = "Happy"', '                        elif score == max_score:', '                            if len(perm[i:j]) < len(happiest_string):', '                                happiest_string = perm[i:j]', '                            elif len(perm[i:j]) == len(happiest_string):', '                                if perm[i:j].count("a") + perm[i:j].count("e") + perm[i:j].count("i") + perm[i:j].count("o") + perm[i:j].count("u") > happiest_string.count("a") + happiest_string.count("e") + happiest_string.count("i") + happiest_string.count("o") + happiest_string.count("u"):', '                                    happiest_string = perm[i:j]', '                                elif perm[i:j].count("a") + perm[i:j].count("e") + perm[i:j].count("i") + perm[i:j].count("o") + perm[i'], ['from typing import List, Dict', '', 'def maximizeHappiestScore(input: str) -> str:', "    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']", '    max_score = 0', "    max_vowel_cluster = ''", '    permutations = permute(input)', '    happiest_scores = calculateLargestHappiestScore(permutations)', '    ', '    for vowel_cluster, score in happiest_scores.items():', '        if score > max_score:', '            max_score = score', '            max_vowel_cluster = vowel_cluster', '        elif score == max_score:', '            if len(vowel_cluster) < len(max_vowel_cluster):', '                max_vowel_cluster = vowel_cluster', '            elif len(vowel_cluster) == len(max_vowel_cluster):', '                if vowel_cluster.count(vowels[0]) + vowel_cluster.count(vowels[1]) > max_vowel_cluster.count(vowels[0]) + max_vowel_cluster.count(vowels[1]):', '                    max_vowel_cluster = vowel_cluster', '                elif vowel_cluster.count(vowels[0]) + vowel_cluster.count(vowels[1]) == max_vowel_cluster.count(vowels[0]) + max_vowel_cluster.count(vowels[1]):', '                    if ord(vowel_cluster[0]) > ord(max_vowel_cluster[0]):', '                        max_vowel_cluster = vowel_cluster', '                        ', '    if max_score == 0:', '        status = "Unhappy"', '    elif sum(int(digit) for digit in str(max_score)) == 2**int(len(str(max_score))) and is_prime(max_score):', '        status = "Happy"', '    else:', '        status = "Unhappy"', '        ', '    return f\'Happiest String: {"".join(sorted(max_vowel_cluster))} - Happiest Score: {max_score} ({status})\''], ['', 'def maximizeHappiestScore(input: str) -> str:', "    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])", '    max_score = 0', "    max_vowel_cluster = ''", '    for perm in permute(input):', '        score_dict = calculateLargestHappiestScore(perm)', '        for vowel_cluster, score in score_dict.items():', '            if score > max_score:', '                max_score = score', '                max_vowel_cluster = vowel_cluster', '            elif score == max_score:', '                if len(vowel_cluster) < len(max_vowel_cluster):', '                    max_vowel_cluster = vowel_cluster', '                elif len(vowel_cluster) == len(max_vowel_cluster) and vowel_cluster.count(x for x in vowels) > max_vowel_cluster.count(x for x in vowels):', '                    max_vowel_cluster = vowel_cluster', '                elif len(vowel_cluster) == len(max_vowel_cluster) and vowel_cluster.count(x for x in vowels) == max_vowel_cluster.count(x for x in vowels) and ord(vowel_cluster[0]) > ord(max_vowel_cluster[0]):', '                    max_vowel_cluster = vowel_cluster', '    if max_score == 0:', '        status = "Unhappy"', '    elif isHappyNumber(max_score):', '        status = "Happy"', '    else:', '        status = "Unhappy"', '    return f"Happiest String: {max_vowel_cluster} - Happiest Score: {max_score} ({status})"'], ['from typing import List', '', 'def is_happy_number(n: int) -> bool:', '    if n == 1:', '        return True', '    elif n == 4:', '        return False', '    else:', '        return is_happy_number(sum(int(i)**2 for i in str(n)))', '', 'def is_prime(n: int) -> bool:', '    if n < 2:', '        return False', '    for i in range(2, int(n**0.5)+1):', '        if n % i == 0:', '            return False', '    return True', '', 'def maximizeHappiestScore(input: str) -> str:', "    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])", '    vowel_clusters = []', '    for i in range(len(input)):', '        if input[i] in vowels:', '            j = i+1', '            while j < len(input) and input[j] in vowels:', '                j += 1', '            vowel_clusters.append(input[i:j])', '    ', '    if not vowel_clusters:', '        return "Happiest String:  - Happiest Score: 0 (Unhappy)"', '    ', '    happiest_score = 0', '    happiest_cluster = ""', '    for cluster in set(vowel_clusters):', '        score = sum(ord(c) for c in cluster)', '        if is_happy_number(score) and is_prime(score):', "            if score > happiest_score or (score == happiest_score and (len(cluster) < len(happiest_cluster) or (len(cluster) == len(happiest_cluster) and cluster.count('a') + cluster.count('e') + cluster.count('i') + cluster.count('o') + cluster.count('u') > happiest_cluster.count('a') + happiest_cluster.count('e') + happiest_cluster.count('i') + happiest_cluster.count('o') + happiest_cluster.count('u')) or (len(cluster) == len(happiest_cluster) and cluster.count('a') + cluster.count('e') + cluster.count('i') + cluster.count('o') + cluster.count('u') == happiest_cluster.count('a') + happiest_cluster.count('e') + happiest_cluster.count('i') + happiest_cluster.count('o') + happiest_cluster.count('u') and ord(cluster[0]) > ord(happiest_cluster[0]))):", '                happiest_score = score', '                happiest_cluster = cluster', '    ', '    return f'], ['from typing import Dict, List, Tuple', '', 'def maximizeHappiestScore(input: str) -> str:', '    def is_happy(num: int) -> bool:', '        def sum_of_digits(n: int) -> int:', '            s = 0', '            while n > 0:', '                s += n % 10', '                n //= 10', '            return s', '        ', '        def is_power_of_2(n: int) -> bool:', '            return n > 0 and n & (n - 1) == 0', '        ', '        return is_prime(num) and is_power_of_2(sum_of_digits(num))', '    ', '    def is_prime(num: int) -> bool:', '        if num < 2:', '            return False', '        for i in range(2, int(num ** 0.5) + 1):', '            if num % i == 0:', '                return False', '        return True', '    ', '    def get_vowel_clusters(s: str) -> List[str]:', "        vowels = set('aeiouAEIOU')", '        clusters = []', '        start = None', '        for i, c in enumerate(s):', '            if c in vowels:', '                if start is None:', '                    start = i', '            else:', '                if start is not None:', '                    clusters.append(s[start:i])', '                    start = None', '        if start is not None:', '            clusters.append(s[start:])', '        return clusters', '    ', '    def get_happiness_score(s: str) -> int:', '        score = 0', "        vowels = set('aeiouAEIOU')", '        start = None', '        for i, c in enumerate(s):', '            if c in vowels:', '                if start is None:', '                    start = i', '            else:', '                if start is not None:', '                    cluster = s[start:i]', '                    score += sum(ord(c) for c in cluster)', '                    start = None', '        if start is not None:', '            cluster = s[start:]', '            score += sum(ord(c) for c in cluster)', '        return score', '    ', '    permutations = permute(input)', '    largest_happiness_scores: Dict[str, int] = {}', '    for p in permutations:', '        clusters = get_vowel_clusters(p)', '        for c in clusters:', '            score = get_happiness_score(c)', '            if score > 0 and is_happy(score):', '                if c not in largest_happiness_scores or score > largest_h'], ['from typing import List, Tuple', '', 'def is_happy_number(num: int) -> bool:', '    def square_sum(n: int) -> int:', '        if n == 0:', '            return 0', '        return (n % 10) ** 2 + square_sum(n // 10)', '    while num != 1 and num != 4:', '        num = square_sum(num)', '    return num == 1', '', 'def is_prime(num: int) -> bool:', '    if num < 2:', '        return False', '    for i in range(2, int(num ** 0.5) + 1):', '        if num % i == 0:', '            return False', '    return True', '', 'def get_happiness_score(s: str) -> int:', "    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])", '    s = [c for c in s if c in vowels]', '    if not s:', '        return 0', '    score = 0', '    for i in range(len(s) - 1):', '        score += ord(s[i]) + ord(s[i + 1])', '    return score', '', 'def maximizeHappiestScore(input: str) -> str:', '    permutations = permute(input)', '    happiest_scores = calculateLargestHappiestScore(permutations)', '    max_score = 0', "    max_happiest_string = ''", '    for happiest_string, score in happiest_scores.items():', '        if is_happy_number(score) and is_prime(score):', '            if sum(ord(c) for c in happiest_string) > max_score:', '                max_happiest_string = happiest_string', '                max_score = sum(ord(c) for c in happiest_string)', '    if max_happiest_string:', "        status = 'Happy'", "        max_happiest_string = ''.join(sorted(max_happiest_string))", '    else:', "        status = 'Unhappy'", "    return f'Happiest String: {max_happiest_string} - Happiest Score: {max_score} ({status})'"], ['from typing import Dict, List', '', 'def is_happy(number: int) -> bool:', '    def sum_of_squares(n: int) -> int:', '        return sum(int(digit) ** 2 for digit in str(n))', '', '    seen = set()', '    while number not in seen:', '        seen.add(number)', '        number = sum_of_squares(number)', '    return number == 1', '', 'def is_prime(number: int) -> bool:', '    if number < 2:', '        return False', '    for i in range(2, int(number ** 0.5) + 1):', '        if number % i == 0:', '            return False', '    return True', '', 'def sum_of_digits(number: int) -> int:', '    return sum(int(digit) for digit in str(number))', '', 'def maximizeHappiestScore(input: str) -> str:', "    VOWELS = set('aeiouAEIOU')", '', '    permutations = permute(input)', '    scores: Dict[str, int] = {}', '    for permutation in permutations:', '        substring_scores = []', '        current_score = 0', "        current_substring = ''", '        for char in permutation:', '            if char in VOWELS:', '                current_score += ord(char)', '                current_substring += char', '            else:', '                if current_substring:', '                    substring_scores.append((current_substring, current_score))', '                    current_score = 0', "                    current_substring = ''", '        if current_substring:', '            substring_scores.append((current_substring, current_score))', '        if not substring_scores:', '            scores[permutation] = 0', '            continue', '        substring_scores.sort(key=lambda x: (len(x[0]), -x[1], -ord(x[0][0])))', '        happiest_score = substring_scores[-1][1]', '        if is_happy(happiest_score) and is_prime(happiest_score):', '            scores[substring_scores[-1][0]] = happiest_score', '', '    if not scores:', "        return 'Happiest String: - Happiest Score: 0 (Unhappy)'", '', '    happiest_cluster = max(scores, key=lambda x: (sum_of_digits(scores[x]), -len(x), -ord(x[0])))', '    happiest_score = scores[happiest_cluster]', '    return f\'Happiest String: {"".join(sorted(happiest_cluster))} - Happiest Score: {happiest_score} ({ "Happy" if is_happy(happ'], ['from typing import List, Tuple, Dict', '', 'def is_happy_number(n: int) -> bool:', '    if n <= 0:', '        return False', '    while n != 1 and n != 4:', '        n = sum(int(i)**2 for i in str(n))', '    return n == 1', '', 'def is_power_of_two(n: int) -> bool:', '    return n != 0 and (n & (n - 1)) == 0', '', 'def get_vowel_clusters(s: str) -> List[str]:', "    vowels = set('aeiouAEIOU')", '    vowel_clusters = []', "    current_cluster = ''", '    for c in s:', '        if c in vowels:', '            current_cluster += c', '        else:', '            if current_cluster:', '                vowel_clusters.append(current_cluster)', "                current_cluster = ''", '    if current_cluster:', '        vowel_clusters.append(current_cluster)', '    return sorted(vowel_clusters)', '', 'def maximizeHappiestScore(input: str) -> str:', '    vowel_clusters = get_vowel_clusters(input)', '    if not vowel_clusters:', '        return "Happiest String: - Happiest Score: 0 (Unhappy)"', '    permutations = permute(input)', '    happiest_scores = calculateLargestHappiestScore(permutations)', '    max_sum_of_digits = -1', "    happiest_cluster = ''", '    for cluster, score in happiest_scores.items():', '        if is_happy_number(score) and is_power_of_two(sum(int(i) for i in str(score))):', '            sum_of_digits = sum(int(i) for i in str(score))', '            if sum_of_digits > max_sum_of_digits:', '                max_sum_of_digits = sum_of_digits', '                happiest_cluster = cluster', '            elif sum_of_digits == max_sum_of_digits:', '                if len(cluster) < len(happiest_cluster):', '                    happiest_cluster = cluster', '                elif len(cluster) == len(happiest_cluster):', "                    if cluster.count('a') + cluster.count('e') + cluster.count('i') + cluster.count('o') + cluster.count('u') > happiest_cluster.count('a') + happiest_cluster.count('e') + happiest_cluster.count('i') + happiest_cluster.count('o') + happiest_cluster.count('u'):", '                        happiest_cluster = cluster', "                    elif cluster.count('a') + cluster.count('e') + cluster.count('i') + cluster.count('o') + cluster"], ['from typing import List, Tuple', '', 'def is_happy_number(num: int) -> bool:', '    def sum_of_digits(num: int) -> int:', '        return sum(map(int, str(num)))', '    ', '    def is_power_of_two(num: int) -> bool:', '        return num != 0 and ((num & (num - 1)) == 0)', '    ', '    if num == 1:', '        return True', '    if num < 4:', '        return False', '    if not is_power_of_two(sum_of_digits(num)):', '        return False', '    ', '    for i in range(2, int(num ** 0.5) + 1):', '        if num % i == 0:', '            return False', '    ', '    return True', '', 'def get_vowel_clusters(s: str) -> List[str]:', "    vowels = set('aeiouAEIOU')", '    clusters = []', '    temp = ""', '    for char in s:', '        if char in vowels:', '            temp += char', '        else:', '            if temp:', '                clusters.append(temp)', '                temp = ""', '    if temp:', '        clusters.append(temp)', '    return sorted(clusters)', '', 'def maximizeHappiestScore(input: str) -> str:', '    vowel_clusters = get_vowel_clusters(input)', '    if not vowel_clusters:', '        return "Happiest String: {} - Happiest Score: 0 (Unhappy)".format(input)', '    ', '    permutations = permute(input)', '    happiest_scores = calculateLargestHappiestScore(permutations)', '    happiest_cluster = ""', '    happiest_score = 0', '    for cluster, score in happiest_scores.items():', '        if is_happy_number(score):', '            if score > happiest_score:', '                happiest_score = score', '                happiest_cluster = cluster', '            elif score == happiest_score:', '                if len(cluster) < len(happiest_cluster):', '                    happiest_cluster = cluster', "                elif len(cluster) == len(happiest_cluster) and cluster.count('a') + cluster.count('e') + cluster.count('i') + cluster.count('o') + cluster.count('u') > happiest_cluster.count('a') + happiest_cluster.count('e') + happiest_cluster.count('i') + happiest_cluster.count('o') + happiest_cluster.count('u'):", '                    happiest_cluster = cluster', "                elif len(cluster) == len(happiest_cluster) and cluster.count('a') + cluster.count('e') +"], ['from typing import List', '', 'def maximizeHappiestScore(input: str) -> str:', "    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']", '    max_score = 0', '    happiest_str = ""', '    perms = permute(input)', '    for perm in perms:', '        vowel_clusters = []', '        vowel_cluster = ""', '        for char in perm:', '            if char in vowels:', '                vowel_cluster += char', '            else:', '                if vowel_cluster:', '                    vowel_clusters.append(vowel_cluster)', '                    vowel_cluster = ""', '        if vowel_cluster:', '            vowel_clusters.append(vowel_cluster)', '        scores = []', '        for cluster in vowel_clusters:', '            score = sum(ord(c) for c in cluster)', '            if score % 2 == 0:', '                sum_of_digits = sum(int(d) for d in str(score))', '                if sum_of_digits > max_score:', '                    max_score = sum_of_digits', '                    happiest_str = "".join(sorted(cluster))', '                elif sum_of_digits == max_score:', '                    if len(cluster) < len(happiest_str):', '                        happiest_str = "".join(sorted(cluster))', "                    elif len(cluster) == len(happiest_str) and cluster.count('a') + cluster.count('e') + cluster.count('i') + cluster.count('o') + cluster.count('u') > happiest_str.count('a') + happiest_str.count('e') + happiest_str.count('i') + happiest_str.count('o') + happiest_str.count('u'):", '                        happiest_str = "".join(sorted(cluster))', "                    elif len(cluster) == len(happiest_str) and cluster.count('a') + cluster.count('e') + cluster.count('i') + cluster.count('o') + cluster.count('u') == happiest_str.count('a') + happiest_str.count('e') + happiest_str.count('i') + happiest_str.count('o') + happiest_str.count('u') and ord(cluster[0]) > ord(happiest_str[0]):", '                        happiest_str = "".join(sorted(cluster))', '        happiest_score = calculateLargestHappiestScore(perms)[happiest_str]', '        status = "Happy" if happiest_score in [2, 7, 11, 14, 16, 19] else "Unhappy"', '        return f"Happ'], ['from typing import Tuple, List, Dict', '', 'def maximizeHappiestScore(input: str) -> str:', "    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']", '    vowel_clusters = []', '    for i in range(len(input)):', '        if input[i] in vowels:', '            cluster = input[i]', '            for j in range(i + 1, len(input)):', '                if input[j] in vowels:', '                    cluster += input[j]', '                else:', '                    break', '            vowel_clusters.append(cluster)', '', '    if len(vowel_clusters) == 0:', '        return "Happiest String: - Happiest Score: 0 (Unhappy)"', '    ', '    happiest_score = 0', '    happiest_string = ""', '    for permutation in permute(input):', '        score_dict = calculateLargestHappiestScore(permutation)', '        for cluster, score in score_dict.items():', '            if score > happiest_score:', '                happiest_score = score', '                happiest_string = cluster', '            elif score == happiest_score:', '                if len(cluster) < len(happiest_string):', '                    happiest_string = cluster', '                elif len(cluster) == len(happiest_string):', "                    if cluster.count('a') + cluster.count('e') + cluster.count('i') + cluster.count('o') + cluster.count('u') > happiest_string.count('a') + happiest_string.count('e') + happiest_string.count('i') + happiest_string.count('o') + happiest_string.count('u'):", '                        happiest_string = cluster', "                    elif cluster.count('a') + cluster.count('e') + cluster.count('i') + cluster.count('o') + cluster.count('u') == happiest_string.count('a') + happiest_string.count('e') + happiest_string.count('i') + happiest_string.count('o') + happiest_string.count('u'):", '                        if ord(cluster[0]) > ord(happiest_string[0]):', '                            happiest_string = cluster', '', '    if happiest_score == 0:', '        return "Happiest String: - Happiest Score: 0 (Unhappy)"', '    else:', '        return f"Happiest String: {happiest_string} - Happiest Score: {happiest_score} (Happy)"'], ['from typing import List, Tuple', '', 'def maximizeHappiestScore(input: str) -> str:', '    def is_happy(num: int) -> bool:', '        def sum_of_squares(num: int) -> int:', '            return sum(int(digit)**2 for digit in str(num))', '        seen = set()', '        while num != 1 and num not in seen:', '            seen.add(num)', '            num = sum_of_squares(num)', '        return num == 1', '', '    def is_prime(num: int) -> bool:', '        if num < 2:', '            return False', '        for i in range(2, int(num**0.5)+1):', '            if num % i == 0:', '                return False', '        return True', '        ', '    def calculate_happiness_score(vowel_cluster: str) -> int:', '        vowels = "aeiouAEIOU"', '        happiness_score = 0', '        for i in range(len(vowel_cluster)-1):', '            if vowel_cluster[i] in vowels and vowel_cluster[i+1] in vowels:', '                happiness_score += ord(vowel_cluster[i]) + ord(vowel_cluster[i+1])', '        return happiness_score', '', '    def is_happier(vowel_cluster: str, happiest_vowel_cluster: str) -> bool:', '        if calculate_happiness_score(vowel_cluster) != calculate_happiness_score(happiest_vowel_cluster):', '            return calculate_happiness_score(vowel_cluster) > calculate_happiness_score(happiest_vowel_cluster)', '        if len(vowel_cluster) != len(happiest_vowel_cluster):', '            return len(vowel_cluster) < len(happiest_vowel_cluster)', '        if vowel_cluster.count("aeiouAEIOU") != happiest_vowel_cluster.count("aeiouAEIOU"):', '            return vowel_cluster.count("aeiouAEIOU") > happiest_vowel_cluster.count("aeiouAEIOU")', '        return ord(vowel_cluster[0]) > ord(happiest_vowel_cluster[0])', '', '    happiest_vowel_cluster = ""', '    happiest_score = 0', '    for permutation in permute(input):', '        for i in range(len(permutation)):', '            for j in range(i+1, len(permutation)+1):', '                if set(permutation[i:j]).issubset(set("aeiouAEIOU")):', '                    vowel_cluster = "".join(sorted(permutation[i:j]))', '                   '], ['from typing import List, Tuple, Dict', '', 'def maximizeHappiestScore(input: str) -> str:', '    def is_happy_number(n: int) -> bool:', '        def sum_of_digits(num: int) -> int:', '            return sum(int(digit) for digit in str(num))', '        ', '        def is_power_of_two(num: int) -> bool:', '            return num != 0 and ((num & (num - 1)) == 0)', '', '        while n != 1:', '            if n == 4:', '                return False', '            n = sum_of_digits(n)', '        return is_power_of_two(sum_of_digits(n))', '    ', '    def get_vowel_clusters(s: str) -> List[str]:', '        vowels = set(["a", "e", "i", "o", "u", "A", "E", "I", "O", "U"])', '        vowel_clusters = []', '        current_cluster = ""', '        for char in s:', '            if char in vowels:', '                current_cluster += char', '            else:', '                if current_cluster:', '                    vowel_clusters.append(current_cluster)', '                    current_cluster = ""', '        if current_cluster:', '            vowel_clusters.append(current_cluster)', '        return vowel_clusters', '    ', '    permutations = permute(input)', '    largest_happiest_score = 0', '    happiest_string = ""', '    for permutation in permutations:', '        vowel_clusters = get_vowel_clusters(permutation)', '        if not vowel_clusters:', '            continue', '        scores = {}', '        for cluster in vowel_clusters:', '            score = sum(ord(char) for char in cluster)', '            if is_happy_number(score):', '                scores[cluster] = score', '        if not scores:', '            continue', '        largest_score = max(scores.values())', '        happiest_clusters = [cluster for cluster, score in scores.items() if score == largest_score]', '        happiest_cluster = min(happiest_clusters, key=lambda cluster: (-len(cluster), -sum(ord(char) for char in cluster), -ord(cluster[0])))', '        if largest_score > largest_happiest_score:', '            largest_happiest_score = largest_score', '            happiest_string = happiest_cluster', '        elif largest_score == largest_happiest_score:', '            if len(happiest_cluster) < len(happiest_string):', '                happiest_string = happiest_cluster', '            elif len(happiest_cluster) == len(happiest_string) and len(happiest_cluster) >'], ['from typing import List, Tuple, Dict', '', 'def is_happy_number(num: int) -> bool:', '    def sum_of_digits(n: int) -> int:', '        return sum(int(digit) for digit in str(n))', '    ', '    def is_power_of_two(n: int) -> bool:', '        return n != 0 and ((n & (n - 1)) == 0)', '    ', '    def is_prime(n: int) -> bool:', '        if n <= 1:', '            return False', '        for i in range(2, int(n**0.5) + 1):', '            if n % i == 0:', '                return False', '        return True', '    ', '    return is_prime(num) and is_power_of_two(sum_of_digits(num))', '', 'def maximizeHappiestScore(input: str) -> str:', "    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']", '    max_score = 0', '    happiest_cluster = ""', '    permutations = permute(input)', '    happiest_scores = calculateLargestHappiestScore(permutations)', '    for cluster, score in happiest_scores.items():', '        if is_happy_number(score):', '            if score > max_score:', '                max_score = score', '                happiest_cluster = cluster', '            elif score == max_score:', "                if len(cluster) < len(happiest_cluster) or (len(cluster) == len(happiest_cluster) and cluster.count('a') + cluster.count('e') + cluster.count('i') + cluster.count('o') + cluster.count('u') > happiest_cluster.count('a') + happiest_cluster.count('e') + happiest_cluster.count('i') + happiest_cluster.count('o') + happiest_cluster.count('u')):", '                    happiest_cluster = cluster', '    if max_score == 0:', '        status = "Unhappy"', '    else:', '        status = "Happy"', "    happiest_cluster = ''.join(sorted([char for char in happiest_cluster if char in vowels]))", '    return f"Happiest String: {happiest_cluster} - Happiest Score: {max_score} ({status})"'], ['from typing import List, Tuple, Dict', '', 'def maximizeHappiestScore(input: str) -> str:', "    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']", '    max_happiness_score = 0', '    happiest_string = ""', '    ', '    for perm in permute(input):', '        vowel_clusters = []', '        curr_vowel_cluster = ""', '        for char in perm:', '            if char in vowels:', '                curr_vowel_cluster += char', '            else:', '                if curr_vowel_cluster:', '                    vowel_clusters.append(curr_vowel_cluster)', '                    curr_vowel_cluster = ""', '        if curr_vowel_cluster:', '            vowel_clusters.append(curr_vowel_cluster)', '        ', '        happiness_scores = []', '        for cluster in vowel_clusters:', '            score = sum(ord(char) for char in cluster)', '            happiness_scores.append(score)', '        ', '        if not happiness_scores:', '            continue', '        ', '        happiness_scores = list(filter(lambda x: calculateLargestHappiestScore([x])["Happiest Score"] != 0, happiness_scores))', '        if not happiness_scores:', '            continue', '        ', '        happiest_score = max(happiness_scores, key=lambda x: (calculateLargestHappiestScore([x])["Happiest Score"], -len(x), -ord(x[0])))', '        score_dict = calculateLargestHappiestScore([happiest_score])', '        if score_dict["Happiest Score"] > max_happiness_score:', '            max_happiness_score = score_dict["Happiest Score"]', '            happiest_string = happiest_score', '    ', '    if max_happiness_score == 0:', '        status = "Unhappy"', '    else:', '        score_digits_sum = sum(int(digit) for digit in str(max_happiness_score))', '        if isHappyNumber(score_digits_sum) and isPrime(max_happiness_score):', '            status = "Happy"', '        else:', '            status = "Unhappy"', '    ', '    return f\'Happiest String: {"".join(sorted(happiest_string))} - Happiest Score: {max_happiness_score} ({status})\''], ['from typing import List, Tuple, Dict', '', 'def maximizeHappiestScore(input: str) -> str:', "    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']", '    max_score = 0', '    happiest_string = ""', '    permutations = permute(input)', '    for perm in permutations:', '        vowel_clusters = []', '        current_vowel_cluster = ""', '        current_score = 0', '        for char in perm:', '            if char in vowels:', '                current_vowel_cluster += char', '            else:', '                if current_vowel_cluster:', '                    vowel_clusters.append(current_vowel_cluster)', '                    current_vowel_cluster = ""', '        if current_vowel_cluster:', '            vowel_clusters.append(current_vowel_cluster)', '        for vowel_cluster in vowel_clusters:', '            current_score += sum([ord(char) for char in vowel_cluster])', '        if current_score > max_score:', '            happiest_string = "".join(sorted(vowel_clusters, key=lambda x: (len(x), -x.count(\'a\')-x.count(\'e\')-x.count(\'i\')-x.count(\'o\')-x.count(\'u\'), -ord(x[0]))))', '            happiest_score = calculateLargestHappiestScore([happiest_string])[happiest_string]', '            if happiest_score in happy_numbers:', '                max_score = current_score', '    if max_score == 0:', '        status = "Unhappy"', '    else:', '        status = "Happy"', '    return f"Happiest String: {happiest_string} - Happiest Score: {max_score} ({status})"'], ['from typing import List, Tuple', '', 'def is_happy(num: int) -> bool:', '    def sum_of_digits(n: int) -> int:', '        return sum(int(digit) for digit in str(n))', '', '    def is_power_of_two(n: int) -> bool:', '        return n != 0 and (n & (n - 1)) == 0', '', '    if num < 2:', '        return False', '    while num != 1:', '        num = sum_of_digits(num)', '        if not is_power_of_two(num):', '            return False', '    return True', '', '', 'def maximizeHappiestScore(input: str) -> str:', "    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])", '    permutations = permute(input)', '    happiest_scores = {}', '    for perm in permutations:', '        vowel_cluster = []', '        score = 0', '        for i, char in enumerate(perm):', '            if char in vowels:', '                vowel_cluster.append(char)', '                if i > 0 and perm[i-1] in vowels:', '                    score += ord(char) + ord(perm[i-1])', '        if vowel_cluster:', '            vowel_cluster.sort()', "            vowel_cluster_str = ''.join(vowel_cluster)", '            if is_happy(score):', '                if score in happiest_scores:', '                    if len(vowel_cluster) > len(happiest_scores[score][0]):', '                        happiest_scores[score] = (vowel_cluster_str, len(vowel_cluster))', '                    elif len(vowel_cluster) == len(happiest_scores[score][0]) and len(vowel_cluster_str) < len(happiest_scores[score][0]):', '                        happiest_scores[score] = (vowel_cluster_str, len(vowel_cluster))', '                else:', '                    happiest_scores[score] = (vowel_cluster_str, len(vowel_cluster))', '    if not happiest_scores:', '        return "Happiest String: - Happiest Score: 0 (Unhappy)"', '    max_score = max(happiest_scores.keys())', '    happiest_cluster = happiest_scores[max_score][0]', '    return f"Happiest String: {happiest_cluster} - Happiest Score: {max_score} (Happy)"'], ['from typing import Tuple, List, Dict', '', 'def is_happy_number(n: int) -> bool:', '    def digit_sum(n: int) -> int:', '        s = 0', '        while n > 0:', '            s += n % 10', '            n //= 10', '        return s', '    ', '    def is_power_of_two(n: int) -> bool:', '        return n != 0 and (n & (n - 1)) == 0', '    ', '    while n >= 10:', '        n = digit_sum(n)', '    return is_power_of_two(n)', '', 'def maximizeHappiestScore(input: str) -> str:', "    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])", '    vowel_clusters = []', '    for i in range(len(input)):', '        if input[i] in vowels:', '            j = i + 1', '            while j < len(input) and input[j] in vowels:', '                j += 1', '            vowel_clusters.append(input[i:j])', '    ', '    if not vowel_clusters:', '        return "Happiest String: - Happiest Score: 0 (Unhappy)"', '    ', '    max_score = -1', '    happiest_cluster = ""', '    for cluster in permute(vowel_clusters):', '        score_dict = calculateLargestHappiestScore(cluster)', '        for v, s in score_dict.items():', '            if is_happy_number(s) and s > max_score:', '                max_score = s', '                happiest_cluster = v', '    ', '    if max_score == -1:', '        return "Happiest String: - Happiest Score: 0 (Unhappy)"', '    ', '    happiest_cluster = "".join(sorted(happiest_cluster))', '    return f"Happiest String: {happiest_cluster} - Happiest Score: {max_score} (Happy)"'], ['', 'from typing import Tuple', '', '', 'def is_happy_number(n: int) -> bool:', '    def sum_of_digits(n: int) -> int:', '        return sum(int(d) for d in str(n))', '', '    def is_power_of_two(n: int) -> bool:', '        return n != 0 and (n & (n - 1)) == 0', '', '    def is_prime(n: int) -> bool:', '        if n <= 1:', '            return False', '        for i in range(2, int(n ** 0.5) + 1):', '            if n % i == 0:', '                return False', '        return True', '', '    return is_prime(n) and is_power_of_two(sum_of_digits(n))', '', '', 'def maximizeHappiestScore(input: str) -> str:', "    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}", '    max_happiness_score = -1', '    happiest_string = ""', '    for perm in permute(input):', '        happiness_score = 0', '        for i in range(len(perm)):', '            if perm[i] in vowels:', '                j = i + 1', '                while j < len(perm) and perm[j] in vowels:', '                    j += 1', '                vowel_cluster = "".join(sorted(perm[i:j]))', '                happiness_score += sum(ord(c) for c in vowel_cluster)', '                i = j', '        if happiness_score > max_happiness_score:', '            max_happiness_score = happiness_score', '            happiest_string = vowel_cluster', '        elif happiness_score == max_happiness_score:', '            if len(vowel_cluster) < len(happiest_string):', '                happiest_string = vowel_cluster', '            elif len(vowel_cluster) == len(happiest_string):', "                if vowel_cluster.count('a') + vowel_cluster.count('e') + vowel_cluster.count('i') + vowel_cluster.count('o') + vowel_cluster.count('u') > happiest_string.count('a') + happiest_string.count('e') + happiest_string.count('i') + happiest_string.count('o') + happiest_string.count('u'):", '                    happiest_string = vowel_cluster', "                elif vowel_cluster.count('a') + vowel_cluster.count('e') + vowel_cluster.count('i') + vowel_cluster.count('o') + vowel_cluster.count('"], ['from typing import List, Dict', '', 'def maximizeHappiestScore(input: str) -> str:', '    def is_happy(num: int) -> bool:', '        def sum_digits(n: int) -> int:', '            return sum(map(int, str(n)))', '        ', '        def is_power_of_two(n: int) -> bool:', '            return (n & (n - 1)) == 0', '        ', '        if num < 2:', '            return False', '        if num == 2:', '            return True', '        if num % 2 == 0:', '            return False', '        for i in range(3, int(num**0.5)+1, 2):', '            if num % i == 0:', '                return False', '        return is_power_of_two(sum_digits(num))', '    ', '    def get_vowel_clusters(s: str) -> List[str]:', "        vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])", '        clusters = []', "        cluster = ''", '        for c in s:', '            if c in vowels:', '                cluster += c', '            else:', '                if cluster:', '                    clusters.append(cluster)', "                    cluster = ''", '        if cluster:', '            clusters.append(cluster)', '        return clusters', '    ', '    permutations = permute(input)', '    happiest_scores = {}', '    for permutation in permutations:', '        clusters = get_vowel_clusters(permutation)', '        for cluster in clusters:', '            score = sum(map(ord, cluster))', '            if is_happy(score):', "                if score not in happiest_scores or len(cluster) < len(happiest_scores[score]) or (len(cluster) == len(happiest_scores[score]) and cluster.count('a') + cluster.count('e') + cluster.count('i') + cluster.count('o') + cluster.count('u') > happiest_scores[score].count('a') + happiest_scores[score].count('e') + happiest_scores[score].count('i') + happiest_scores[score].count('o') + happiest_scores[score].count('u')) or (len(cluster) == len(happiest_scores[score]) and cluster.count('a') + cluster.count('e') + cluster.count('i') + cluster.count('o') + cluster.count('u') == happiest_scores[score].count('a') + happiest_scores[score"], ['from typing import List, Tuple, Dict', '', 'def maximizeHappiestScore(input: str) -> str:', '    def is_happy(num: int) -> bool:', '        def sum_of_digits(num: int) -> int:', '            return sum(map(int, str(num)))', '', '        def is_power_of_two(num: int) -> bool:', '            return num & (num - 1) == 0', '', '        while num > 9:', '            num = sum_of_digits(num)', '        return is_power_of_two(num)', '', '    vowels = [c for c in input if c in "aeiouAEIOU"]', '    if not vowels:', '        return "Happiest String: - Happiest Score: 0 (Unhappy)"', '', '    happiest_score = -1', '    happiest_cluster = ""', '    for perm in permute(vowels):', '        cluster = "".join(sorted(perm))', '        score = sum(ord(c) for c in zip(cluster, cluster[1:]))', '        if is_happy(score) and score > happiest_score:', '            happiest_score = score', '            happiest_cluster = cluster', '', '    status = "Happy" if happiest_score >= 0 else "Unhappy"', '    return f"Happiest String: {happiest_cluster} - Happiest Score: {happiest_score} ({status})"'], ['from typing import Tuple', '', 'def maximizeHappiestScore(input: str) -> str:', '    def isHappy(num: int) -> bool:', '        def sumOfDigits(num: int) -> int:', '            return sum([int(digit) for digit in str(num)])', '        def isPowerOfTwo(num: int) -> bool:', '            return num != 0 and ((num & (num - 1)) == 0)', '        while num > 9:', '            num = sumOfDigits(num)', '        return isPowerOfTwo(num)', '', '    def getVowelClusters(s: str) -> Tuple[str, int]:', '        def isVowel(c: str) -> bool:', '            return c in "aeiouAEIOU"', '        clusters = []', '        i = 0', '        while i < len(s):', '            if isVowel(s[i]):', '                j = i + 1', '                while j < len(s) and isVowel(s[j]):', '                    j += 1', '                clusters.append(s[i:j])', '                i = j', '            else:', '                i += 1', '        return max([(cluster, sum([ord(c) for c in cluster])) for cluster in clusters], key=lambda x: (len(x[0]), -x[1]), default=("", 0))', '', '    max_score, happiest_string = 0, ""', '    for permutation in permute(input):', '        vowel_cluster, score = getVowelClusters(permutation)', '        if isHappy(score) and (score > max_score or (score == max_score and (len(vowel_cluster) < len(happiest_string) or (len(vowel_cluster) == len(happiest_string) and (len([c for c in vowel_cluster if c in "aeiouAEIOU"]) > len([c for c in happiest_string if c in "aeiouAEIOU"])) or (len(vowel_cluster) == len(happiest_string) and len([c for c in vowel_cluster if c in "aeiouAEIOU"]) == len([c for c in happiest_string if c in "aeiouAEIOU"]) and vowel_cluster[0] > happiest_string[0]))))):', '            max_score, happiest_string = score, vowel_cluster', '    ', '    status = "Happy" if max_score > 0 else "Unhappy"', "    return f'Happiest String: {"], ['from typing import List, Dict', '', 'def maximizeHappiestScore(input: str) -> str:', '    vowels = "aeiouAEIOU"', '    max_score = 0', '    max_cluster = ""', '    perms = permute(input)', '    for perm in perms:', '        clusters = []', '        cluster = ""', '        score = 0', '        for c in perm:', '            if c in vowels:', '                cluster += c', '            else:', '                if cluster:', '                    clusters.append(cluster)', '                    cluster = ""', '        if cluster:', '            clusters.append(cluster)', '        for c in clusters:', '            score += sum(ord(v) for v in c)', '        if score > max_score:', '            largest_happiest = calculateLargestHappiestScore([perm])', '            if largest_happiest:', '                max_score = score', '                max_cluster = largest_happiest[max(largest_happiest, key=lambda x: (largest_happiest[x], -len(x), -ord(x[0])))]', '', '    if max_score == 0:', '        status = "Unhappy"', '    else:', '        digits_sum = sum(int(d) for d in str(max_score))', '        if digits_sum & (digits_sum - 1) == 0:', '            status = "Happy"', '        else:', '            status = "Unhappy"', '', '    return f"Happiest String: {max_cluster} - Happiest Score: {max_score} ({status})"'], ['from typing import List, Dict', '', 'def maximizeHappiestScore(input: str) -> str:', "    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])", '    max_score = 0', '    happiest_cluster = ""', '    permutations = permute(input)', '    for perm in permutations:', '        score = 0', '        cluster = ""', '        for i in range(len(perm)):', '            if perm[i] in vowels:', '                cluster += perm[i]', '                if i > 0 and perm[i-1] in vowels:', '                    score += ord(perm[i]) + ord(perm[i-1])', '        if score > max_score:', '            max_score = score', '            happiest_cluster = cluster', '    if max_score == 0:', '        status = "Unhappy"', '    else:', '        binary = bin(max_score)[2:]', '        digits_sum = sum([int(d) for d in str(binary)])', '        if is_prime(max_score) and (2 ** digits_sum) == max_score:', '            status = "Happy"', '        else:', '            status = "Unhappy"', '    happiest_cluster = "".join(sorted(happiest_cluster))', '    output_str = f"Happiest String: {happiest_cluster} - Happiest Score: {max_score} ({status})"', '    return output_str', '', 'def is_prime(n: int) -> bool:', '    if n <= 1:', '        return False', '    for i in range(2, int(n**0.5)+1):', '        if n % i == 0:', '            return False', '    return True'], ['from typing import List, Tuple, Dict', '', 'def is_happy_number(n: int) -> bool:', '    def sum_of_digits(n: int) -> int:', '        return sum(int(digit) for digit in str(n))', '    ', '    def is_power_of_two(n: int) -> bool:', '        return n and not (n & (n-1))', '    ', '    def is_prime(n: int) -> bool:', '        if n < 2:', '            return False', '        for i in range(2, int(n**0.5)+1):', '            if n % i == 0:', '                return False', '        return True', '    ', '    return is_prime(n) and is_power_of_two(sum_of_digits(n))', '', 'def maximizeHappiestScore(input: str) -> str:', '    vowels = set("aeiouAEIOU")', '    max_score = 0', '    happiest_string = ""', '    for permutation in permute(input):', '        score = 0', '        vowel_cluster = ""', '        for i in range(len(permutation)-1):', '            if permutation[i] in vowels and permutation[i+1] in vowels:', '                vowel_pair = "".join(sorted([permutation[i], permutation[i+1]]))', '                vowel_cluster += vowel_pair', '                score += sum(ord(v) for v in vowel_pair)', '        if vowel_cluster:', '            if is_happy_number(score):', '                if score > max_score or (score == max_score and (len(vowel_cluster) < len(happiest_string) or (len(vowel_cluster) == len(happiest_string) and vowel_cluster.count("aeiouAEIOU") > happiest_string.count("aeiouAEIOU")) or (len(vowel_cluster) == len(happiest_string) and vowel_cluster.count("aeiouAEIOU") == happiest_string.count("aeiouAEIOU") and vowel_cluster > happiest_string))):', '                    max_score = score', '                    happiest_string = vowel_cluster', '    if max_score == 0:', '        status = "Unhappy"', '    else:', '        status = "Happy"', '    return f"Happiest String: {happiest_string} - Happiest Score: {max_score} ({status})"'], ['from typing import Dict, List', '', 'def calculate_happiness_score(vowel_cluster: str) -> int:', '    vowels = "aeiouAEIOU"', '    happiness_score = 0', '    for i in range(len(vowel_cluster)-1):', '        if vowel_cluster[i] in vowels and vowel_cluster[i+1] in vowels:', '            happiness_score += ord(vowel_cluster[i]) + ord(vowel_cluster[i+1])', '    return happiness_score', '', 'def is_happy_number(num: int) -> bool:', '    def sum_of_digits(num: int) -> int:', '        return sum(int(d) for d in str(num))', '    def is_power_of_two(num: int) -> bool:', '        return num != 0 and ((num & (num - 1)) == 0)', '    if num < 2:', '        return False', '    while num != 1:', '        num = sum_of_digits(num)', '        if not is_power_of_two(num):', '            return False', '    return True', '', 'def maximizeHappiestScore(input: str) -> str:', '    def get_vowel_clusters(s: str) -> List[str]:', '        vowels = "aeiouAEIOU"', '        vowel_clusters = []', '        i = 0', '        while i < len(s):', '            if s[i] in vowels:', '                j = i + 1', '                while j < len(s) and s[j] in vowels:', '                    j += 1', '                vowel_clusters.append(s[i:j])', '                i = j', '            else:', '                i += 1', '        return vowel_clusters', '', '    permutations = permute(input)', '    happiness_scores = {}', '    for permutation in permutations:', '        vowel_clusters = get_vowel_clusters(permutation)', '        for vowel_cluster in vowel_clusters:', '            happiness_score = calculate_happiness_score(vowel_cluster)', '            if is_happy_number(happiness_score):', '                if happiness_score not in happiness_scores:', '                    happiness_scores[happiness_score] = []', '                happiness_scores[happiness_score].append(vowel_cluster)', '    if not happiness_scores:', '        return "Happiest String: - Happiest Score: 0 (Unhappy)"', '    max_happiness_score = max(happiness_scores.keys())', '    happiest_string = max(happiness_scores[max_happiness_score], key=lambda x: (-len(x), -sum(ord(c) for c in x), -ord(x[0])))', '    return f"Happiest String: {happiest_string} -'], ['from typing import List, Dict', '', '', 'def is_happy_number(n: int) -> bool:', '    def sum_of_digits(n: int) -> int:', '        return sum(int(d) for d in str(n))', '', '    def is_power_of_2(n: int) -> bool:', '        return n != 0 and n & (n - 1) == 0', '', '    def is_prime(n: int) -> bool:', '        if n < 2:', '            return False', '        for i in range(2, int(n ** 0.5) + 1):', '            if n % i == 0:', '                return False', '        return True', '', '    return is_prime(n) and is_power_of_2(sum_of_digits(n))', '', '', 'def maximizeHappiestScore(input: str) -> str:', "    vowels = set('aeiouAEIOU')", '    vowel_clusters = []', '    for i in range(len(input)):', '        if input[i] in vowels:', '            start = i', '            while i < len(input) and input[i] in vowels:', '                i += 1', '            vowel_clusters.append(input[start:i])', '    if not vowel_clusters:', "        return 'Happiest String: - Happiest Score: 0 (Unhappy)'", '    permutations = permute(input)', '    happiest_scores = calculateLargestHappiestScore(permutations)', '    happiest_score = max(happiest_scores.values())', '    happiest_vowel_clusters = [vc for vc, score in happiest_scores.items() if score == happiest_score]', "    happiest_vowel_clusters.sort(key=lambda x: (len(x), -x.count('a') - x.count('e') - x.count('i') - x.count('o') - x.count('u'), -ord(x[0])))", "    happiest_string = ''.join(sorted(''.join(happiest_vowel_clusters)))", "    status = 'Happy' if is_happy_number(happiest_score) else 'Unhappy'", "    return f'Happiest String: {happiest_string} - Happiest Score: {happiest_score} ({status})'"], ['', 'def maximizeHappiestScore(input: str) -> str:', "    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])", '    max_score = -1', "    max_vowel_cluster = ''", '    for perm in permute(input):', "        vowel_cluster = ''", '        score = 0', '        for i in range(len(perm) - 1):', '            if perm[i] in vowels and perm[i+1] in vowels:', '                vowel_cluster += perm[i]', '                score += ord(perm[i]) + ord(perm[i+1])', "        vowel_cluster += perm[-1] if perm[-1] in vowels else ''", '        score += ord(perm[-1]) if perm[-1] in vowels else 0', '        if score > max_score:', '            max_score = score', '            max_vowel_cluster = vowel_cluster', '        elif score == max_score:', '            if len(vowel_cluster) < len(max_vowel_cluster):', '                max_vowel_cluster = vowel_cluster', '            elif len(vowel_cluster) == len(max_vowel_cluster):', "                if vowel_cluster.count('a') + vowel_cluster.count('e') + vowel_cluster.count('i') + vowel_cluster.count('o') + vowel_cluster.count('u') > max_vowel_cluster.count('a') + max_vowel_cluster.count('e') + max_vowel_cluster.count('i') + max_vowel_cluster.count('o') + max_vowel_cluster.count('u'):", '                    max_vowel_cluster = vowel_cluster', "                elif vowel_cluster.count('a') + vowel_cluster.count('e') + vowel_cluster.count('i') + vowel_cluster.count('o') + vowel_cluster.count('u') == max_vowel_cluster.count('a') + max_vowel_cluster.count('e') + max_vowel_cluster.count('i') + max_vowel_cluster.count('o') + max_vowel_cluster.count('u'):", '                    if ord(vowel_cluster[0]) > ord(max_vowel_cluster[0]):', '                        max_vowel_cluster = vowel_cluster', '    if max_score == -1:', '        return "Happiest String: - Happiest Score: 0 (Unhappy)"', '    else:', '        happiest_dict = calculateLargestHappiestScore([max_vowel_cluster])', '        happiest_score = list(h'], ['from typing import List, Dict', '', 'def maximizeHappiestScore(input: str) -> str:', "    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])", '    max_score = 0', '    happiest_string = ""', '    for perm in permute(input):', '        score_dict = calculateLargestHappiestScore(perm)', '        for vowel_cluster, score in score_dict.items():', '            if score > max_score:', '                max_score = score', '                happiest_string = vowel_cluster', '            elif score == max_score and len(vowel_cluster) < len(happiest_string):', '                happiest_string = vowel_cluster', '            elif score == max_score and len(vowel_cluster) == len(happiest_string) and vowel_cluster.count(', '                    lambda x: x in vowels) > happiest_string.count(lambda x: x in vowels):', '                happiest_string = vowel_cluster', '            elif score == max_score and len(vowel_cluster) == len(happiest_string) and vowel_cluster.count(', '                    lambda x: x in vowels) == happiest_string.count(lambda x: x in vowels) and ord(', '                vowel_cluster[0]) > ord(happiest_string[0]):', '                happiest_string = vowel_cluster', '    if max_score == 0:', '        return f"Happiest String: {happiest_string} - Happiest Score: {max_score} (Unhappy)"', '    else:', '        digits_sum = sum([int(digit) for digit in str(max_score)])', '        if digits_sum & (digits_sum - 1) == 0 and digits_sum != 0:', '            return f"Happiest String: {happiest_string} - Happiest Score: {max_score} (Happy)"', '        else:', '            return f"Happiest String: {happiest_string} - Happiest Score: {max_score} (Unhappy)"'], ['from typing import List, Tuple', '', 'def is_happy_number(num: int) -> bool:', '    if num <= 1:', '        return False', '    elif num == 2:', '        return True', '    else:', '        digits_sum = sum(int(digit) for digit in str(num))', '        power = 0', '        while 2**power <= digits_sum:', '            if 2**power == digits_sum:', '                return True', '            power += 1', '        return False', '', 'def maximizeHappiestScore(input: str) -> str:', "    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']", '    max_happiness_score = 0', "    max_happiest_string = ''", '    permutations = permute(input)', '    happiest_scores = calculateLargestHappiestScore(permutations)', '    for happiest_string, happiness_score in happiest_scores.items():', '        if happiness_score > max_happiness_score and is_happy_number(happiness_score):', '            max_happiness_score = happiness_score', '            max_happiest_string = happiest_string', '        elif happiness_score == max_happiness_score:', '            if len(happiest_string) < len(max_happiest_string):', '                max_happiest_string = happiest_string', '            elif len(happiest_string) == len(max_happiest_string):', '                if happiest_string.count(vowels[0]) + happiest_string.count(vowels[1]) > max_happiest_string.count(vowels[0]) + max_happiest_string.count(vowels[1]):', '                    max_happiest_string = happiest_string', '                elif happiest_string.count(vowels[0]) + happiest_string.count(vowels[1]) == max_happiest_string.count(vowels[0]) + max_happiest_string.count(vowels[1]):', '                    if ord(happiest_string[0]) > ord(max_happiest_string[0]):', '                        max_happiest_string = happiest_string', '    if max_happiness_score == 0:', "        return f'Happiest String: {max_happiest_string} - Happiest Score: {max_happiness_score} (Unhappy)'", '    else:', "        return f'Happiest String: {max_happiest_string} - Happiest Score: {max_happiness_score"], ['from typing import Tuple, List, Dict', '', 'def is_happy_number(num: int) -> bool:', '    def sum_of_digits(n: int) -> int:', '        return sum(int(digit) for digit in str(n))', '    ', '    def is_power_of_two(n: int) -> bool:', '        return n != 0 and not (n & (n - 1))', '    ', '    if num <= 1:', '        return False', '    ', '    while num != 4:', '        num = sum_of_digits(num)', '        if not is_power_of_two(num):', '            return False', '    ', '    return True', '', 'def maximizeHappiestScore(input: str) -> str:', "    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])", '    max_score = 0', '    happiest_cluster = ""', '    ', '    for permutation in permute(input):', '        vowel_cluster = ""', '        score = 0', '        for i in range(len(permutation)):', '            if permutation[i] in vowels:', '                vowel_cluster += permutation[i]', '                if i > 0 and permutation[i-1] in vowels:', '                    score += ord(permutation[i]) + ord(permutation[i-1])', '        if vowel_cluster:', '            if is_happy_number(score):', "                if score > max_score or (score == max_score and (len(vowel_cluster) < len(happiest_cluster) or (len(vowel_cluster) == len(happiest_cluster) and vowel_cluster.count('a') + vowel_cluster.count('e') + vowel_cluster.count('i') + vowel_cluster.count('o') + vowel_cluster.count('u') > happiest_cluster.count('a') + happiest_cluster.count('e') + happiest_cluster.count('i') + happiest_cluster.count('o') + happiest_cluster.count('u')) or (len(vowel_cluster) == len(happiest_cluster) and vowel_cluster.count('a') + vowel_cluster.count('e') + vowel_cluster.count('i') + vowel_cluster.count('o') + vowel_cluster.count('u') == happiest_cluster.count('a') + happiest_cluster.count('e') + happiest_cluster.count('i') + happiest_cluster.count('o') + happiest_cluster.count('u') and ord(vowel_cluster[0]) > ord(happiest_cluster[0]))):", '                    max_score = score', ''], ['from typing import Tuple, List', '', 'def maximizeHappiestScore(input: str) -> str:', "    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']", '    max_score = 0', "    max_vowel_cluster = ''", '    for perm in permute(input):', '        score_dict = calculateLargestHappiestScore([perm])', '        if score_dict:', '            score, vowel_cluster = list(score_dict.items())[0]', '            if score > max_score:', '                max_score = score', '                max_vowel_cluster = vowel_cluster', '            elif score == max_score and len(vowel_cluster) < len(max_vowel_cluster):', '                max_vowel_cluster = vowel_cluster', '            elif score == max_score and len(vowel_cluster) == len(max_vowel_cluster) and vowel_cluster.count(vowels[0]) + vowel_cluster.count(vowels[1]) > max_vowel_cluster.count(vowels[0]) + max_vowel_cluster.count(vowels[1]):', '                max_vowel_cluster = vowel_cluster', '            elif score == max_score and len(vowel_cluster) == len(max_vowel_cluster) and vowel_cluster.count(vowels[0]) + vowel_cluster.count(vowels[1]) == max_vowel_cluster.count(vowels[0]) + max_vowel_cluster.count(vowels[1]) and ord(vowel_cluster[0]) > ord(max_vowel_cluster[0]):', '                max_vowel_cluster = vowel_cluster', '    if max_score == 0:', "        status = 'Unhappy'", '    else:', '        digit_sum = sum(int(d) for d in str(max_score))', '        if isHappyNumber(digit_sum):', "            status = 'Happy'", '        else:', "            status = 'Unhappy'", '    return f\'Happiest String: {"".join(sorted(max_vowel_cluster))} - Happiest Score: {max_score} ({status})\'', '', 'def isHappyNumber(num: int) -> bool:', '    def getSumOfSquares(num: int) -> int:', '        return sum(int(d) ** 2 for d in str(num))', '    seen = set()', '    while num != 1 and num not in seen:', '        seen.add(num)', '        num = getSumOfSquares(num)', '    return num == 1'], ['from typing import List, Tuple', '', 'def is_happy(num: int) -> bool:', '    def digit_sum(num: int) -> int:', '        return sum(int(i) for i in str(num))', '    ', '    def is_power_of_two(num: int) -> bool:', '        return num != 0 and (num & (num - 1)) == 0', '    ', '    def is_prime(num: int) -> bool:', '        if num < 2:', '            return False', '        for i in range(2, int(num ** 0.5) + 1):', '            if num % i == 0:', '                return False', '        return True', '    ', '    return is_prime(num) and is_power_of_two(digit_sum(num))', '', 'def maximizeHappiestScore(input: str) -> str:', "    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']", '    permutations = permute(input)', '    happiest_score = 0', '    happiest_string = ""', '    for perm in permutations:', '        vowel_clusters = []', '        vowel_cluster = ""', '        for char in perm:', '            if char in vowels:', '                vowel_cluster += char', '            else:', '                if vowel_cluster != "":', '                    vowel_clusters.append(vowel_cluster)', '                    vowel_cluster = ""', '        if vowel_cluster != "":', '            vowel_clusters.append(vowel_cluster)', '        happiness_scores = []', '        for cluster in vowel_clusters:', '            score = sum(ord(char) for char in cluster)', '            if is_happy(score):', '                happiness_scores.append(score)', '        if happiness_scores:', '            largest_happiness_score = max(happiness_scores)', '            if largest_happiness_score > happiest_score:', '                happiest_score = largest_happiness_score', '                happiest_string = sorted([cluster for cluster in vowel_clusters if sum(ord(char) for char in cluster) == happiest_score], key=lambda x: (-len(x), -ord(x[0])))[-1]', '    if happiest_score == 0:', '        return "Happiest String:  - Happiest Score: 0 (Unhappy)"', '    else:', '        return f"Happiest String: {\'\'.join(sorted(happiest_string))} - Happiest Score: {happiest_score} (Happy)"'], ['from typing import Tuple, List, Dict', '', 'def maximizeHappiestScore(input: str) -> str:', '    def is_happy_number(n: int) -> bool:', '        def sum_of_digits(n: int) -> int:', '            return sum(int(digit) for digit in str(n))', '        def is_power_of_two(n: int) -> bool:', '            return n != 0 and (n & (n - 1)) == 0', '        while n != 1 and n != 4:', '            n = sum_of_digits(n)', '        return n == 1 or (n == 4 and is_power_of_two(sum_of_digits(n)))', '    ', '    vowels = "aeiouAEIOU"', '    permutations = permute(input)', '    max_happiness_score = -1', '    happiest_string = ""', '    for permutation in permutations:', '        happiness_score = 0', '        vowels_in_permutation = ""', '        for i in range(len(permutation)):', '            if permutation[i] in vowels:', '                vowels_in_permutation += permutation[i]', '                if i > 0 and permutation[i-1] in vowels:', '                    happiness_score += ord(permutation[i]) + ord(permutation[i-1])', '        if happiness_score > max_happiness_score:', '            if is_happy_number(happiness_score):', '                max_happiness_score = happiness_score', '                happiest_string = vowels_in_permutation', '    status = "Happy" if max_happiness_score != -1 else "Unhappy"', '    if max_happiness_score == -1:', '        max_happiness_score = 0', '    return f"Happiest String: {\'\'.join(sorted(happiest_string))} - Happiest Score: {max_happiness_score} ({status})"'], ['from typing import Tuple, Dict, List', '', 'def maximizeHappiestScore(input: str) -> str:', '    ', '    def is_happy_number(num: int) -> bool:', '        def sum_of_digits(n: int) -> int:', '            return sum(int(i) for i in str(n))', '        ', '        def is_power_of_two(n: int) -> bool:', '            return n != 0 and (n & (n - 1)) == 0', '        ', '        while num > 9:', '            num = sum_of_digits(num)', '        return is_power_of_two(num)', '    ', '    def get_vowel_clusters(s: str) -> List[str]:', "        vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])", '        clusters = []', "        cluster = ''", '        for c in s:', '            if c in vowels:', '                cluster += c', '            else:', '                if cluster:', '                    clusters.append(cluster)', "                    cluster = ''", '        if cluster:', '            clusters.append(cluster)', '        return clusters', '    ', '    permutations = permute(input)', '    max_score = -1', "    max_vowel_cluster = ''", '    for p in permutations:', '        vowel_clusters = get_vowel_clusters(p)', '        scores = {vc: sum(ord(c) for c in vc) for vc in vowel_clusters}', '        for vc, score in scores.items():', '            if is_happy_number(score) and score > max_score:', '                max_score = score', '                max_vowel_cluster = vc', '            elif is_happy_number(score) and score == max_score:', '                if len(vc) < len(max_vowel_cluster):', '                    max_vowel_cluster = vc', "                elif len(vc) == len(max_vowel_cluster) and vc.count('aeiouAEIOU') > max_vowel_cluster.count('aeiouAEIOU'):", '                    max_vowel_cluster = vc', "                elif len(vc) == len(max_vowel_cluster) and vc.count('aeiouAEIOU') == max_vowel_cluster.count('aeiouAEIOU') and ord(vc[0]) > ord(max_vowel_cluster[0]):", '                    max_vowel_cluster = vc', '    if max_score == -1:', "        return 'Happiest String: - Happiest Score: 0 (Unhappy)'", '    else:', "        return f'Happiest"], ['from typing import List, Dict', '', 'def maximizeHappiestScore(input: str) -> str:', '    def is_happy_number(num: int) -> bool:', '        def sum_of_digits(n: int) -> int:', '            return sum(int(digit) for digit in str(n))', '', '        def is_power_of_two(n: int) -> bool:', '            return n != 0 and ((n & (n - 1)) == 0)', '', '        if num < 2:', '            return False', '        while num != 1:', '            num = sum_of_digits(num)', '            if not is_power_of_two(num):', '                return False', '        return True', '', '    vowels = "aeiouAEIOU"', '    max_score, max_vowel_cluster = 0, ""', '    for permutation in permute(input):', '        vowel_cluster = ""', '        score = 0', '        for i in range(len(permutation)):', '            if permutation[i] in vowels:', '                vowel_cluster += permutation[i]', '                if i == len(permutation) - 1 or permutation[i+1] not in vowels:', '                    score += sum(ord(vowel) for vowel in vowel_cluster)', '                    vowel_cluster = ""', '        if score > max_score:', '            max_score = score', '            max_vowel_cluster = "".join(sorted(vowel_cluster))', '    if not max_vowel_cluster:', '        return f"Happiest String: - Happiest Score: 0 (Unhappy)"', '    happiest_scores = calculateLargestHappiestScore(permute(max_vowel_cluster))', '    happiest_score = max(happiest_scores.values())', '    happiest_string = max(vowel_cluster for vowel_cluster, score in happiest_scores.items() if score == happiest_score)', '    if is_happy_number(happiest_score):', '        status = "Happy"', '    else:', '        status = "Unhappy"', '    return f"Happiest String: {happiest_string} - Happiest Score: {happiest_score} ({status})"'], ['from typing import List, Tuple, Dict', '', 'def maximizeHappiestScore(input: str) -> str:', "    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']", '    permutations = permute(input)', '    max_score = -1', '    max_cluster = ""', '    for perm in permutations:', '        cluster = ""', '        score = 0', '        for i in range(len(perm)):', '            if perm[i] in vowels:', '                cluster += perm[i]', '                if i > 0 and perm[i-1] in vowels:', '                    score += ord(perm[i]) + ord(perm[i-1])', '        if score > max_score:', '            max_cluster = cluster', '            max_score = score', '        elif score == max_score:', '            if len(cluster) < len(max_cluster):', '                max_cluster = cluster', '            elif len(cluster) == len(max_cluster) and cluster.count(vowels) > max_cluster.count(vowels):', '                max_cluster = cluster', '            elif len(cluster) == len(max_cluster) and cluster.count(vowels) == max_cluster.count(vowels) and ord(cluster[0]) > ord(max_cluster[0]):', '                max_cluster = cluster', '    happiest_dict = calculateLargestHappiestScore(permutations)', '    if max_score == 0:', '        return f"Happiest String: {max_cluster} - Happiest Score: {max_score} (Unhappy)"', '    if str(max_score) in happiest_dict and happiest_dict[str(max_score)] == max_cluster:', '        return f"Happiest String: {max_cluster} - Happiest Score: {max_score} (Happy)"', '    else:', '        return f"Happiest String: {max_cluster} - Happiest Score: {max_score} (Unhappy)"'], ['from typing import List, Dict, Tuple', '', 'def is_happy_number(n: int) -> bool:', '    def sum_of_squares(n: int) -> int:', '        res = 0', '        while n > 0:', '            res += (n % 10) ** 2', '            n //= 10', '        return res', '    ', '    seen = set()', '    while n != 1 and n not in seen:', '        seen.add(n)', '        n = sum_of_squares(n)', '    return n == 1', '', 'def is_prime(n: int) -> bool:', '    if n == 2:', '        return True', '    if n % 2 == 0 or n == 1:', '        return False', '    for i in range(3, int(n ** 0.5) + 1, 2):', '        if n % i == 0:', '            return False', '    return True', '', 'def get_vowel_clusters(s: str) -> List[str]:', '    vowels = set("aeiouAEIOU")', '    res = []', '    cur = ""', '    for c in s:', '        if c in vowels:', '            cur += c', '        else:', '            if cur:', '                res.append(cur)', '                cur = ""', '    if cur:', '        res.append(cur)', '    return sorted(res)', '', 'def maximizeHappiestScore(input: str) -> str:', '    vowel_clusters = get_vowel_clusters(input)', '    happiest_score = 0', '    happiest_string = ""', '    for p in permute(input):', '        scores = []', '        for vc in get_vowel_clusters(p):', '            score = sum(ord(c) for c in vc)', '            if is_happy_number(score) and is_prime(score):', '                scores.append(score)', '        if not scores:', '            continue', '        largest_happiest_score = max(scores)', '        if largest_happiest_score > happiest_score:', '            happiest_score = largest_happiest_score', '            happiest_string = max([vc for vc in get_vowel_clusters(p) if sum(ord(c) for c in vc) == happiest_score], key=lambda x: (-len(x), -ord(x[0])))', '    if not happiest_string:', '        return f"Happiest String: - Happiest Score: 0 (Unhappy)"', '    return f"Happiest String: {happiest_string} - Happiest Score: {happiest_score'], ['from typing import Dict', '', '', 'def is_happy_number(num: int) -> bool:', '    if num == 1:', '        return True', '    elif num == 4:', '        return False', '    else:', '        return is_happy_number(sum(int(i)**2 for i in str(num)))', '', '', 'def is_prime(num: int) -> bool:', '    if num <= 1:', '        return False', '    elif num <= 3:', '        return True', '    elif num % 2 == 0 or num % 3 == 0:', '        return False', '    i = 5', '    while i * i <= num:', '        if num % i == 0 or num % (i + 2) == 0:', '            return False', '        i += 6', '    return True', '', '', 'def calculate_happiness_score(vowel_cluster: str) -> int:', '    happiness_score = 0', '    for i in range(len(vowel_cluster) - 1):', '        if (vowel_cluster[i] in "aeiouAEIOU") and (vowel_cluster[i+1] in "aeiouAEIOU"):', '            happiness_score += ord(vowel_cluster[i]) + ord(vowel_cluster[i+1])', '    return happiness_score', '', '', 'def maximizeHappiestScore(input: str) -> str:', '    vowels = [char for char in input if char in "aeiouAEIOU"]', '    if not vowels:', '        return "Happiest String:  - Happiest Score: 0 (Unhappy)"', '    vowel_clusters = set()', '    for i in range(len(vowels)):', '        for j in range(i, len(vowels)):', '            vowel_clusters.add("".join(sorted(vowels[i:j+1])))', '    permutations = permute(input)', '    largest_happiness_score = 0', '    happiest_vowel_cluster = ""', '    for vowel_cluster in vowel_clusters:', '        for permutation in permutations:', '            happiness_score = calculate_happiness_score(vowel_cluster)', '            if happiness_score > largest_happiness_score:', '                if is_prime(happiness_score) and is_happy_number(sum(int(i) for i in str(happiness_score))):', '                    largest_happiness_score = happiness_score', '                    happiest_vowel_cluster = vowel_cluster', '            elif happiness_score == largest_happiness_score:', '                if len(vowel_cluster) < len(happiest_vowel_cluster):', '                    happiest_vowel_cluster = vowel_cluster', '                elif len(vowel_cluster) =='], ['from typing import List, Dict', '', 'def maximizeHappiestScore(input: str) -> str:', '    vowels = "aeiouAEIOU"', '    max_happiness_score = 0', '    happiest_string = ""', '    permutations = permute(input)', '    vowel_clusters = []', '    for perm in permutations:', '        cluster = ""', '        happiness_score = 0', '        for i in range(len(perm)-1):', '            if perm[i] in vowels and perm[i+1] in vowels:', '                cluster += perm[i]', '                happiness_score += ord(perm[i])', '            if i == len(perm)-2 and perm[i+1] in vowels:', '                cluster += perm[i+1]', '                happiness_score += ord(perm[i+1])', '        if happiness_score > max_happiness_score:', '            max_happiness_score = happiness_score', '            vowel_clusters = [cluster]', '        elif happiness_score == max_happiness_score:', '            vowel_clusters.append(cluster)', '    if len(vowel_clusters) == 0:', '        status = "Unhappy"', '        happiest_score = 0', '    else:', '        happiness_scores = calculateLargestHappiestScore(vowel_clusters)', '        happiest_score = max(happiness_scores.values())', '        happiest_cluster = max([key for key, value in happiness_scores.items() if value == happiest_score])', '        status = "Happy" if happiest_score in [2, 4, 16, 37, 58, 89, 145] and sum(int(digit) for digit in str(happiest_score)) in [2, 4, 8] else "Unhappy"', '        happiest_string = "".join(sorted(happiest_cluster))', '    return f"Happiest String: {happiest_string} - Happiest Score: {happiest_score} ({status})"'], ['from typing import List, Dict', '', 'def maximizeHappiestScore(input: str) -> str:', "    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']", '    max_score = 0', "    max_vowel_cluster = ''", '    permutations = permute(input)', '    vowel_clusters = []', '    for perm in permutations:', "        cluster = ''", '        score = 0', '        for i in range(len(perm)):', '            if perm[i] in vowels:', '                cluster += perm[i]', '                if i > 0 and perm[i-1] in vowels:', '                    score += ord(perm[i]) + ord(perm[i-1])', '        if cluster:', '            vowel_clusters.append(cluster)', '            if score > max_score:', '                max_score = score', '                max_vowel_cluster = cluster', '    if max_score == 0:', "        status = 'Unhappy'", '    else:', '        happiness_sum = sum(int(i) for i in str(max_score) if i.isdigit())', '        if isHappyNumber(max_score) and happiness_sum == 2**int(log2(happiness_sum)):', "            status = 'Happy'", '        else:', "            status = 'Unhappy'", '    if not max_vowel_cluster:', '        out_string = "Happiest String: - Happiest Score: 0 (Unhappy)"', '    else:', '        out_string = f"Happiest String: {\'\'.join(sorted(max_vowel_cluster))} - Happiest Score: {max_score} ({status})"', '    return out_string', '', 'def isHappyNumber(num: int) -> bool:', '    def sum_of_squares(num: int) -> int:', '        return sum([int(i)**2 for i in str(num)])', '    visited = set()', '    while num != 1 and num not in visited:', '        visited.add(num)', '        num = sum_of_squares(num)', '    return num == 1', '', 'def log2(x: int) -> int:', '    return int(log(x, 2)) if x > 0 else 0'], ['from typing import Tuple, Dict, List', '', 'def maximizeHappiestScore(input: str) -> str:', '    def is_happy_number(num: int) -> bool:', '        def sum_of_digits(num: int) -> int:', '            return sum([int(i) for i in str(num)])', '        ', '        def is_power_of_two(num: int) -> bool:', '            return num > 0 and (num & (num - 1)) == 0', '        ', '        while num > 9:', '            num = sum_of_digits(num)', '        return is_power_of_two(num)', '    ', '    def get_happiness_score(s: str) -> int:', "        vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])", '        score = 0', '        happiness_scores = []', '        for i in range(len(s)):', '            if s[i] in vowels:', '                score += ord(s[i])', '                if i == len(s) - 1 or s[i+1] not in vowels:', '                    happiness_scores.append(score)', '                    score = 0', '        return max(happiness_scores) if happiness_scores else 0', '    ', '    permutations = permute(input)', '    happiest_scores = calculateLargestHappiestScore(permutations)', '    max_happiness_score = max(happiest_scores.values()) if happiest_scores else 0', "    happiest_vowel_cluster = ''", '    ', '    for vowel_cluster, happiness_score in happiest_scores.items():', '        if happiness_score == max_happiness_score:', '            if len(vowel_cluster) > len(happiest_vowel_cluster):', '                happiest_vowel_cluster = vowel_cluster', "            elif len(vowel_cluster) == len(happiest_vowel_cluster) and vowel_cluster.count('a') + vowel_cluster.count('e') + vowel_cluster.count('i') + vowel_cluster.count('o') + vowel_cluster.count('u') > happiest_vowel_cluster.count('a') + happiest_vowel_cluster.count('e') + happiest_vowel_cluster.count('i') + happiest_vowel_cluster.count('o') + happiest_vowel_cluster.count('u'):", '                happiest_vowel_cluster = vowel_cluster', "            elif len(vowel_cluster) == len(happiest_vowel_cluster) and vowel_cluster.count('a') + vowel_cluster.count('e') + vowel_cluster.count('i') + vowel_cluster"], ['from typing import List, Tuple, Dict', '', 'def is_happy_number(n: int) -> bool:', '    if n <= 0:', '        return False', '    while n != 1:', '        n = sum(int(x) ** 2 for x in str(n))', '        if n == 4:', '            return False', '    return True', '', 'def is_happy_prime(n: int) -> bool:', '    if not is_happy_number(n) or n == 1:', '        return False', '    for i in range(2, int(n ** 0.5) + 1):', '        if n % i == 0:', '            return False', '    return True', '', 'def sum_of_vowels(s: str) -> int:', '    vowels = set("aeiouAEIOU")', '    result = 0', '    for i in range(len(s)):', '        if s[i] in vowels:', '            result += ord(s[i])', '    return result', '', 'def maximizeHappiestScore(input: str) -> str:', '    vowels = set("aeiouAEIOU")', '    max_score = -1', '    max_cluster = ""', '    for perm in permute(input):', '        for i in range(len(perm)):', '            for j in range(i+1, len(perm)+1):', '                if set(perm[i:j]) <= vowels:', '                    score = sum_of_vowels(perm[i:j])', '                    if is_happy_prime(score):', '                        if score > max_score or (score == max_score and (len(perm[i:j]) < len(max_cluster) or (len(perm[i:j]) == len(max_cluster) and (sum_of_vowels(perm[i:j]) > sum_of_vowels(max_cluster) or (sum_of_vowels(perm[i:j]) == sum_of_vowels(max_cluster) and max_cluster < perm[i:j]))))):', '                            max_score = score', '                            max_cluster = perm[i:j]', '    if max_score == -1:', '        return "Happiest String: - Happiest Score: 0 (Unhappy)"', '    else:', '        return f"Happiest String: {max_cluster} - Happiest Score: {max_score} (Happy)"'], ['from typing import Tuple', '', 'def is_happy_number(num: int) -> bool:', '    if num < 2:', '        return False', '    elif num == 2:', '        return True', '    else:', '        while True:', '            digits = [int(d) for d in str(num)]', '            sum_of_squares = sum([d**2 for d in digits])', '            if sum_of_squares == 1:', '                return True', '            elif sum_of_squares == 4:', '                return False', '            else:', '                num = sum_of_squares', '', 'def maximizeHappiestScore(input: str) -> str:', "    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']", '    vowel_clusters = []', '    for i in range(len(input)):', '        if input[i] in vowels:', '            vowel_cluster = input[i]', '            for j in range(i+1, len(input)):', '                if input[j] in vowels:', '                    vowel_cluster += input[j]', '                else:', '                    break', '            vowel_clusters.append(vowel_cluster)', '', '    if len(vowel_clusters) == 0:', '        return "Happiest String: - Happiest Score: 0 (Unhappy)"', '', '    vowel_clusters = sorted(vowel_clusters)', '    largest_happiness_score = 0', '    happiest_cluster = ""', '', '    for permutation in permute(input):', '        for cluster in vowel_clusters:', '            if cluster in permutation:', '                happiness_score = sum([ord(c) for c in cluster])', '                if is_happy_number(happiness_score) and happiness_score > largest_happiness_score:', '                    largest_happiness_score = happiness_score', '                    happiest_cluster = cluster', '', '    if largest_happiness_score == 0:', '        return "Happiest String: - Happiest Score: 0 (Unhappy)"', '    else:', '        return f"Happiest String: {happiest_cluster} - Happiest Score: {largest_happiness_score} (Happy)"'], ['from typing import List, Tuple, Dict', '', 'def maximizeHappiestScore(input: str) -> str:', '    def isHappy(num: int) -> bool:', '        def sumOfDigits(n: int) -> int:', '            return sum(int(digit) for digit in str(n))', '', '        def isPowerOfTwo(n: int) -> bool:', '            return n != 0 and ((n & (n - 1)) == 0)', '', '        while num > 9:', '            num = sumOfDigits(num)', '        return isPowerOfTwo(num)', '', '    def getVowelClusters(s: str) -> List[str]:', '        vowels = "aeiouAEIOU"', '        vowel_clusters = []', '        start = -1', '        for i in range(len(s)):', '            if s[i] in vowels:', '                if start == -1:', '                    start = i', '            else:', '                if start != -1:', '                    vowel_clusters.append(s[start:i])', '                    start = -1', '        if start != -1:', '            vowel_clusters.append(s[start:])', '        return vowel_clusters', '', '    max_score = -1', '    happiest_string = ""', '    for permutation in permute(input):', '        vowel_clusters = getVowelClusters(permutation)', '        scores = {}', '        for vowel_cluster in vowel_clusters:', '            score = sum(ord(char) for char in vowel_cluster)', '            if isHappy(score):', "                if score not in scores or len(vowel_cluster) < len(scores[score][0]) or (len(vowel_cluster) == len(scores[score][0]) and vowel_cluster.count('aeiouAEIOU') > scores[score][0].count('aeiouAEIOU')) or (len(vowel_cluster) == len(scores[score][0]) and vowel_cluster.count('aeiouAEIOU') == scores[score][0].count('aeiouAEIOU') and vowel_cluster > scores[score][0]):", '                    scores[score] = (vowel_cluster, permutation)', '        if scores:', '            largest_happiest_score = max(scores.keys())', '            if largest_happiest_score > max_score or (largest_happiest_score == max_score and len(scores[largest_happiest_score][0]) < len(happiest_string)):', '                max_score = largest_happiest_score', '                happiest_string = scores[largest_happiest_score][0]', ''], ['from typing import List, Tuple', '', 'def maximizeHappiestScore(input: str) -> str:', '    def is_happy_number(n: int) -> bool:', '        def sum_of_digits(n: int) -> int:', '            return sum(map(int, str(n)))', '        ', '        def is_power_of_two(n: int) -> bool:', '            return n > 0 and (n & (n - 1)) == 0', '        ', '        while n != 1 and n != 4:', '            n = sum_of_digits(n)', '        return n == 1 or n == 4', '    ', '    def is_vowel(c: str) -> bool:', "        return c in ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']", '    ', '    def get_vowel_clusters(s: str) -> List[str]:', '        vowel_clusters = []', "        current_cluster = ''", '        for c in s:', '            if is_vowel(c):', '                current_cluster += c', '            else:', '                if len(current_cluster) > 0:', '                    vowel_clusters.append(current_cluster)', "                    current_cluster = ''", '        if len(current_cluster) > 0:', '            vowel_clusters.append(current_cluster)', '        return vowel_clusters', '    ', '    def get_happiness_score(vowel_cluster: str) -> int:', '        return sum(map(ord, vowel_cluster))', '    ', '    def get_happiest_string(permutations: List[Tuple[str, str]]) -> str:', '        happiest_score = -1', "        happiest_string = ''", '        for vowel_cluster, permuted_string in permutations:', '            happiness_score = get_happiness_score(vowel_cluster)', '            if is_happy_number(happiness_score) and happiness_score > happiest_score:', '                happiest_score = happiness_score', '                happiest_string = vowel_cluster', "        status = 'Happy' if happiest_score >= 0 else 'Unhappy'", '        return f\'Happiest String: {"".join(sorted(happiest_string))} - Happiest Score: {happiest_score} ({status})\'', '    ', '    vowel_clusters = get_vowel_clusters(input)', '    if not vowel_clusters:', "        return 'Happiest String: - Happiest Score: 0 (Unhappy)'", '    permutations = [(vc, "".join(sorted(input, key=lambda x: vc.find(x)))) for vc in set(vowel_clusters) for input in permute'], ['from typing import List, Dict', '', 'def maximizeHappiestScore(input: str) -> str:', "    vowels = set('aeiouAEIOU')", '    max_happiness_score = 0', '    happiest_string = ""', '    permutations = permute(input)', '    for permutation in permutations:', '        vowel_clusters = []', '        current_vowel_cluster = ""', '        for char in permutation:', '            if char in vowels:', '                current_vowel_cluster += char', '            else:', '                if len(current_vowel_cluster) > 1:', '                    vowel_clusters.append(current_vowel_cluster)', '                current_vowel_cluster = ""', '        if len(current_vowel_cluster) > 1:', '            vowel_clusters.append(current_vowel_cluster)', '        happiness_scores = []', '        for vowel_cluster in vowel_clusters:', '            happiness_score = sum(ord(char) for char in vowel_cluster)', '            happiness_scores.append(happiness_score)', '        if not happiness_scores:', '            happiness_scores.append(0)', '        happiest_score = max(happiness_scores)', '        if happiest_score > max_happiness_score:', '            max_happiness_score = happiest_score', '            happiest_string = max(vowel_clusters, key=lambda x: (-len(x), -sum(ord(char) for char in x), -ord(x[0])))', '    if max_happiness_score == 0:', '        status = "Unhappy"', '    else:', '        digits_sum = sum(int(digit) for digit in str(max_happiness_score))', '        if isHappyNumber(digits_sum):', '            status = "Happy"', '        else:', '            status = "Unhappy"', '    return f"Happiest String: {happiest_string} - Happiest Score: {max_happiness_score} ({status})"', '', 'def isHappyNumber(num: int) -> bool:', '    if num == 1:', '        return True', '    elif num == 4:', '        return False', '    else:', '        return isHappyNumber(sum(int(digit) ** 2 for digit in str(num)))'], ['from typing import List, Tuple', '', 'def maximizeHappiestScore(input: str) -> str:', '    def is_happy_number(num: int) -> bool:', '        def sum_of_digits(n: int) -> int:', '            return sum(int(digit) for digit in str(n))', '', '        def is_power_of_two(n: int) -> bool:', '            return n != 0 and (n & (n - 1)) == 0', '', '        while num != 1 and num != 4:', '            num = sum_of_digits(num)', '        return num == 1 or num == 4', '', '    def calculate_happiness_score(vowel_cluster: str) -> int:', '        vowels = "aeiouAEIOU"', '        score = 0', '        for i in range(len(vowel_cluster) - 1):', '            if vowel_cluster[i] in vowels and vowel_cluster[i + 1] in vowels:', '                score += ord(vowel_cluster[i]) + ord(vowel_cluster[i + 1])', '        return score', '', '    input = input.lower()', '    vowel_clusters = []', '    for permutation in permute(input):', '        for i in range(len(permutation)):', '            if permutation[i] in "aeiouAEIOU":', '                for j in range(i + 1, len(permutation) + 1):', '                    if j == len(permutation) or permutation[j] not in "aeiouAEIOU":', '                        vowel_clusters.append(permutation[i:j])', '                        break', '', '    happiest_score = -1', '    happiest_cluster = ""', '    for cluster in vowel_clusters:', '        score = calculate_happiness_score(cluster)', '        if is_happy_number(score) and score > happiest_score:', '            happiest_score = score', '            happiest_cluster = cluster', '        elif is_happy_number(score) and score == happiest_score:', '            if len(cluster) < len(happiest_cluster):', '                happiest_cluster = cluster', '            elif len(cluster) == len(happiest_cluster) and cluster.count(', '                "a"', '            ) + cluster.count("e") + cluster.count("i") + cluster.count(', '                "o"', '            ) + cluster.count("u") > happiest_cluster.count(', '                "a"', '            ) + happiest_cluster.count("e") + happiest_cluster.count("i") + happiest_cluster.count(', '                "o"', '            ) + happiest_cluster.count("u"):', '                happiest_cluster = cluster'], ['from typing import Tuple, List, Dict', '', 'def maximizeHappiestScore(input: str) -> str:', "    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']", '    max_happiness_score = 0', '    happiest_string = ""', '    perms = permute(input)', '    for perm in perms:', '        vowel_cluster = ""', '        happiness_score = 0', '        for i in range(len(perm)-1):', '            if perm[i] in vowels and perm[i+1] in vowels:', '                vowel_cluster += perm[i] + perm[i+1]', '                happiness_score += ord(perm[i]) + ord(perm[i+1])', '        if happiness_score > max_happiness_score and happiness_score in calculateLargestHappiestScore(perms).values():', '            max_happiness_score = happiness_score', '            happiest_string = "".join(sorted(vowel_cluster))', '    if max_happiness_score == 0:', '        return "Happiest String: {} - Happiest Score: {} ({})".format("", max_happiness_score, "Unhappy")', '    else:', '        if sum(int(i) for i in str(max_happiness_score)) == 2**int((sum(int(i) for i in str(max_happiness_score))**0.5)):', '            status = "Happy"', '        else:', '            status = "Unhappy"', '        return "Happiest String: {} - Happiest Score: {} ({})".format(happiest_string, max_happiness_score, status)'], ['from typing import List, Dict', '', 'def maximizeHappiestScore(input: str) -> str:', '    def isHappy(n: int) -> bool:', '        def getSumOfDigits(num: int) -> int:', '            return sum(int(digit) for digit in str(num))', '', '        def isPowerOfTwo(num: int) -> bool:', '            return num != 0 and ((num & (num - 1)) == 0)', '', '        num = n', '        while num > 9:', '            num = getSumOfDigits(num)', '        return num == 1 or num == 7 or num == 10 or num == 13 or num == 19 or num == 23 or num == 28 or num == 31', '', "    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']", '    max_happiness_score = 0', '    happiest_cluster = ""', '    for permutation in permute(input):', '        cluster = ""', '        happiness_score = 0', '        for i in range(len(permutation)):', '            if permutation[i] in vowels:', '                cluster += permutation[i]', '                if i > 0 and permutation[i-1] in vowels:', '                    happiness_score += ord(permutation[i]) + ord(permutation[i-1])', '        if happiness_score > max_happiness_score:', '            if isHappy(happiness_score):', '                max_happiness_score = happiness_score', '                happiest_cluster = cluster', '        elif happiness_score == max_happiness_score:', "            if len(cluster) < len(happiest_cluster) or (len(cluster) == len(happiest_cluster) and cluster.count('a') + cluster.count('e') + cluster.count('i') + cluster.count('o') + cluster.count('u') > happiest_cluster.count('a') + happiest_cluster.count('e') + happiest_cluster.count('i') + happiest_cluster.count('o') + happiest_cluster.count('u')) or (len(cluster) == len(happiest_cluster) and cluster.count('a') + cluster.count('e') + cluster.count('i') + cluster.count('o') + cluster.count('u') == happiest_cluster.count('a') + happiest_cluster.count('e') + happiest_cluster.count('i') + happiest_cluster.count('o') + happiest_cluster.count('u') and ord(cluster"], ['from typing import Tuple, Dict', '', 'def maximizeHappiestScore(input: str) -> str:', "    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])", '    vowel_clusters = set()', '    for i in range(len(input)):', '        if input[i] in vowels:', '            j = i+1', '            while j < len(input) and input[j] in vowels:', '                j += 1', '            vowel_clusters.add(input[i:j])', '    if not vowel_clusters:', '        return "Happiest String: - Happiest Score: 0 (Unhappy)"', '    happiest_score = 0', '    happiest_cluster = ""', '    for cluster in vowel_clusters:', '        permutations = permute(cluster)', '        scores = calculateLargestHappiestScore(permutations)', '        for key in scores.keys():', '            if scores[key] > happiest_score:', '                happiest_score = scores[key]', '                happiest_cluster = key', '            elif scores[key] == happiest_score:', '                if len(key) < len(happiest_cluster):', '                    happiest_cluster = key', '                elif len(key) == len(happiest_cluster):', "                    if key.count('a') + key.count('e') + key.count('i') + key.count('o') + key.count('u') > happiest_cluster.count('a') + happiest_cluster.count('e') + happiest_cluster.count('i') + happiest_cluster.count('o') + happiest_cluster.count('u'):", '                        happiest_cluster = key', "                    elif key.count('a') + key.count('e') + key.count('i') + key.count('o') + key.count('u') == happiest_cluster.count('a') + happiest_cluster.count('e') + happiest_cluster.count('i') + happiest_cluster.count('o') + happiest_cluster.count('u'):", '                        if ord(key[0]) > ord(happiest_cluster[0]):', '                            happiest_cluster = key', '    if sum([int(x) for x in str(happiest_score)]) == 2 ** (happiest_score.bit_length() - 1):', '        status = "Happy"', '    else:', '        status = "Unhappy"', '    return f"Happiest String: {happiest_cluster} - Happiest Score: {happiest_score} ({status})"'], ['from typing import List', '', 'def maximizeHappiestScore(input: str) -> str:', "    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])", '', '    def is_happy_number(n: int) -> bool:', '        def sum_of_digits(x: int) -> int:', '            res = 0', '            while x > 0:', '                res += x % 10', '                x //= 10', '            return res', '', '        def is_power_of_two(x: int) -> bool:', '            return x != 0 and (x & (x - 1)) == 0', '', '        while n != 1 and n != 4:', '            res = 0', '            while n > 0:', '                res += (n % 10) ** 2', '                n //= 10', '            n = res', '', '        return n == 1 or (n == 4 and is_power_of_two(sum_of_digits(n)))', '', '    def calculate_happiness_score(s: str) -> int:', '        score = 0', '        res = []', '        for i in range(len(s)):', '            if s[i] in vowels:', '                res.append(s[i])', '                if i == len(s) - 1 or s[i+1] not in vowels:', '                    score += sum([ord(c) for c in res])', '                    res = []', '        return score', '', '    permutations = permute(input)', '    max_score = -1', '    happiest_string = ""', '    for p in permutations:', '        score = calculate_happiness_score(p)', '        if score > max_score and is_happy_number(score):', '            max_score = score', '            happiest_string = p', '', '    if max_score == -1:', '        return "Happiest String: - Happiest Score: 0 (Unhappy)"', '    else:', '        largest_happiest_score = calculateLargestHappiestScore(permute(happiest_string))', '        return f"Happiest String: {largest_happiest_score[\'vowelCluster\']} - Happiest Score: {largest_happiest_score[\'happinessScore\']} (Happy)"'], ['from typing import List, Dict', '', 'def maximizeHappiestScore(input: str) -> str:', '    def is_happy_number(num: int) -> bool:', '        def sum_of_digits(n: int) -> int:', '            return sum(int(digit) for digit in str(n))', '', '        def is_power_of_two(n: int) -> bool:', '            return n != 0 and n & (n - 1) == 0', '', '        while num > 9:', '            num = sum_of_digits(num)', '', '        return is_power_of_two(num)', '', '    def is_vowel(char: str) -> bool:', '        return char in "aeiouAEIOU"', '', '    def get_vowel_clusters(string: str) -> List[str]:', '        clusters = []', '        current_cluster = ""', '', '        for char in string:', '            if is_vowel(char):', '                current_cluster += char', '            elif current_cluster:', '                clusters.append(current_cluster)', '                current_cluster = ""', '', '        if current_cluster:', '            clusters.append(current_cluster)', '', '        return clusters', '', '    permutations = permute(input)', '    largest_happiness_score = 0', '    happiest_cluster = ""', '', '    for permutation in permutations:', '        clusters = get_vowel_clusters(permutation)', '        happiness_scores = {}', '', '        for cluster in clusters:', '            score = sum(ord(char) for char in cluster)', '            if is_happy_number(score):', '                happiness_scores[cluster] = score', '', '        if happiness_scores:', '            largest_score = max(happiness_scores.values())', '            if largest_score > largest_happiness_score:', '                largest_happiness_score = largest_score', '                happiest_cluster = max(', '                    (cluster for cluster, score in happiness_scores.items() if score == largest_score),', '                    key=lambda x: (-len(x), -ord(x[0]), x)', '                )', '', '    status = "Happy" if largest_happiness_score else "Unhappy"', "    return f'Happiest String: {happiest_cluster} - Happiest Score: {largest_happiness_score} ({status})'"], ['from typing import List, Dict', '', 'def maximizeHappiestScore(input: str) -> str:', "    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}", '    max_score = -1', "    max_vowel_cluster = ''", '    for perm in permute(input):', '        vowel_cluster = []', '        score = 0', '        for i in range(len(perm)):', '            if perm[i] in vowels:', '                vowel_cluster.append(perm[i])', '                if i > 0 and perm[i-1] in vowels:', '                    score += ord(perm[i]) + ord(perm[i-1])', '        if len(vowel_cluster) > 0 and score > max_score:', '            sum_digits = sum(int(digit) for digit in str(score))', '            if sum_digits & (sum_digits - 1) == 0 and sum_digits > 0:', '                max_score = score', "                max_vowel_cluster = ''.join(sorted(vowel_cluster))", '    ', '    if max_score == -1:', '        return "Happiest String: - Happiest Score: 0 (Unhappy)"', '    elif max_score == 0:', '        return "Happiest String: - Happiest Score: 0 (Happy)"', '    else:', '        max_happiness_scores = calculateLargestHappiestScore(permute(input))', '        status = "Happy" if max_score in max_happiness_scores.values() else "Unhappy"', '        return f"Happiest String: {max_vowel_cluster} - Happiest Score: {max_score} ({status})"'], ['from typing import Tuple, Dict, List', '', 'def calculateHappinessScore(vowel_cluster: str) -> int:', '    """', '    Calculate the happiness score of a given vowel cluster.', '    """', "    vowels = set('aeiouAEIOU')", '    score = 0', '    for i in range(len(vowel_cluster)):', '        if vowel_cluster[i] in vowels:', '            score += ord(vowel_cluster[i])', '    return score', '', 'def isHappyNumber(n: int) -> bool:', '    """', '    Check if a number is a happy number.', '    """', '    def getSumOfDigits(n: int) -> int:', '        """', '        Calculate the sum of the digits of a given number.', '        """', '        sum_of_digits = 0', '        while n > 0:', '            sum_of_digits += n % 10', '            n //= 10', '        return sum_of_digits', '', '    def isPowerOfTwo(n: int) -> bool:', '        """', '        Check if a number is a power of 2.', '        """', '        return n and not (n & (n - 1))', '', '    sum_of_digits = getSumOfDigits(n)', '    while n > 9:', '        n = sum(int(digit)**2 for digit in str(n))', '    return n == 1 and isPowerOfTwo(sum_of_digits)', '', 'def maximizeHappiestScore(input: str) -> str:', '    """', '    Rearrange the string\'s characters to get the highest "Happiest score"', '    and return output string in format: "Happiest String: <happiest_string> -', '    Happiest Score: <happiness_score> (<status>)".', '    """', '    permutations = permute(input)', '    largest_happiest_score, happiest_vowel_cluster = calculateLargestHappiestScore(permutations)', '    if not happiest_vowel_cluster:', '        return f"Happiest String: - Happiest Score: 0 (Unhappy)"', '    sorted_vowel_cluster = sorted(happiest_vowel_cluster)', "    happiest_string = ''.join(sorted_vowel_cluster)", '    happiness_score = calculateHappinessScore(happiest_string)', '    status = "Happy" if isHappyNumber(happiness_score) else "Unhappy"', '    return f"Happiest String: {happiest_string} - Happiest Score: {happiness_score} ({status})"'], ['from typing import Dict, List, Tuple', '', 'def maximizeHappiestScore(input: str) -> str:', '    def isHappyNumber(n: int) -> bool:', '        def sumOfDigits(n: int) -> int:', '            return sum(int(digit) for digit in str(n))', '', '        def isPowerOfTwo(n: int) -> bool:', '            return (n & (n - 1)) == 0 and n != 0', '', '        while n != 1 and n != 4:', '            n = sumOfDigits(n)', '        return n == 1', '', '    def getVowelClusters(s: str) -> List[str]:', "        vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])", '        vowelClusters = []', "        currentCluster = ''", '        for char in s:', '            if char in vowels:', '                currentCluster += char', '            else:', '                if len(currentCluster) > 0:', '                    vowelClusters.append(currentCluster)', "                    currentCluster = ''", '        if len(currentCluster) > 0:', '            vowelClusters.append(currentCluster)', '        return vowelClusters', '', '    def getScore(s: str) -> int:', '        vowelClusters = getVowelClusters(s)', '        score = 0', '        for cluster in vowelClusters:', '            clusterScore = sum(ord(char) for char in cluster)', '            if isHappyNumber(clusterScore):', '                score += clusterScore', '        return score', '', '    permutations = permute(input)', '    happiestScores = calculateLargestHappiestScore(permutations)', '    happiestScore = max(happiestScores.values())', '    happiestClusters = [cluster for cluster, score in happiestScores.items() if score == happiestScore]', "    happiestCluster = min(happiestClusters, key=lambda x: (-len(x), -x.count('a'), -ord(x[0])))", '    if happiestScore == 0:', '        status = "Unhappy"', '    else:', '        status = "Happy"', '    return f\'Happiest String: {"".join(sorted(happiestCluster))} - Happiest Score: {happiestScore} ({status})\''], ['from typing import List, Tuple', '', 'def is_happy_number(num: int) -> bool:', '    def get_digit_sum(n: int) -> int:', '        return sum(int(digit) for digit in str(n))', '', '    def is_power_of_two(n: int) -> bool:', '        return n != 0 and (n & (n - 1)) == 0', '', '    while num > 9:', '        num = get_digit_sum(num)', '    return is_power_of_two(num)', '', 'def maximizeHappiestScore(input: str) -> str:', "    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])", '    permutations = permute(input)', '    happiest_scores = {}', '    for permutation in permutations:', '        vowel_clusters = []', '        current_cluster = ""', '        score = 0', '        for char in permutation:', '            if char in vowels:', '                current_cluster += char', '                score += ord(char)', '            elif current_cluster:', '                vowel_clusters.append((current_cluster, score))', '                current_cluster = ""', '                score = 0', '        if current_cluster:', '            vowel_clusters.append((current_cluster, score))', '        if vowel_clusters:', '            for cluster, score in vowel_clusters:', '                if is_happy_number(score):', '                    if score not in happiest_scores:', '                        happiest_scores[score] = [(cluster, permutation)]', '                    else:', '                        happiest_scores[score].append((cluster, permutation))', '    if not happiest_scores:', '        return "Happiest String: None - Happiest Score: 0 (Unhappy)"', '    max_score = max(happiest_scores.keys())', '    max_clusters = sorted(happiest_scores[max_score], key=lambda x: (-len(x[0]), -x[1], -ord(x[0][0])))', '    happiest_string = max_clusters[0][0]', '    return f"Happiest String: {happiest_string} - Happiest Score: {max_score} (Happy)"'], ['from typing import Tuple, List', '', 'def is_happy_number(number: int) -> bool:', '    def sum_digits(num: int) -> int:', '        return sum(int(digit) for digit in str(num))', '', '    def is_power_of_two(num: int) -> bool:', '        return num != 0 and ((num & (num - 1)) == 0)', '', '    if number < 2:', '        return False', '', '    while number != 1:', '        number = sum_digits(number)', '        if not is_power_of_two(number):', '            return False', '', '    return True', '', '', 'def maximizeHappiestScore(input: str) -> str:', "    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])", '', '    # Get all permutations of the input string', '    permutations = permute(input)', '', '    # Initialize variables to hold the happiest score and corresponding vowel cluster', '    max_happiness_score = 0', '    happiest_vowel_cluster = ""', '', '    # Iterate through all permutations', '    for perm in permutations:', '        # Find all vowel clusters in the permutation', '        vowel_clusters = []', '        current_vowel_cluster = ""', '        for char in perm:', '            if char in vowels:', '                current_vowel_cluster += char', '            else:', '                if current_vowel_cluster:', '                    vowel_clusters.append(current_vowel_cluster)', '                    current_vowel_cluster = ""', '        if current_vowel_cluster:', '            vowel_clusters.append(current_vowel_cluster)', '', '        # Calculate the happiness score for each vowel cluster and find the total happiness score', '        happiness_scores = []', '        total_happiness_score = 0', '        for cluster in vowel_clusters:', '            happiness_score = sum(ord(char) for char in cluster)', '            happiness_scores.append(happiness_score)', '            total_happiness_score += happiness_score', '', '        # Check if the total happiness score is greater than the current maximum', '        if total_happiness_score > max_happiness_score:', '            # Check if any of the happiness scores are happy numbers and find the largest one', '            happy_happiness_scores = [score for score in happiness_scores if is_happy_number(score)]', '            if happy_happiness_scores:', '                largest_happy_happiness_score = max(happy_happiness_scores)', '                happiest_cluster = sorted([cluster for cluster in vowel_clusters if sum(ord(char) for char in cluster)'], ['from typing import List, Dict', '', 'def maximizeHappiestScore(input: str) -> str:', '    def is_happy_number(n: int) -> bool:', '        def sum_of_digits(n: int) -> int:', '            res = 0', '            while n > 0:', '                res += n % 10', '                n //= 10', '            return res', '', '        def is_power_of_two(n: int) -> bool:', '            return n > 0 and (n & (n-1)) == 0', '', '        while n >= 10:', '            n = sum_of_digits(n)', '        return is_power_of_two(n)', '', '    def calculate_happiness_score(s: str) -> int:', '        VOWELS = set("aeiouAEIOU")', '        score = 0', '        for i in range(len(s)):', '            if s[i] in VOWELS:', '                j = i', '                while j < len(s) and s[j] in VOWELS:', '                    j += 1', '                cluster = s[i:j]', '                score += sum(ord(c) for c in cluster)', '        return score', '', '    if not any(c in "aeiouAEIOU" for c in input):', '        return "Happiest String: - Happiest Score: 0 (Unhappy)"', '', '    max_score = -1', '    max_cluster = ""', '    for perm in permute(input):', '        for i in range(len(perm)):', '            if perm[i] not in "aeiouAEIOU":', '                continue', '            j = i', '            while j < len(perm) and perm[j] in "aeiouAEIOU":', '                j += 1', '            cluster = "".join(sorted(perm[i:j]))', '            score = calculate_happiness_score(cluster)', '            if is_happy_number(score) and score > max_score:', '                max_score = score', '                max_cluster = cluster', '', '    if max_score == -1:', '        return "Happiest String: - Happiest Score: 0 (Unhappy)"', '    else:', '        return f"Happiest String: {max_cluster} - Happiest Score: {max_score} (Happy)"'], ['from typing import Dict, List, Tuple', '', 'def maximizeHappiestScore(input: str) -> str:', '    def is_happy_number(n: int) -> bool:', '        def sum_of_digits(n: int) -> int:', '            return sum(int(i) for i in str(n))', '', '        def is_power_of_two(n: int) -> bool:', '            return n != 0 and not (n & (n - 1))', '', '        while n > 9:', '            n = sum_of_digits(n)', '        return is_power_of_two(n)', '', '    def get_vowel_clusters(s: str) -> List[str]:', '        vowels = "aeiouAEIOU"', '        vowel_clusters = []', '        cluster = ""', '        for i in range(len(s)):', '            if s[i] in vowels:', '                cluster += s[i]', '            else:', '                if cluster:', '                    vowel_clusters.append(cluster)', '                    cluster = ""', '        if cluster:', '            vowel_clusters.append(cluster)', '        return vowel_clusters', '', '    permutations = permute(input)', '    happiest_scores: Dict[str, int] = {}', '    for perm in permutations:', '        vowel_clusters = get_vowel_clusters(perm)', '        for cluster in vowel_clusters:', '            score = sum(ord(c) for c in cluster)', '            if is_happy_number(score):', '                if cluster not in happiest_scores or score > happiest_scores[cluster]:', '                    happiest_scores[cluster] = score', '', '    if not happiest_scores:', '        return "Happiest String: - Happiest Score: 0 (Unhappy)"', '', '    happiest_cluster = max(happiest_scores.keys(), key=lambda k: (len(k), -k.count("aeiouAEIOU"), -ord(k[0]), -happiest_scores[k]))', '    happiest_score = happiest_scores[happiest_cluster]', '', '    return f"Happiest String: {happiest_cluster} - Happiest Score: {happiest_score} (Happy)"'], ['from typing import Tuple', '', 'def maximizeHappiestScore(input: str) -> str:', '    def is_happy_number(num: int) -> bool:', '        def get_sum_of_digits(num: int) -> int:', '            return sum(int(digit) for digit in str(num))', '', '        if num <= 1:', '            return False', '', '        while num != 4:', '            num = get_sum_of_digits(num)', '', '            if num == 1:', '                return True', '', '        return False', '', '    def is_prime(num: int) -> bool:', '        if num <= 1:', '            return False', '', '        for i in range(2, num):', '            if num % i == 0:', '                return False', '', '        return True', '', '    def get_happiness_score(vowel_cluster: str) -> int:', '        score = 0', '        vowel_indices = [i for i in range(len(vowel_cluster)) if vowel_cluster[i] in "aeiouAEIOU"]', '', '        for i in range(len(vowel_indices) - 1):', '            if vowel_indices[i + 1] - vowel_indices[i] == 1:', '                score += ord(vowel_cluster[vowel_indices[i]]) + ord(vowel_cluster[vowel_indices[i + 1]])', '', '        return score', '', '    permutations = permute(input)', '    happiest_scores = calculateLargestHappiestScore(permutations)', '', '    if not happiest_scores:', '        return "Happiest String:  - Happiest Score: 0 (Unhappy)"', '', '    happiest_score = max(happiest_scores.values())', '    happiest_clusters = [cluster for cluster, score in happiest_scores.items() if score == happiest_score]', '    happiest_cluster = sorted(happiest_clusters, key=lambda x: (-len(x), -sum(ord(char) for char in x), -ord(x[0])))[0]', '', '    if is_prime(happiest_score) and is_happy_number(happiest_score):', '        status = "Happy"', '    else:', '        status = "Unhappy"', '', '    return f"Happiest String: {happiest_cluster} - Happiest Score: {happiest_score} ({status})"'], ['from typing import List, Tuple', '', 'def maximizeHappiestScore(input: str) -> str:', '    def isHappy(num: int) -> bool:', '        def digitSum(n: int) -> int:', '            return sum(int(d) for d in str(n))', '        ', '        def isPowerOfTwo(n: int) -> bool:', '            return n != 0 and (n & (n - 1)) == 0', '        ', '        while num > 9:', '            num = digitSum(num)', '        return isPowerOfTwo(num)', '    ', '    def getVowelClusters(s: str) -> List[str]:', "        vowels = set('aeiouAEIOU')", '        clusters = []', "        cluster = ''", '        for c in s:', '            if c in vowels:', '                cluster += c', '            else:', '                if cluster:', '                    clusters.append(cluster)', "                    cluster = ''", '        if cluster:', '            clusters.append(cluster)', '        return sorted(clusters)', '    ', '    permutations = permute(input)', '    happiest_scores = calculateLargestHappiestScore(permutations)', '    happiest_score = 0', "    happiest_cluster = ''", '    for cluster, score in happiest_scores.items():', '        if isHappy(score) and score > happiest_score:', '            happiest_score = score', '            happiest_cluster = cluster', '    ', '    if happiest_cluster:', "        status = 'Happy'", '        happiest_cluster = sorted(happiest_cluster)', "        happiest_string = ''.join(happiest_cluster)", '    else:', "        status = 'Unhappy'", "        happiest_string = ''", '    ', "    return f'Happiest String: {happiest_string} - Happiest Score: {happiest_score} ({status})'"], ['from typing import List, Tuple, Dict', '', 'def getVowelClusters(s: str) -> List[str]:', "    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])", '    vowel_clusters = []', '    current_cluster = ""', '    for c in s:', '        if c in vowels:', '            current_cluster += c', '        else:', '            if current_cluster != "":', '                vowel_clusters.append(current_cluster)', '                current_cluster = ""', '    if current_cluster != "":', '        vowel_clusters.append(current_cluster)', '    return vowel_clusters', '', 'def isHappyNumber(n: int) -> bool:', '    def getSumOfDigits(n: int) -> int:', '        sum_of_digits = 0', '        while n > 0:', '            sum_of_digits += n % 10', '            n //= 10', '        return sum_of_digits', '    def isPowerOfTwo(n: int) -> bool:', '        if n == 0:', '            return False', '        return (n & (n-1)) == 0', '    while n > 9:', '        n = getSumOfDigits(n)', '    return isPowerOfTwo(n)', '', 'def getHappinessScore(s: str) -> int:', '    vowel_clusters = getVowelClusters(s)', '    happiness_scores = []', '    for cluster in vowel_clusters:', '        score = sum([ord(c) for c in cluster])', '        if isHappyNumber(score):', '            happiness_scores.append(score)', '    if len(happiness_scores) == 0:', '        return 0', '    happiest_score = max(happiness_scores)', '    vowel_cluster = sorted([cluster for cluster in vowel_clusters if sum([ord(c) for c in cluster]) == happiest_score], key=lambda x: (-len(x), -sum([ord(c) for c in x]), -ord(x[0])))[0]', '    return {"vowel_cluster": vowel_cluster, "happiness_score": happiest_score}', '', 'def maximizeHappiestScore(input: str) -> str:', '    permutations = permute(input)', '    largest_happiest_score = calculateLargestHappiestScore(permutations)', '    happiest_score = getHappinessScore(largest_happiest_score["vowel_cluster"])', '    if happiest_score["happiness_score"] == 0:', "        return f'Happiest String: - Happiest Score:"]]
Attempting to implement {'maximizeHappiestScore'}
Killing subprocesses
Successfully implemented {'maximizeHappiestScore'}
Implementing SCC 1 {'permute'}
Implementing SCC 2 {'calculateLargestHappiestScore'}
Implementing SCC 3 {'getListOfVowelClusters'}
Implementing SCC 4 {'findHappinestNumber'}
Writing to Ex4.py
Done writing to Ex4.py

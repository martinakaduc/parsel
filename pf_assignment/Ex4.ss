maximizeHappiestScore(input): takes a string, rearranges the string's characters to get the highest "Happiest score" and return output string in format: "Happiest String: <happiest_string> - Happiest Score: <happiness_score> (<status>)" (Does not include "). In which <happiest_string> is a vowel cluster arranged in ascending order according to the ASCII code corresponding to the Happiest score found; <happiness_score> is a non-negative integer; <status> is "Happy" or "Unhappy". You have the right to transpose all characters in the string. A permutation would be equivalent to an array of "Happiness scores". The "Happiness score" in this sentence is calculated as the sum of the ASCII codes of adjacent vowels (a, e, i, o, u, A, E, I, O, U) (vowel clusters). For example, "aebcdef" will be equivalent to a two-element array of "Happiness scores" corresponding to "ae" and "e". "Happiness score" can be "Happy number" or not. "Happy number" is a prime number and the sum of its digits is a power of base 2. "Happiest score" must be a "Happy number" and have the greatest sum of digits. If there is more than one "Happy number" with the largest sum of digits, the "Happiest number" will be the largest number. For each permutation of the string there will be a corresponding "Happiest score". You need to find the largest "Happiest score" and the vowel cluster corresponding to this number across all permutations of the string. If there are no vowels in the input string, the largest "Happiest score" is 0. In case there is more than one "Happiest score" with the same value, the vowel cluster has a shorter length and has more vowels (For example: "aia" has 2 vowels, 'a' and 'i') will prioritized. In the case of the same "Happiest score", the same length and number of vowels in the vowel cluster, the different first character of the vowel cluster with the larger ASCII code will be chosen.
"aeiou " -> "Happiest String: e - Happiest Score: 101 (Happy)"
"a e" -> "Happiest String: e - Happiest Score: 101 (Happy)"
    permute(input): takes a string, returns a list of all permutations of the string.
    "abc" -> ["abc", "acb", "bac", "bca", "cab", "cba"]
    calculateLargestHappiestScore(input): take a list of permutations of the string, returns the largest "Happiest score" and the corresponding vowel cluster in dictionary {"<vowel_cluster": <largest_happiest_score>}.
    ["abc", "acb", "bac", "bca", "cab", "cba"] -> {"a": 97}
    ["aeiou"] -> {}
        getListOfVowelClusters(input): takes a string, returns a list of all vowel clusters in the string.
        "abcde" -> ["a", "e"]
        "aeiou" -> ["aeiou"]
        findHappinestNumber(input): takes a list of vowel clusters, returns the "Happiest score" and the corresponding vowel cluster in dictionary {"<vowel_cluster": <happiest_score>}. "Happiness score" is the sum of all ASCII values of characters in vowel cluster. You can use built-in ord() to convert a char to ascii value.  "Happiness score" can be "Happy number" or not. "Happy number" is a prime number, and the sum of its digits is a power of base 2. "Happiest number" is the "Happy number" with the largest sum of digits. If there is more than one "Happy number" with the largest sum of digits, the "Happiest number" will be the largest number. If there is no "Happy number", the "Happiest number" is 0.
        ["a", "e"] -> {'a': 97}
        ["aeiou"] -> {}